
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 c9 4f 00 00 15 50 00 00 15 50 00 00     .P. .O...P...P..
      10:	15 50 00 00 15 50 00 00 15 50 00 00 00 00 00 00     .P...P...P......
	...
      2c:	bb 26 00 00 15 50 00 00 00 00 00 00 15 50 00 00     .&...P.......P..
      3c:	9d 26 00 00 15 50 00 00 15 50 00 00 15 50 00 00     .&...P...P...P..
      4c:	15 50 00 00 15 50 00 00 15 50 00 00 15 50 00 00     .P...P...P...P..
      5c:	15 50 00 00 15 50 00 00 15 50 00 00 15 50 00 00     .P...P...P...P..
      6c:	15 50 00 00 15 50 00 00 15 50 00 00 15 50 00 00     .P...P...P...P..
      7c:	15 50 00 00 15 50 00 00 15 50 00 00 15 50 00 00     .P...P...P...P..
      8c:	15 50 00 00 15 50 00 00 15 50 00 00 15 50 00 00     .P...P...P...P..
      9c:	15 50 00 00 15 50 00 00 15 50 00 00 15 50 00 00     .P...P...P...P..
      ac:	15 50 00 00 15 50 00 00 15 50 00 00 15 50 00 00     .P...P...P...P..
      bc:	15 50 00 00 15 50 00 00 15 50 00 00 15 50 00 00     .P...P...P...P..
      cc:	15 50 00 00 15 50 00 00 15 50 00 00 9d 26 00 00     .P...P...P...&..
      dc:	15 50 00 00 15 50 00 00 15 50 00 00 15 50 00 00     .P...P...P...P..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     110:	f3ef 8409 	mrs	r4, PSP
     114:	4620      	mov	r0, r4
     116:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     128:	f3ef 8408 	mrs	r4, MSP
     12c:	4620      	mov	r0, r4
     12e:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b490      	push	{r4, r7}
     13e:	b082      	sub	sp, #8
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	f04f 0300 	mov.w	r3, #0
     146:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     148:	f3ef 8412 	mrs	r4, BASEPRI_MAX
     14c:	607c      	str	r4, [r7, #4]
  return(result);
     14e:	687b      	ldr	r3, [r7, #4]
}
     150:	4618      	mov	r0, r3
     152:	f107 0708 	add.w	r7, r7, #8
     156:	46bd      	mov	sp, r7
     158:	bc90      	pop	{r4, r7}
     15a:	4770      	bx	lr

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	f107 070c 	add.w	r7, r7, #12
     16e:	46bd      	mov	sp, r7
     170:	bc80      	pop	{r7}
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b490      	push	{r4, r7}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	f04f 0300 	mov.w	r3, #0
     17e:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     180:	f3ef 8410 	mrs	r4, PRIMASK
     184:	607c      	str	r4, [r7, #4]
  return(result);
     186:	687b      	ldr	r3, [r7, #4]
}
     188:	4618      	mov	r0, r3
     18a:	f107 0708 	add.w	r7, r7, #8
     18e:	46bd      	mov	sp, r7
     190:	bc90      	pop	{r4, r7}
     192:	4770      	bx	lr

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	f107 070c 	add.w	r7, r7, #12
     1a6:	46bd      	mov	sp, r7
     1a8:	bc80      	pop	{r7}
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b490      	push	{r4, r7}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	f04f 0300 	mov.w	r3, #0
     1b6:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b8:	f3ef 8413 	mrs	r4, FAULTMASK
     1bc:	607c      	str	r4, [r7, #4]
  return(result);
     1be:	687b      	ldr	r3, [r7, #4]
}
     1c0:	4618      	mov	r0, r3
     1c2:	f107 0708 	add.w	r7, r7, #8
     1c6:	46bd      	mov	sp, r7
     1c8:	bc90      	pop	{r4, r7}
     1ca:	4770      	bx	lr

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	f107 070c 	add.w	r7, r7, #12
     1de:	46bd      	mov	sp, r7
     1e0:	bc80      	pop	{r7}
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b490      	push	{r4, r7}
     1e6:	b082      	sub	sp, #8
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	f04f 0300 	mov.w	r3, #0
     1ee:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1f0:	f3ef 8414 	mrs	r4, CONTROL
     1f4:	607c      	str	r4, [r7, #4]
  return(result);
     1f6:	687b      	ldr	r3, [r7, #4]
}
     1f8:	4618      	mov	r0, r3
     1fa:	f107 0708 	add.w	r7, r7, #8
     1fe:	46bd      	mov	sp, r7
     200:	bc90      	pop	{r4, r7}
     202:	4770      	bx	lr

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	f107 070c 	add.w	r7, r7, #12
     216:	46bd      	mov	sp, r7
     218:	bc80      	pop	{r7}
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b490      	push	{r4, r7}
     21e:	b084      	sub	sp, #16
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	f04f 0300 	mov.w	r3, #0
     228:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	ba1c      	rev	r4, r3
     22e:	60fc      	str	r4, [r7, #12]
  return(result);
     230:	68fb      	ldr	r3, [r7, #12]
}
     232:	4618      	mov	r0, r3
     234:	f107 0710 	add.w	r7, r7, #16
     238:	46bd      	mov	sp, r7
     23a:	bc90      	pop	{r4, r7}
     23c:	4770      	bx	lr
     23e:	bf00      	nop

00000240 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     240:	b490      	push	{r4, r7}
     242:	b084      	sub	sp, #16
     244:	af00      	add	r7, sp, #0
     246:	4603      	mov	r3, r0
     248:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     24a:	f04f 0300 	mov.w	r3, #0
     24e:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     250:	88fb      	ldrh	r3, [r7, #6]
     252:	ba5c      	rev16	r4, r3
     254:	60fc      	str	r4, [r7, #12]
  return(result);
     256:	68fb      	ldr	r3, [r7, #12]
}
     258:	4618      	mov	r0, r3
     25a:	f107 0710 	add.w	r7, r7, #16
     25e:	46bd      	mov	sp, r7
     260:	bc90      	pop	{r4, r7}
     262:	4770      	bx	lr

00000264 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     264:	b490      	push	{r4, r7}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	4603      	mov	r3, r0
     26c:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26e:	f04f 0300 	mov.w	r3, #0
     272:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     274:	88fb      	ldrh	r3, [r7, #6]
     276:	badc      	revsh	r4, r3
     278:	60fc      	str	r4, [r7, #12]
  return(result);
     27a:	68fb      	ldr	r3, [r7, #12]
}
     27c:	4618      	mov	r0, r3
     27e:	f107 0710 	add.w	r7, r7, #16
     282:	46bd      	mov	sp, r7
     284:	bc90      	pop	{r4, r7}
     286:	4770      	bx	lr

00000288 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     288:	b490      	push	{r4, r7}
     28a:	b084      	sub	sp, #16
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     290:	f04f 0300 	mov.w	r3, #0
     294:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     296:	687b      	ldr	r3, [r7, #4]
     298:	fa93 f4a3 	rbit	r4, r3
     29c:	60fc      	str	r4, [r7, #12]
   return(result);
     29e:	68fb      	ldr	r3, [r7, #12]
}
     2a0:	4618      	mov	r0, r3
     2a2:	f107 0710 	add.w	r7, r7, #16
     2a6:	46bd      	mov	sp, r7
     2a8:	bc90      	pop	{r4, r7}
     2aa:	4770      	bx	lr

000002ac <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2ac:	b490      	push	{r4, r7}
     2ae:	b084      	sub	sp, #16
     2b0:	af00      	add	r7, sp, #0
     2b2:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b4:	f04f 0300 	mov.w	r3, #0
     2b8:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2ba:	687b      	ldr	r3, [r7, #4]
     2bc:	e8d3 4f4f 	ldrexb	r4, [r3]
     2c0:	73fc      	strb	r4, [r7, #15]
   return(result);
     2c2:	7bfb      	ldrb	r3, [r7, #15]
}
     2c4:	4618      	mov	r0, r3
     2c6:	f107 0710 	add.w	r7, r7, #16
     2ca:	46bd      	mov	sp, r7
     2cc:	bc90      	pop	{r4, r7}
     2ce:	4770      	bx	lr

000002d0 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2d0:	b490      	push	{r4, r7}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d8:	f04f 0300 	mov.w	r3, #0
     2dc:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	e8d3 4f5f 	ldrexh	r4, [r3]
     2e4:	81fc      	strh	r4, [r7, #14]
   return(result);
     2e6:	89fb      	ldrh	r3, [r7, #14]
}
     2e8:	4618      	mov	r0, r3
     2ea:	f107 0710 	add.w	r7, r7, #16
     2ee:	46bd      	mov	sp, r7
     2f0:	bc90      	pop	{r4, r7}
     2f2:	4770      	bx	lr

000002f4 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f4:	b490      	push	{r4, r7}
     2f6:	b084      	sub	sp, #16
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2fc:	f04f 0300 	mov.w	r3, #0
     300:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     302:	687b      	ldr	r3, [r7, #4]
     304:	e853 4f00 	ldrex	r4, [r3]
     308:	60fc      	str	r4, [r7, #12]
   return(result);
     30a:	68fb      	ldr	r3, [r7, #12]
}
     30c:	4618      	mov	r0, r3
     30e:	f107 0710 	add.w	r7, r7, #16
     312:	46bd      	mov	sp, r7
     314:	bc90      	pop	{r4, r7}
     316:	4770      	bx	lr

00000318 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     318:	b490      	push	{r4, r7}
     31a:	b084      	sub	sp, #16
     31c:	af00      	add	r7, sp, #0
     31e:	4603      	mov	r3, r0
     320:	6039      	str	r1, [r7, #0]
     322:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     324:	f04f 0300 	mov.w	r3, #0
     328:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     32a:	683b      	ldr	r3, [r7, #0]
     32c:	79fa      	ldrb	r2, [r7, #7]
     32e:	e8c3 2f44 	strexb	r4, r2, [r3]
     332:	60fc      	str	r4, [r7, #12]
   return(result);
     334:	68fb      	ldr	r3, [r7, #12]
}
     336:	4618      	mov	r0, r3
     338:	f107 0710 	add.w	r7, r7, #16
     33c:	46bd      	mov	sp, r7
     33e:	bc90      	pop	{r4, r7}
     340:	4770      	bx	lr
     342:	bf00      	nop

00000344 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     344:	b490      	push	{r4, r7}
     346:	b084      	sub	sp, #16
     348:	af00      	add	r7, sp, #0
     34a:	4603      	mov	r3, r0
     34c:	6039      	str	r1, [r7, #0]
     34e:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     350:	f04f 0300 	mov.w	r3, #0
     354:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     356:	683b      	ldr	r3, [r7, #0]
     358:	88fa      	ldrh	r2, [r7, #6]
     35a:	e8c3 2f54 	strexh	r4, r2, [r3]
     35e:	60fc      	str	r4, [r7, #12]
   return(result);
     360:	68fb      	ldr	r3, [r7, #12]
}
     362:	4618      	mov	r0, r3
     364:	f107 0710 	add.w	r7, r7, #16
     368:	46bd      	mov	sp, r7
     36a:	bc90      	pop	{r4, r7}
     36c:	4770      	bx	lr
     36e:	bf00      	nop

00000370 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     370:	b490      	push	{r4, r7}
     372:	b084      	sub	sp, #16
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
     378:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     37a:	f04f 0300 	mov.w	r3, #0
     37e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     380:	683b      	ldr	r3, [r7, #0]
     382:	687a      	ldr	r2, [r7, #4]
     384:	e843 2400 	strex	r4, r2, [r3]
     388:	60fc      	str	r4, [r7, #12]
   return(result);
     38a:	68fb      	ldr	r3, [r7, #12]
}
     38c:	4618      	mov	r0, r3
     38e:	f107 0710 	add.w	r7, r7, #16
     392:	46bd      	mov	sp, r7
     394:	bc90      	pop	{r4, r7}
     396:	4770      	bx	lr

00000398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     398:	b580      	push	{r7, lr}
     39a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     39c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3ac:	6812      	ldr	r2, [r2, #0]
     3ae:	f042 0201 	orr.w	r2, r2, #1
     3b2:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     3b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c4:	6859      	ldr	r1, [r3, #4]
     3c6:	f04f 0300 	mov.w	r3, #0
     3ca:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     3ce:	400b      	ands	r3, r1
     3d0:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     3d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3de:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3e2:	6812      	ldr	r2, [r2, #0]
     3e4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     3e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     3ec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     3ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3fe:	6812      	ldr	r2, [r2, #0]
     400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     404:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     40a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     40e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     412:	f2c4 0202 	movt	r2, #16386	; 0x4002
     416:	6852      	ldr	r2, [r2, #4]
     418:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     41c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     41e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     422:	f2c4 0302 	movt	r3, #16386	; 0x4002
     426:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     42a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     42c:	f000 f8ac 	bl	588 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     430:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     434:	f2ce 0300 	movt	r3, #57344	; 0xe000
     438:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     43c:	609a      	str	r2, [r3, #8]
#endif
}
     43e:	bd80      	pop	{r7, pc}

00000440 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     440:	b480      	push	{r7}
     442:	b085      	sub	sp, #20
     444:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     446:	f04f 0300 	mov.w	r3, #0
     44a:	60fb      	str	r3, [r7, #12]
     44c:	f04f 0300 	mov.w	r3, #0
     450:	60bb      	str	r3, [r7, #8]
     452:	f04f 0300 	mov.w	r3, #0
     456:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     45c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     460:	685b      	ldr	r3, [r3, #4]
     462:	f003 030c 	and.w	r3, r3, #12
     466:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     468:	68fb      	ldr	r3, [r7, #12]
     46a:	2b04      	cmp	r3, #4
     46c:	d00d      	beq.n	48a <SystemCoreClockUpdate+0x4a>
     46e:	2b08      	cmp	r3, #8
     470:	d015      	beq.n	49e <SystemCoreClockUpdate+0x5e>
     472:	2b00      	cmp	r3, #0
     474:	d15c      	bne.n	530 <SystemCoreClockUpdate+0xf0>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     476:	f240 0300 	movw	r3, #0
     47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     47e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     482:	f2c0 027a 	movt	r2, #122	; 0x7a
     486:	601a      	str	r2, [r3, #0]
      break;
     488:	e05c      	b.n	544 <SystemCoreClockUpdate+0x104>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     48a:	f240 0300 	movw	r3, #0
     48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     492:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     496:	f2c0 027a 	movt	r2, #122	; 0x7a
     49a:	601a      	str	r2, [r3, #0]
      break;
     49c:	e052      	b.n	544 <SystemCoreClockUpdate+0x104>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4a6:	685b      	ldr	r3, [r3, #4]
     4a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     4ac:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     4ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4b6:	685b      	ldr	r3, [r3, #4]
     4b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     4bc:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	ea4f 4393 	mov.w	r3, r3, lsr #18
     4c4:	f103 0302 	add.w	r3, r3, #2
     4c8:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	2b00      	cmp	r3, #0
     4ce:	d10c      	bne.n	4ea <SystemCoreClockUpdate+0xaa>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     4d0:	68ba      	ldr	r2, [r7, #8]
     4d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
     4d6:	f2c0 033d 	movt	r3, #61	; 0x3d
     4da:	fb03 f202 	mul.w	r2, r3, r2
     4de:	f240 0300 	movw	r3, #0
     4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4e6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4e8:	e02c      	b.n	544 <SystemCoreClockUpdate+0x104>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     4ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4f2:	685b      	ldr	r3, [r3, #4]
     4f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4f8:	2b00      	cmp	r3, #0
     4fa:	d00c      	beq.n	516 <SystemCoreClockUpdate+0xd6>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     4fc:	68ba      	ldr	r2, [r7, #8]
     4fe:	f44f 6310 	mov.w	r3, #2304	; 0x900
     502:	f2c0 033d 	movt	r3, #61	; 0x3d
     506:	fb03 f202 	mul.w	r2, r3, r2
     50a:	f240 0300 	movw	r3, #0
     50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     512:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     514:	e016      	b.n	544 <SystemCoreClockUpdate+0x104>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     516:	68ba      	ldr	r2, [r7, #8]
     518:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     51c:	f2c0 037a 	movt	r3, #122	; 0x7a
     520:	fb03 f202 	mul.w	r2, r3, r2
     524:	f240 0300 	movw	r3, #0
     528:	f2c2 0300 	movt	r3, #8192	; 0x2000
     52c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     52e:	e009      	b.n	544 <SystemCoreClockUpdate+0x104>

    default:
      SystemCoreClock = HSI_VALUE;
     530:	f240 0300 	movw	r3, #0
     534:	f2c2 0300 	movt	r3, #8192	; 0x2000
     538:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     53c:	f2c0 027a 	movt	r2, #122	; 0x7a
     540:	601a      	str	r2, [r3, #0]
      break;
     542:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     548:	f2c4 0302 	movt	r3, #16386	; 0x4002
     54c:	685b      	ldr	r3, [r3, #4]
     54e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     552:	ea4f 1213 	mov.w	r2, r3, lsr #4
     556:	f240 0304 	movw	r3, #4
     55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     55e:	5c9b      	ldrb	r3, [r3, r2]
     560:	b2db      	uxtb	r3, r3
     562:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     564:	f240 0300 	movw	r3, #0
     568:	f2c2 0300 	movt	r3, #8192	; 0x2000
     56c:	681a      	ldr	r2, [r3, #0]
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	fa22 f203 	lsr.w	r2, r2, r3
     574:	f240 0300 	movw	r3, #0
     578:	f2c2 0300 	movt	r3, #8192	; 0x2000
     57c:	601a      	str	r2, [r3, #0]
}
     57e:	f107 0714 	add.w	r7, r7, #20
     582:	46bd      	mov	sp, r7
     584:	bc80      	pop	{r7}
     586:	4770      	bx	lr

00000588 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     588:	b580      	push	{r7, lr}
     58a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     58c:	f000 f802 	bl	594 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     590:	bd80      	pop	{r7, pc}
     592:	bf00      	nop

00000594 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     594:	b480      	push	{r7}
     596:	b083      	sub	sp, #12
     598:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     59a:	f04f 0300 	mov.w	r3, #0
     59e:	607b      	str	r3, [r7, #4]
     5a0:	f04f 0300 	mov.w	r3, #0
     5a4:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     5a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5b6:	6812      	ldr	r2, [r2, #0]
     5b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     5bc:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5cc:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	f103 0301 	add.w	r3, r3, #1
     5d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     5d6:	683b      	ldr	r3, [r7, #0]
     5d8:	2b00      	cmp	r3, #0
     5da:	d103      	bne.n	5e4 <SetSysClockTo72+0x50>
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     5e2:	d1ec      	bne.n	5be <SetSysClockTo72+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     5e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5f2:	2b00      	cmp	r3, #0
     5f4:	d003      	beq.n	5fe <SetSysClockTo72+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
     5f6:	f04f 0301 	mov.w	r3, #1
     5fa:	603b      	str	r3, [r7, #0]
     5fc:	e002      	b.n	604 <SetSysClockTo72+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     5fe:	f04f 0300 	mov.w	r3, #0
     602:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     604:	683b      	ldr	r3, [r7, #0]
     606:	2b01      	cmp	r3, #1
     608:	f040 8094 	bne.w	734 <SetSysClockTo72+0x1a0>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     60c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     610:	f2c4 0302 	movt	r3, #16386	; 0x4002
     614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     618:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61c:	6812      	ldr	r2, [r2, #0]
     61e:	f042 0210 	orr.w	r2, r2, #16
     622:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     628:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     630:	f2c4 0202 	movt	r2, #16386	; 0x4002
     634:	6812      	ldr	r2, [r2, #0]
     636:	f022 0203 	bic.w	r2, r2, #3
     63a:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     640:	f2c4 0302 	movt	r3, #16386	; 0x4002
     644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     648:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64c:	6812      	ldr	r2, [r2, #0]
     64e:	f042 0202 	orr.w	r2, r2, #2
     652:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     658:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     660:	f2c4 0202 	movt	r2, #16386	; 0x4002
     664:	6852      	ldr	r2, [r2, #4]
     666:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     66c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     674:	f2c4 0202 	movt	r2, #16386	; 0x4002
     678:	6852      	ldr	r2, [r2, #4]
     67a:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     67c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     680:	f2c4 0302 	movt	r3, #16386	; 0x4002
     684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     688:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68c:	6852      	ldr	r2, [r2, #4]
     68e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     692:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     698:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a4:	6852      	ldr	r2, [r2, #4]
     6a6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     6aa:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     6ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6bc:	6852      	ldr	r2, [r2, #4]
     6be:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     6c2:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6d4:	6812      	ldr	r2, [r2, #0]
     6d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     6da:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     6dc:	bf00      	nop
     6de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     6ec:	2b00      	cmp	r3, #0
     6ee:	d0f6      	beq.n	6de <SetSysClockTo72+0x14a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     700:	6852      	ldr	r2, [r2, #4]
     702:	f022 0203 	bic.w	r2, r2, #3
     706:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     70c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     714:	f2c4 0202 	movt	r2, #16386	; 0x4002
     718:	6852      	ldr	r2, [r2, #4]
     71a:	f042 0202 	orr.w	r2, r2, #2
     71e:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     720:	bf00      	nop
     722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     726:	f2c4 0302 	movt	r3, #16386	; 0x4002
     72a:	685b      	ldr	r3, [r3, #4]
     72c:	f003 030c 	and.w	r3, r3, #12
     730:	2b08      	cmp	r3, #8
     732:	d1f6      	bne.n	722 <SetSysClockTo72+0x18e>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     734:	f107 070c 	add.w	r7, r7, #12
     738:	46bd      	mov	sp, r7
     73a:	bc80      	pop	{r7}
     73c:	4770      	bx	lr
     73e:	bf00      	nop
     740:	00005238 	.word	0x00005238
     744:	20000000 	.word	0x20000000
     748:	20000028 	.word	0x20000028
     74c:	20000028 	.word	0x20000028
     750:	200000ec 	.word	0x200000ec

00000754 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     754:	b480      	push	{r7}
     756:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     75c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     764:	f2c4 0202 	movt	r2, #16386	; 0x4002
     768:	6812      	ldr	r2, [r2, #0]
     76a:	f042 0201 	orr.w	r2, r2, #1
     76e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     774:	f2c4 0202 	movt	r2, #16386	; 0x4002
     778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     77c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     780:	6859      	ldr	r1, [r3, #4]
     782:	f04f 0300 	mov.w	r3, #0
     786:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     78a:	400b      	ands	r3, r1
     78c:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     792:	f2c4 0302 	movt	r3, #16386	; 0x4002
     796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     79a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     79e:	6812      	ldr	r2, [r2, #0]
     7a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     7a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     7a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     7aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ba:	6812      	ldr	r2, [r2, #0]
     7bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     7c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d2:	6852      	ldr	r2, [r2, #4]
     7d4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     7d8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     7da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7de:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     7e6:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     7e8:	46bd      	mov	sp, r7
     7ea:	bc80      	pop	{r7}
     7ec:	4770      	bx	lr
     7ee:	bf00      	nop

000007f0 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     7f0:	b480      	push	{r7}
     7f2:	b083      	sub	sp, #12
     7f4:	af00      	add	r7, sp, #0
     7f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     7f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     800:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     804:	f2c4 0202 	movt	r2, #16386	; 0x4002
     808:	6812      	ldr	r2, [r2, #0]
     80a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     80e:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     814:	f2c4 0302 	movt	r3, #16386	; 0x4002
     818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     81c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     820:	6812      	ldr	r2, [r2, #0]
     822:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     826:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     828:	687b      	ldr	r3, [r7, #4]
     82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     82e:	d003      	beq.n	838 <RCC_HSEConfig+0x48>
     830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     834:	d00d      	beq.n	852 <RCC_HSEConfig+0x62>
     836:	e019      	b.n	86c <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     83c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     844:	f2c4 0202 	movt	r2, #16386	; 0x4002
     848:	6812      	ldr	r2, [r2, #0]
     84a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     84e:	601a      	str	r2, [r3, #0]
      break;
     850:	e00d      	b.n	86e <RCC_HSEConfig+0x7e>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     856:	f2c4 0302 	movt	r3, #16386	; 0x4002
     85a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     85e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     862:	6812      	ldr	r2, [r2, #0]
     864:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     868:	601a      	str	r2, [r3, #0]
      break;
     86a:	e000      	b.n	86e <RCC_HSEConfig+0x7e>

    default:
      break;
     86c:	bf00      	nop
  }
}
     86e:	f107 070c 	add.w	r7, r7, #12
     872:	46bd      	mov	sp, r7
     874:	bc80      	pop	{r7}
     876:	4770      	bx	lr

00000878 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     878:	b580      	push	{r7, lr}
     87a:	b082      	sub	sp, #8
     87c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     87e:	f04f 0300 	mov.w	r3, #0
     882:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     884:	f04f 0300 	mov.w	r3, #0
     888:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     88a:	f04f 0300 	mov.w	r3, #0
     88e:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     890:	f04f 0031 	mov.w	r0, #49	; 0x31
     894:	f000 fbce 	bl	1034 <RCC_GetFlagStatus>
     898:	4603      	mov	r3, r0
     89a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     89c:	683b      	ldr	r3, [r7, #0]
     89e:	f103 0301 	add.w	r3, r3, #1
     8a2:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     8a4:	683b      	ldr	r3, [r7, #0]
     8a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     8aa:	d002      	beq.n	8b2 <RCC_WaitForHSEStartUp+0x3a>
     8ac:	79bb      	ldrb	r3, [r7, #6]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d0ee      	beq.n	890 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     8b2:	f04f 0031 	mov.w	r0, #49	; 0x31
     8b6:	f000 fbbd 	bl	1034 <RCC_GetFlagStatus>
     8ba:	4603      	mov	r3, r0
     8bc:	2b00      	cmp	r3, #0
     8be:	d003      	beq.n	8c8 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
     8c0:	f04f 0301 	mov.w	r3, #1
     8c4:	71fb      	strb	r3, [r7, #7]
     8c6:	e002      	b.n	8ce <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
     8c8:	f04f 0300 	mov.w	r3, #0
     8cc:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     8ce:	79fb      	ldrb	r3, [r7, #7]
}
     8d0:	4618      	mov	r0, r3
     8d2:	f107 0708 	add.w	r7, r7, #8
     8d6:	46bd      	mov	sp, r7
     8d8:	bd80      	pop	{r7, pc}
     8da:	bf00      	nop

000008dc <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     8dc:	b480      	push	{r7}
     8de:	b085      	sub	sp, #20
     8e0:	af00      	add	r7, sp, #0
     8e2:	4603      	mov	r3, r0
     8e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     8e6:	f04f 0300 	mov.w	r3, #0
     8ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     8ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8f4:	681b      	ldr	r3, [r3, #0]
     8f6:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     8f8:	68fb      	ldr	r3, [r7, #12]
     8fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     8fe:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     900:	79fb      	ldrb	r3, [r7, #7]
     902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     906:	68fa      	ldr	r2, [r7, #12]
     908:	4313      	orrs	r3, r2
     90a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     90c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     910:	f2c4 0302 	movt	r3, #16386	; 0x4002
     914:	68fa      	ldr	r2, [r7, #12]
     916:	601a      	str	r2, [r3, #0]
}
     918:	f107 0714 	add.w	r7, r7, #20
     91c:	46bd      	mov	sp, r7
     91e:	bc80      	pop	{r7}
     920:	4770      	bx	lr
     922:	bf00      	nop

00000924 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     924:	b480      	push	{r7}
     926:	b083      	sub	sp, #12
     928:	af00      	add	r7, sp, #0
     92a:	4603      	mov	r3, r0
     92c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     92e:	f04f 0300 	mov.w	r3, #0
     932:	f2c4 2342 	movt	r3, #16962	; 0x4242
     936:	79fa      	ldrb	r2, [r7, #7]
     938:	601a      	str	r2, [r3, #0]
}
     93a:	f107 070c 	add.w	r7, r7, #12
     93e:	46bd      	mov	sp, r7
     940:	bc80      	pop	{r7}
     942:	4770      	bx	lr

00000944 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     944:	b480      	push	{r7}
     946:	b085      	sub	sp, #20
     948:	af00      	add	r7, sp, #0
     94a:	6078      	str	r0, [r7, #4]
     94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     94e:	f04f 0300 	mov.w	r3, #0
     952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     958:	f2c4 0302 	movt	r3, #16386	; 0x4002
     95c:	685b      	ldr	r3, [r3, #4]
     95e:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     960:	68fb      	ldr	r3, [r7, #12]
     962:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     966:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     968:	687a      	ldr	r2, [r7, #4]
     96a:	683b      	ldr	r3, [r7, #0]
     96c:	4313      	orrs	r3, r2
     96e:	68fa      	ldr	r2, [r7, #12]
     970:	4313      	orrs	r3, r2
     972:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     978:	f2c4 0302 	movt	r3, #16386	; 0x4002
     97c:	68fa      	ldr	r2, [r7, #12]
     97e:	605a      	str	r2, [r3, #4]
}
     980:	f107 0714 	add.w	r7, r7, #20
     984:	46bd      	mov	sp, r7
     986:	bc80      	pop	{r7}
     988:	4770      	bx	lr
     98a:	bf00      	nop

0000098c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     98c:	b480      	push	{r7}
     98e:	b083      	sub	sp, #12
     990:	af00      	add	r7, sp, #0
     992:	4603      	mov	r3, r0
     994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     996:	f04f 0360 	mov.w	r3, #96	; 0x60
     99a:	f2c4 2342 	movt	r3, #16962	; 0x4242
     99e:	79fa      	ldrb	r2, [r7, #7]
     9a0:	601a      	str	r2, [r3, #0]
}
     9a2:	f107 070c 	add.w	r7, r7, #12
     9a6:	46bd      	mov	sp, r7
     9a8:	bc80      	pop	{r7}
     9aa:	4770      	bx	lr

000009ac <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     9ac:	b480      	push	{r7}
     9ae:	b085      	sub	sp, #20
     9b0:	af00      	add	r7, sp, #0
     9b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9b4:	f04f 0300 	mov.w	r3, #0
     9b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     9ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9be:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9c2:	685b      	ldr	r3, [r3, #4]
     9c4:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	f023 0303 	bic.w	r3, r3, #3
     9cc:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     9ce:	68fa      	ldr	r2, [r7, #12]
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	4313      	orrs	r3, r2
     9d4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9da:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9de:	68fa      	ldr	r2, [r7, #12]
     9e0:	605a      	str	r2, [r3, #4]
}
     9e2:	f107 0714 	add.w	r7, r7, #20
     9e6:	46bd      	mov	sp, r7
     9e8:	bc80      	pop	{r7}
     9ea:	4770      	bx	lr

000009ec <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     9ec:	b480      	push	{r7}
     9ee:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     9f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9f8:	685b      	ldr	r3, [r3, #4]
     9fa:	b2db      	uxtb	r3, r3
     9fc:	f003 030c 	and.w	r3, r3, #12
     a00:	b2db      	uxtb	r3, r3
}
     a02:	4618      	mov	r0, r3
     a04:	46bd      	mov	sp, r7
     a06:	bc80      	pop	{r7}
     a08:	4770      	bx	lr
     a0a:	bf00      	nop

00000a0c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     a0c:	b480      	push	{r7}
     a0e:	b085      	sub	sp, #20
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a14:	f04f 0300 	mov.w	r3, #0
     a18:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a22:	685b      	ldr	r3, [r3, #4]
     a24:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     a26:	68fb      	ldr	r3, [r7, #12]
     a28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     a2c:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	4313      	orrs	r3, r2
     a34:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a3e:	68fa      	ldr	r2, [r7, #12]
     a40:	605a      	str	r2, [r3, #4]
}
     a42:	f107 0714 	add.w	r7, r7, #20
     a46:	46bd      	mov	sp, r7
     a48:	bc80      	pop	{r7}
     a4a:	4770      	bx	lr

00000a4c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     a4c:	b480      	push	{r7}
     a4e:	b085      	sub	sp, #20
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a54:	f04f 0300 	mov.w	r3, #0
     a58:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a62:	685b      	ldr	r3, [r3, #4]
     a64:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     a6c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     a6e:	68fa      	ldr	r2, [r7, #12]
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	4313      	orrs	r3, r2
     a74:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a7e:	68fa      	ldr	r2, [r7, #12]
     a80:	605a      	str	r2, [r3, #4]
}
     a82:	f107 0714 	add.w	r7, r7, #20
     a86:	46bd      	mov	sp, r7
     a88:	bc80      	pop	{r7}
     a8a:	4770      	bx	lr

00000a8c <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     a8c:	b480      	push	{r7}
     a8e:	b085      	sub	sp, #20
     a90:	af00      	add	r7, sp, #0
     a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a94:	f04f 0300 	mov.w	r3, #0
     a98:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aa2:	685b      	ldr	r3, [r3, #4]
     aa4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     aa6:	68fb      	ldr	r3, [r7, #12]
     aa8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     aac:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     ab4:	68fa      	ldr	r2, [r7, #12]
     ab6:	4313      	orrs	r3, r2
     ab8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     abe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac2:	68fa      	ldr	r2, [r7, #12]
     ac4:	605a      	str	r2, [r3, #4]
}
     ac6:	f107 0714 	add.w	r7, r7, #20
     aca:	46bd      	mov	sp, r7
     acc:	bc80      	pop	{r7}
     ace:	4770      	bx	lr

00000ad0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     ad0:	b480      	push	{r7}
     ad2:	b083      	sub	sp, #12
     ad4:	af00      	add	r7, sp, #0
     ad6:	4602      	mov	r2, r0
     ad8:	460b      	mov	r3, r1
     ada:	71fa      	strb	r2, [r7, #7]
     adc:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ade:	79bb      	ldrb	r3, [r7, #6]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d00e      	beq.n	b02 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     ae4:	f241 0309 	movw	r3, #4105	; 0x1009
     ae8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aec:	f241 0209 	movw	r2, #4105	; 0x1009
     af0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     af4:	7812      	ldrb	r2, [r2, #0]
     af6:	b2d1      	uxtb	r1, r2
     af8:	79fa      	ldrb	r2, [r7, #7]
     afa:	430a      	orrs	r2, r1
     afc:	b2d2      	uxtb	r2, r2
     afe:	701a      	strb	r2, [r3, #0]
     b00:	e010      	b.n	b24 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     b02:	f241 0309 	movw	r3, #4105	; 0x1009
     b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b0a:	f241 0209 	movw	r2, #4105	; 0x1009
     b0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b12:	7812      	ldrb	r2, [r2, #0]
     b14:	b2d1      	uxtb	r1, r2
     b16:	79fa      	ldrb	r2, [r7, #7]
     b18:	ea6f 0202 	mvn.w	r2, r2
     b1c:	b2d2      	uxtb	r2, r2
     b1e:	400a      	ands	r2, r1
     b20:	b2d2      	uxtb	r2, r2
     b22:	701a      	strb	r2, [r3, #0]
  }
}
     b24:	f107 070c 	add.w	r7, r7, #12
     b28:	46bd      	mov	sp, r7
     b2a:	bc80      	pop	{r7}
     b2c:	4770      	bx	lr
     b2e:	bf00      	nop

00000b30 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     b30:	b480      	push	{r7}
     b32:	b083      	sub	sp, #12
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     b38:	f04f 03d8 	mov.w	r3, #216	; 0xd8
     b3c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b40:	687a      	ldr	r2, [r7, #4]
     b42:	601a      	str	r2, [r3, #0]
}
     b44:	f107 070c 	add.w	r7, r7, #12
     b48:	46bd      	mov	sp, r7
     b4a:	bc80      	pop	{r7}
     b4c:	4770      	bx	lr
     b4e:	bf00      	nop

00000b50 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     b50:	b480      	push	{r7}
     b52:	b085      	sub	sp, #20
     b54:	af00      	add	r7, sp, #0
     b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     b58:	f04f 0300 	mov.w	r3, #0
     b5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b66:	685b      	ldr	r3, [r3, #4]
     b68:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     b6a:	68fb      	ldr	r3, [r7, #12]
     b6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     b70:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     b72:	68fa      	ldr	r2, [r7, #12]
     b74:	687b      	ldr	r3, [r7, #4]
     b76:	4313      	orrs	r3, r2
     b78:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b82:	68fa      	ldr	r2, [r7, #12]
     b84:	605a      	str	r2, [r3, #4]
}
     b86:	f107 0714 	add.w	r7, r7, #20
     b8a:	46bd      	mov	sp, r7
     b8c:	bc80      	pop	{r7}
     b8e:	4770      	bx	lr

00000b90 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     b90:	b480      	push	{r7}
     b92:	b083      	sub	sp, #12
     b94:	af00      	add	r7, sp, #0
     b96:	4603      	mov	r3, r0
     b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b9a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ba2:	f04f 0200 	mov.w	r2, #0
     ba6:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     ba8:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bb0:	f04f 0200 	mov.w	r2, #0
     bb4:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     bb6:	79fb      	ldrb	r3, [r7, #7]
     bb8:	2b01      	cmp	r3, #1
     bba:	d002      	beq.n	bc2 <RCC_LSEConfig+0x32>
     bbc:	2b04      	cmp	r3, #4
     bbe:	d008      	beq.n	bd2 <RCC_LSEConfig+0x42>
     bc0:	e00f      	b.n	be2 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     bc2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bca:	f04f 0201 	mov.w	r2, #1
     bce:	701a      	strb	r2, [r3, #0]
      break;
     bd0:	e008      	b.n	be4 <RCC_LSEConfig+0x54>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     bd2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bda:	f04f 0205 	mov.w	r2, #5
     bde:	701a      	strb	r2, [r3, #0]
      break;
     be0:	e000      	b.n	be4 <RCC_LSEConfig+0x54>

    default:
      break;
     be2:	bf00      	nop
  }
}
     be4:	f107 070c 	add.w	r7, r7, #12
     be8:	46bd      	mov	sp, r7
     bea:	bc80      	pop	{r7}
     bec:	4770      	bx	lr
     bee:	bf00      	nop

00000bf0 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     bf0:	b480      	push	{r7}
     bf2:	b083      	sub	sp, #12
     bf4:	af00      	add	r7, sp, #0
     bf6:	4603      	mov	r3, r0
     bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     bfa:	f44f 6390 	mov.w	r3, #1152	; 0x480
     bfe:	f2c4 2342 	movt	r3, #16962	; 0x4242
     c02:	79fa      	ldrb	r2, [r7, #7]
     c04:	601a      	str	r2, [r3, #0]
}
     c06:	f107 070c 	add.w	r7, r7, #12
     c0a:	46bd      	mov	sp, r7
     c0c:	bc80      	pop	{r7}
     c0e:	4770      	bx	lr

00000c10 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     c10:	b480      	push	{r7}
     c12:	b083      	sub	sp, #12
     c14:	af00      	add	r7, sp, #0
     c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c24:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c28:	6a11      	ldr	r1, [r2, #32]
     c2a:	687a      	ldr	r2, [r7, #4]
     c2c:	430a      	orrs	r2, r1
     c2e:	621a      	str	r2, [r3, #32]
}
     c30:	f107 070c 	add.w	r7, r7, #12
     c34:	46bd      	mov	sp, r7
     c36:	bc80      	pop	{r7}
     c38:	4770      	bx	lr
     c3a:	bf00      	nop

00000c3c <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     c3c:	b480      	push	{r7}
     c3e:	b083      	sub	sp, #12
     c40:	af00      	add	r7, sp, #0
     c42:	4603      	mov	r3, r0
     c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     c46:	f240 433c 	movw	r3, #1084	; 0x43c
     c4a:	f2c4 2342 	movt	r3, #16962	; 0x4242
     c4e:	79fa      	ldrb	r2, [r7, #7]
     c50:	601a      	str	r2, [r3, #0]
}
     c52:	f107 070c 	add.w	r7, r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	bc80      	pop	{r7}
     c5a:	4770      	bx	lr

00000c5c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     c5c:	b480      	push	{r7}
     c5e:	b087      	sub	sp, #28
     c60:	af00      	add	r7, sp, #0
     c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     c64:	f04f 0300 	mov.w	r3, #0
     c68:	617b      	str	r3, [r7, #20]
     c6a:	f04f 0300 	mov.w	r3, #0
     c6e:	613b      	str	r3, [r7, #16]
     c70:	f04f 0300 	mov.w	r3, #0
     c74:	60fb      	str	r3, [r7, #12]
     c76:	f04f 0300 	mov.w	r3, #0
     c7a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c80:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c84:	685b      	ldr	r3, [r3, #4]
     c86:	f003 030c 	and.w	r3, r3, #12
     c8a:	617b      	str	r3, [r7, #20]

  switch (tmp)
     c8c:	697b      	ldr	r3, [r7, #20]
     c8e:	2b04      	cmp	r3, #4
     c90:	d00a      	beq.n	ca8 <RCC_GetClocksFreq+0x4c>
     c92:	2b08      	cmp	r3, #8
     c94:	d00f      	beq.n	cb6 <RCC_GetClocksFreq+0x5a>
     c96:	2b00      	cmp	r3, #0
     c98:	d14d      	bne.n	d36 <RCC_GetClocksFreq+0xda>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c9a:	687a      	ldr	r2, [r7, #4]
     c9c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     ca0:	f2c0 037a 	movt	r3, #122	; 0x7a
     ca4:	6013      	str	r3, [r2, #0]
      break;
     ca6:	e04d      	b.n	d44 <RCC_GetClocksFreq+0xe8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     ca8:	687a      	ldr	r2, [r7, #4]
     caa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     cae:	f2c0 037a 	movt	r3, #122	; 0x7a
     cb2:	6013      	str	r3, [r2, #0]
      break;
     cb4:	e046      	b.n	d44 <RCC_GetClocksFreq+0xe8>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cba:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cbe:	685b      	ldr	r3, [r3, #4]
     cc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     cc4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     cd4:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     cd6:	693b      	ldr	r3, [r7, #16]
     cd8:	ea4f 4393 	mov.w	r3, r3, lsr #18
     cdc:	f103 0302 	add.w	r3, r3, #2
     ce0:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	2b00      	cmp	r3, #0
     ce6:	d109      	bne.n	cfc <RCC_GetClocksFreq+0xa0>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     ce8:	693a      	ldr	r2, [r7, #16]
     cea:	f44f 6310 	mov.w	r3, #2304	; 0x900
     cee:	f2c0 033d 	movt	r3, #61	; 0x3d
     cf2:	fb03 f202 	mul.w	r2, r3, r2
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     cfa:	e023      	b.n	d44 <RCC_GetClocksFreq+0xe8>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d00:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d04:	685b      	ldr	r3, [r3, #4]
     d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     d0a:	2b00      	cmp	r3, #0
     d0c:	d009      	beq.n	d22 <RCC_GetClocksFreq+0xc6>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     d0e:	693a      	ldr	r2, [r7, #16]
     d10:	f44f 6310 	mov.w	r3, #2304	; 0x900
     d14:	f2c0 033d 	movt	r3, #61	; 0x3d
     d18:	fb03 f202 	mul.w	r2, r3, r2
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     d20:	e010      	b.n	d44 <RCC_GetClocksFreq+0xe8>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     d22:	693a      	ldr	r2, [r7, #16]
     d24:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     d28:	f2c0 037a 	movt	r3, #122	; 0x7a
     d2c:	fb03 f202 	mul.w	r2, r3, r2
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     d34:	e006      	b.n	d44 <RCC_GetClocksFreq+0xe8>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     d36:	687a      	ldr	r2, [r7, #4]
     d38:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     d3c:	f2c0 037a 	movt	r3, #122	; 0x7a
     d40:	6013      	str	r3, [r2, #0]
      break;
     d42:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d48:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d4c:	685b      	ldr	r3, [r3, #4]
     d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     d52:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     d54:	697b      	ldr	r3, [r7, #20]
     d56:	ea4f 1313 	mov.w	r3, r3, lsr #4
     d5a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d5c:	f240 0314 	movw	r3, #20
     d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d64:	697a      	ldr	r2, [r7, #20]
     d66:	189b      	adds	r3, r3, r2
     d68:	781b      	ldrb	r3, [r3, #0]
     d6a:	b2db      	uxtb	r3, r3
     d6c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	681a      	ldr	r2, [r3, #0]
     d72:	68bb      	ldr	r3, [r7, #8]
     d74:	fa22 f203 	lsr.w	r2, r2, r3
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d80:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d84:	685b      	ldr	r3, [r3, #4]
     d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     d8a:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     d8c:	697b      	ldr	r3, [r7, #20]
     d8e:	ea4f 2313 	mov.w	r3, r3, lsr #8
     d92:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d94:	f240 0314 	movw	r3, #20
     d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d9c:	697a      	ldr	r2, [r7, #20]
     d9e:	189b      	adds	r3, r3, r2
     da0:	781b      	ldrb	r3, [r3, #0]
     da2:	b2db      	uxtb	r3, r3
     da4:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	685a      	ldr	r2, [r3, #4]
     daa:	68bb      	ldr	r3, [r7, #8]
     dac:	fa22 f203 	lsr.w	r2, r2, r3
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     db8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dbc:	685b      	ldr	r3, [r3, #4]
     dbe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     dc2:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     dc4:	697b      	ldr	r3, [r7, #20]
     dc6:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     dca:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     dcc:	f240 0314 	movw	r3, #20
     dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     dd4:	697a      	ldr	r2, [r7, #20]
     dd6:	189b      	adds	r3, r3, r2
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	b2db      	uxtb	r3, r3
     ddc:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	685a      	ldr	r2, [r3, #4]
     de2:	68bb      	ldr	r3, [r7, #8]
     de4:	fa22 f203 	lsr.w	r2, r2, r3
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	685b      	ldr	r3, [r3, #4]
     df6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     dfa:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     dfc:	697b      	ldr	r3, [r7, #20]
     dfe:	ea4f 3393 	mov.w	r3, r3, lsr #14
     e02:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     e04:	f240 0324 	movw	r3, #36	; 0x24
     e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e0c:	697a      	ldr	r2, [r7, #20]
     e0e:	189b      	adds	r3, r3, r2
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	b2db      	uxtb	r3, r3
     e14:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	68da      	ldr	r2, [r3, #12]
     e1a:	68bb      	ldr	r3, [r7, #8]
     e1c:	fbb2 f2f3 	udiv	r2, r2, r3
     e20:	687b      	ldr	r3, [r7, #4]
     e22:	611a      	str	r2, [r3, #16]
}
     e24:	f107 071c 	add.w	r7, r7, #28
     e28:	46bd      	mov	sp, r7
     e2a:	bc80      	pop	{r7}
     e2c:	4770      	bx	lr
     e2e:	bf00      	nop

00000e30 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     e30:	b480      	push	{r7}
     e32:	b083      	sub	sp, #12
     e34:	af00      	add	r7, sp, #0
     e36:	6078      	str	r0, [r7, #4]
     e38:	460b      	mov	r3, r1
     e3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     e3c:	78fb      	ldrb	r3, [r7, #3]
     e3e:	2b00      	cmp	r3, #0
     e40:	d00c      	beq.n	e5c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e46:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e52:	6951      	ldr	r1, [r2, #20]
     e54:	687a      	ldr	r2, [r7, #4]
     e56:	430a      	orrs	r2, r1
     e58:	615a      	str	r2, [r3, #20]
     e5a:	e00d      	b.n	e78 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e60:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e68:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e6c:	6951      	ldr	r1, [r2, #20]
     e6e:	687a      	ldr	r2, [r7, #4]
     e70:	ea6f 0202 	mvn.w	r2, r2
     e74:	400a      	ands	r2, r1
     e76:	615a      	str	r2, [r3, #20]
  }
}
     e78:	f107 070c 	add.w	r7, r7, #12
     e7c:	46bd      	mov	sp, r7
     e7e:	bc80      	pop	{r7}
     e80:	4770      	bx	lr
     e82:	bf00      	nop

00000e84 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e84:	b480      	push	{r7}
     e86:	b083      	sub	sp, #12
     e88:	af00      	add	r7, sp, #0
     e8a:	6078      	str	r0, [r7, #4]
     e8c:	460b      	mov	r3, r1
     e8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e90:	78fb      	ldrb	r3, [r7, #3]
     e92:	2b00      	cmp	r3, #0
     e94:	d00c      	beq.n	eb0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ea2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ea6:	6991      	ldr	r1, [r2, #24]
     ea8:	687a      	ldr	r2, [r7, #4]
     eaa:	430a      	orrs	r2, r1
     eac:	619a      	str	r2, [r3, #24]
     eae:	e00d      	b.n	ecc <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ebc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ec0:	6991      	ldr	r1, [r2, #24]
     ec2:	687a      	ldr	r2, [r7, #4]
     ec4:	ea6f 0202 	mvn.w	r2, r2
     ec8:	400a      	ands	r2, r1
     eca:	619a      	str	r2, [r3, #24]
  }
}
     ecc:	f107 070c 	add.w	r7, r7, #12
     ed0:	46bd      	mov	sp, r7
     ed2:	bc80      	pop	{r7}
     ed4:	4770      	bx	lr
     ed6:	bf00      	nop

00000ed8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     ed8:	b480      	push	{r7}
     eda:	b083      	sub	sp, #12
     edc:	af00      	add	r7, sp, #0
     ede:	6078      	str	r0, [r7, #4]
     ee0:	460b      	mov	r3, r1
     ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ee4:	78fb      	ldrb	r3, [r7, #3]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d00c      	beq.n	f04 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ef6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     efa:	69d1      	ldr	r1, [r2, #28]
     efc:	687a      	ldr	r2, [r7, #4]
     efe:	430a      	orrs	r2, r1
     f00:	61da      	str	r2, [r3, #28]
     f02:	e00d      	b.n	f20 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f08:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f10:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f14:	69d1      	ldr	r1, [r2, #28]
     f16:	687a      	ldr	r2, [r7, #4]
     f18:	ea6f 0202 	mvn.w	r2, r2
     f1c:	400a      	ands	r2, r1
     f1e:	61da      	str	r2, [r3, #28]
  }
}
     f20:	f107 070c 	add.w	r7, r7, #12
     f24:	46bd      	mov	sp, r7
     f26:	bc80      	pop	{r7}
     f28:	4770      	bx	lr
     f2a:	bf00      	nop

00000f2c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     f2c:	b480      	push	{r7}
     f2e:	b083      	sub	sp, #12
     f30:	af00      	add	r7, sp, #0
     f32:	6078      	str	r0, [r7, #4]
     f34:	460b      	mov	r3, r1
     f36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f38:	78fb      	ldrb	r3, [r7, #3]
     f3a:	2b00      	cmp	r3, #0
     f3c:	d00c      	beq.n	f58 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f42:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f4e:	68d1      	ldr	r1, [r2, #12]
     f50:	687a      	ldr	r2, [r7, #4]
     f52:	430a      	orrs	r2, r1
     f54:	60da      	str	r2, [r3, #12]
     f56:	e00d      	b.n	f74 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f64:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f68:	68d1      	ldr	r1, [r2, #12]
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	ea6f 0202 	mvn.w	r2, r2
     f70:	400a      	ands	r2, r1
     f72:	60da      	str	r2, [r3, #12]
  }
}
     f74:	f107 070c 	add.w	r7, r7, #12
     f78:	46bd      	mov	sp, r7
     f7a:	bc80      	pop	{r7}
     f7c:	4770      	bx	lr
     f7e:	bf00      	nop

00000f80 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     f80:	b480      	push	{r7}
     f82:	b083      	sub	sp, #12
     f84:	af00      	add	r7, sp, #0
     f86:	6078      	str	r0, [r7, #4]
     f88:	460b      	mov	r3, r1
     f8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f8c:	78fb      	ldrb	r3, [r7, #3]
     f8e:	2b00      	cmp	r3, #0
     f90:	d00c      	beq.n	fac <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fa2:	6911      	ldr	r1, [r2, #16]
     fa4:	687a      	ldr	r2, [r7, #4]
     fa6:	430a      	orrs	r2, r1
     fa8:	611a      	str	r2, [r3, #16]
     faa:	e00d      	b.n	fc8 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     fb8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fbc:	6911      	ldr	r1, [r2, #16]
     fbe:	687a      	ldr	r2, [r7, #4]
     fc0:	ea6f 0202 	mvn.w	r2, r2
     fc4:	400a      	ands	r2, r1
     fc6:	611a      	str	r2, [r3, #16]
  }
}
     fc8:	f107 070c 	add.w	r7, r7, #12
     fcc:	46bd      	mov	sp, r7
     fce:	bc80      	pop	{r7}
     fd0:	4770      	bx	lr
     fd2:	bf00      	nop

00000fd4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     fd4:	b480      	push	{r7}
     fd6:	b083      	sub	sp, #12
     fd8:	af00      	add	r7, sp, #0
     fda:	4603      	mov	r3, r0
     fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     fde:	f44f 6388 	mov.w	r3, #1088	; 0x440
     fe2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     fe6:	79fa      	ldrb	r2, [r7, #7]
     fe8:	601a      	str	r2, [r3, #0]
}
     fea:	f107 070c 	add.w	r7, r7, #12
     fee:	46bd      	mov	sp, r7
     ff0:	bc80      	pop	{r7}
     ff2:	4770      	bx	lr

00000ff4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     ff4:	b480      	push	{r7}
     ff6:	b083      	sub	sp, #12
     ff8:	af00      	add	r7, sp, #0
     ffa:	4603      	mov	r3, r0
     ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     ffe:	f04f 034c 	mov.w	r3, #76	; 0x4c
    1002:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1006:	79fa      	ldrb	r2, [r7, #7]
    1008:	601a      	str	r2, [r3, #0]
}
    100a:	f107 070c 	add.w	r7, r7, #12
    100e:	46bd      	mov	sp, r7
    1010:	bc80      	pop	{r7}
    1012:	4770      	bx	lr

00001014 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    1014:	b480      	push	{r7}
    1016:	b083      	sub	sp, #12
    1018:	af00      	add	r7, sp, #0
    101a:	4603      	mov	r3, r0
    101c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    101e:	f241 0307 	movw	r3, #4103	; 0x1007
    1022:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1026:	79fa      	ldrb	r2, [r7, #7]
    1028:	701a      	strb	r2, [r3, #0]
}
    102a:	f107 070c 	add.w	r7, r7, #12
    102e:	46bd      	mov	sp, r7
    1030:	bc80      	pop	{r7}
    1032:	4770      	bx	lr

00001034 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    1034:	b480      	push	{r7}
    1036:	b087      	sub	sp, #28
    1038:	af00      	add	r7, sp, #0
    103a:	4603      	mov	r3, r0
    103c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    103e:	f04f 0300 	mov.w	r3, #0
    1042:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    1044:	f04f 0300 	mov.w	r3, #0
    1048:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    104a:	f04f 0300 	mov.w	r3, #0
    104e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    1050:	79fb      	ldrb	r3, [r7, #7]
    1052:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1056:	b2db      	uxtb	r3, r3
    1058:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    105a:	68fb      	ldr	r3, [r7, #12]
    105c:	2b01      	cmp	r3, #1
    105e:	d106      	bne.n	106e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
    1060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1064:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	617b      	str	r3, [r7, #20]
    106c:	e00f      	b.n	108e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    106e:	68fb      	ldr	r3, [r7, #12]
    1070:	2b02      	cmp	r3, #2
    1072:	d106      	bne.n	1082 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
    1074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1078:	f2c4 0302 	movt	r3, #16386	; 0x4002
    107c:	6a1b      	ldr	r3, [r3, #32]
    107e:	617b      	str	r3, [r7, #20]
    1080:	e005      	b.n	108e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    1082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1086:	f2c4 0302 	movt	r3, #16386	; 0x4002
    108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    108c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    108e:	79fb      	ldrb	r3, [r7, #7]
    1090:	f003 031f 	and.w	r3, r3, #31
    1094:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    1096:	68fb      	ldr	r3, [r7, #12]
    1098:	697a      	ldr	r2, [r7, #20]
    109a:	fa22 f303 	lsr.w	r3, r2, r3
    109e:	f003 0301 	and.w	r3, r3, #1
    10a2:	b2db      	uxtb	r3, r3
    10a4:	2b00      	cmp	r3, #0
    10a6:	d003      	beq.n	10b0 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
    10a8:	f04f 0301 	mov.w	r3, #1
    10ac:	74fb      	strb	r3, [r7, #19]
    10ae:	e002      	b.n	10b6 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
    10b0:	f04f 0300 	mov.w	r3, #0
    10b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    10b6:	7cfb      	ldrb	r3, [r7, #19]
}
    10b8:	4618      	mov	r0, r3
    10ba:	f107 071c 	add.w	r7, r7, #28
    10be:	46bd      	mov	sp, r7
    10c0:	bc80      	pop	{r7}
    10c2:	4770      	bx	lr

000010c4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    10c4:	b480      	push	{r7}
    10c6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    10c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    10da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    10de:	625a      	str	r2, [r3, #36]	; 0x24
}
    10e0:	46bd      	mov	sp, r7
    10e2:	bc80      	pop	{r7}
    10e4:	4770      	bx	lr
    10e6:	bf00      	nop

000010e8 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    10e8:	b480      	push	{r7}
    10ea:	b085      	sub	sp, #20
    10ec:	af00      	add	r7, sp, #0
    10ee:	4603      	mov	r3, r0
    10f0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    10f2:	f04f 0300 	mov.w	r3, #0
    10f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    10f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1100:	689a      	ldr	r2, [r3, #8]
    1102:	79fb      	ldrb	r3, [r7, #7]
    1104:	4013      	ands	r3, r2
    1106:	2b00      	cmp	r3, #0
    1108:	d003      	beq.n	1112 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
    110a:	f04f 0301 	mov.w	r3, #1
    110e:	73fb      	strb	r3, [r7, #15]
    1110:	e002      	b.n	1118 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    1112:	f04f 0300 	mov.w	r3, #0
    1116:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1118:	7bfb      	ldrb	r3, [r7, #15]
}
    111a:	4618      	mov	r0, r3
    111c:	f107 0714 	add.w	r7, r7, #20
    1120:	46bd      	mov	sp, r7
    1122:	bc80      	pop	{r7}
    1124:	4770      	bx	lr
    1126:	bf00      	nop

00001128 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1128:	b480      	push	{r7}
    112a:	b083      	sub	sp, #12
    112c:	af00      	add	r7, sp, #0
    112e:	4603      	mov	r3, r0
    1130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    1132:	f241 030a 	movw	r3, #4106	; 0x100a
    1136:	f2c4 0302 	movt	r3, #16386	; 0x4002
    113a:	79fa      	ldrb	r2, [r7, #7]
    113c:	701a      	strb	r2, [r3, #0]
}
    113e:	f107 070c 	add.w	r7, r7, #12
    1142:	46bd      	mov	sp, r7
    1144:	bc80      	pop	{r7}
    1146:	4770      	bx	lr

00001148 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1148:	b580      	push	{r7, lr}
    114a:	b082      	sub	sp, #8
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1156:	f2c4 0301 	movt	r3, #16385	; 0x4001
    115a:	429a      	cmp	r2, r3
    115c:	d10c      	bne.n	1178 <GPIO_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    115e:	f04f 0004 	mov.w	r0, #4
    1162:	f04f 0101 	mov.w	r1, #1
    1166:	f7ff fee1 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    116a:	f04f 0004 	mov.w	r0, #4
    116e:	f04f 0100 	mov.w	r1, #0
    1172:	f7ff fedb 	bl	f2c <RCC_APB2PeriphResetCmd>
    1176:	e076      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOB)
    1178:	687a      	ldr	r2, [r7, #4]
    117a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    117e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1182:	429a      	cmp	r2, r3
    1184:	d10c      	bne.n	11a0 <GPIO_DeInit+0x58>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1186:	f04f 0008 	mov.w	r0, #8
    118a:	f04f 0101 	mov.w	r1, #1
    118e:	f7ff fecd 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    1192:	f04f 0008 	mov.w	r0, #8
    1196:	f04f 0100 	mov.w	r1, #0
    119a:	f7ff fec7 	bl	f2c <RCC_APB2PeriphResetCmd>
    119e:	e062      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOC)
    11a0:	687a      	ldr	r2, [r7, #4]
    11a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11aa:	429a      	cmp	r2, r3
    11ac:	d10c      	bne.n	11c8 <GPIO_DeInit+0x80>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    11ae:	f04f 0010 	mov.w	r0, #16
    11b2:	f04f 0101 	mov.w	r1, #1
    11b6:	f7ff feb9 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    11ba:	f04f 0010 	mov.w	r0, #16
    11be:	f04f 0100 	mov.w	r1, #0
    11c2:	f7ff feb3 	bl	f2c <RCC_APB2PeriphResetCmd>
    11c6:	e04e      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOD)
    11c8:	687a      	ldr	r2, [r7, #4]
    11ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    11ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11d2:	429a      	cmp	r2, r3
    11d4:	d10c      	bne.n	11f0 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    11d6:	f04f 0020 	mov.w	r0, #32
    11da:	f04f 0101 	mov.w	r1, #1
    11de:	f7ff fea5 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    11e2:	f04f 0020 	mov.w	r0, #32
    11e6:	f04f 0100 	mov.w	r1, #0
    11ea:	f7ff fe9f 	bl	f2c <RCC_APB2PeriphResetCmd>
    11ee:	e03a      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOE)
    11f0:	687a      	ldr	r2, [r7, #4]
    11f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    11f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11fa:	429a      	cmp	r2, r3
    11fc:	d10c      	bne.n	1218 <GPIO_DeInit+0xd0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    11fe:	f04f 0040 	mov.w	r0, #64	; 0x40
    1202:	f04f 0101 	mov.w	r1, #1
    1206:	f7ff fe91 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    120a:	f04f 0040 	mov.w	r0, #64	; 0x40
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f7ff fe8b 	bl	f2c <RCC_APB2PeriphResetCmd>
    1216:	e026      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOF)
    1218:	687a      	ldr	r2, [r7, #4]
    121a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    121e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1222:	429a      	cmp	r2, r3
    1224:	d10c      	bne.n	1240 <GPIO_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1226:	f04f 0080 	mov.w	r0, #128	; 0x80
    122a:	f04f 0101 	mov.w	r1, #1
    122e:	f7ff fe7d 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    1232:	f04f 0080 	mov.w	r0, #128	; 0x80
    1236:	f04f 0100 	mov.w	r1, #0
    123a:	f7ff fe77 	bl	f2c <RCC_APB2PeriphResetCmd>
    123e:	e012      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else
  {
    if (GPIOx == GPIOG)
    1240:	687a      	ldr	r2, [r7, #4]
    1242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1246:	f2c4 0301 	movt	r3, #16385	; 0x4001
    124a:	429a      	cmp	r2, r3
    124c:	d10b      	bne.n	1266 <GPIO_DeInit+0x11e>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    124e:	f44f 7080 	mov.w	r0, #256	; 0x100
    1252:	f04f 0101 	mov.w	r1, #1
    1256:	f7ff fe69 	bl	f2c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    125a:	f44f 7080 	mov.w	r0, #256	; 0x100
    125e:	f04f 0100 	mov.w	r1, #0
    1262:	f7ff fe63 	bl	f2c <RCC_APB2PeriphResetCmd>
    }
  }
}
    1266:	f107 0708 	add.w	r7, r7, #8
    126a:	46bd      	mov	sp, r7
    126c:	bd80      	pop	{r7, pc}
    126e:	bf00      	nop

00001270 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1270:	b580      	push	{r7, lr}
    1272:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1274:	f04f 0001 	mov.w	r0, #1
    1278:	f04f 0101 	mov.w	r1, #1
    127c:	f7ff fe56 	bl	f2c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    1280:	f04f 0001 	mov.w	r0, #1
    1284:	f04f 0100 	mov.w	r1, #0
    1288:	f7ff fe50 	bl	f2c <RCC_APB2PeriphResetCmd>
}
    128c:	bd80      	pop	{r7, pc}
    128e:	bf00      	nop

00001290 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1290:	b480      	push	{r7}
    1292:	b089      	sub	sp, #36	; 0x24
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
    1298:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    129a:	f04f 0300 	mov.w	r3, #0
    129e:	61fb      	str	r3, [r7, #28]
    12a0:	f04f 0300 	mov.w	r3, #0
    12a4:	613b      	str	r3, [r7, #16]
    12a6:	f04f 0300 	mov.w	r3, #0
    12aa:	61bb      	str	r3, [r7, #24]
    12ac:	f04f 0300 	mov.w	r3, #0
    12b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    12b2:	f04f 0300 	mov.w	r3, #0
    12b6:	617b      	str	r3, [r7, #20]
    12b8:	f04f 0300 	mov.w	r3, #0
    12bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    12be:	683b      	ldr	r3, [r7, #0]
    12c0:	78db      	ldrb	r3, [r3, #3]
    12c2:	f003 030f 	and.w	r3, r3, #15
    12c6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    12c8:	683b      	ldr	r3, [r7, #0]
    12ca:	78db      	ldrb	r3, [r3, #3]
    12cc:	f003 0310 	and.w	r3, r3, #16
    12d0:	2b00      	cmp	r3, #0
    12d2:	d004      	beq.n	12de <GPIO_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    12d4:	683b      	ldr	r3, [r7, #0]
    12d6:	789b      	ldrb	r3, [r3, #2]
    12d8:	69fa      	ldr	r2, [r7, #28]
    12da:	4313      	orrs	r3, r2
    12dc:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    12de:	683b      	ldr	r3, [r7, #0]
    12e0:	881b      	ldrh	r3, [r3, #0]
    12e2:	b2db      	uxtb	r3, r3
    12e4:	2b00      	cmp	r3, #0
    12e6:	d04e      	beq.n	1386 <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	681b      	ldr	r3, [r3, #0]
    12ec:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12ee:	f04f 0300 	mov.w	r3, #0
    12f2:	61bb      	str	r3, [r7, #24]
    12f4:	e041      	b.n	137a <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
    12f6:	69bb      	ldr	r3, [r7, #24]
    12f8:	f04f 0201 	mov.w	r2, #1
    12fc:	fa02 f303 	lsl.w	r3, r2, r3
    1300:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1302:	683b      	ldr	r3, [r7, #0]
    1304:	881b      	ldrh	r3, [r3, #0]
    1306:	461a      	mov	r2, r3
    1308:	68fb      	ldr	r3, [r7, #12]
    130a:	4013      	ands	r3, r2
    130c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    130e:	693a      	ldr	r2, [r7, #16]
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	429a      	cmp	r2, r3
    1314:	d12d      	bne.n	1372 <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
    1316:	69bb      	ldr	r3, [r7, #24]
    1318:	ea4f 0383 	mov.w	r3, r3, lsl #2
    131c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	f04f 020f 	mov.w	r2, #15
    1324:	fa02 f303 	lsl.w	r3, r2, r3
    1328:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    132a:	68bb      	ldr	r3, [r7, #8]
    132c:	ea6f 0303 	mvn.w	r3, r3
    1330:	697a      	ldr	r2, [r7, #20]
    1332:	4013      	ands	r3, r2
    1334:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	69fa      	ldr	r2, [r7, #28]
    133a:	fa02 f303 	lsl.w	r3, r2, r3
    133e:	697a      	ldr	r2, [r7, #20]
    1340:	4313      	orrs	r3, r2
    1342:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1344:	683b      	ldr	r3, [r7, #0]
    1346:	78db      	ldrb	r3, [r3, #3]
    1348:	2b28      	cmp	r3, #40	; 0x28
    134a:	d107      	bne.n	135c <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    134c:	69bb      	ldr	r3, [r7, #24]
    134e:	f04f 0201 	mov.w	r2, #1
    1352:	fa02 f203 	lsl.w	r2, r2, r3
    1356:	687b      	ldr	r3, [r7, #4]
    1358:	615a      	str	r2, [r3, #20]
    135a:	e00a      	b.n	1372 <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    135c:	683b      	ldr	r3, [r7, #0]
    135e:	78db      	ldrb	r3, [r3, #3]
    1360:	2b48      	cmp	r3, #72	; 0x48
    1362:	d106      	bne.n	1372 <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1364:	69bb      	ldr	r3, [r7, #24]
    1366:	f04f 0201 	mov.w	r2, #1
    136a:	fa02 f203 	lsl.w	r2, r2, r3
    136e:	687b      	ldr	r3, [r7, #4]
    1370:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1372:	69bb      	ldr	r3, [r7, #24]
    1374:	f103 0301 	add.w	r3, r3, #1
    1378:	61bb      	str	r3, [r7, #24]
    137a:	69bb      	ldr	r3, [r7, #24]
    137c:	2b07      	cmp	r3, #7
    137e:	d9ba      	bls.n	12f6 <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	697a      	ldr	r2, [r7, #20]
    1384:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    1386:	683b      	ldr	r3, [r7, #0]
    1388:	881b      	ldrh	r3, [r3, #0]
    138a:	2bff      	cmp	r3, #255	; 0xff
    138c:	d953      	bls.n	1436 <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	685b      	ldr	r3, [r3, #4]
    1392:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1394:	f04f 0300 	mov.w	r3, #0
    1398:	61bb      	str	r3, [r7, #24]
    139a:	e046      	b.n	142a <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    139c:	69bb      	ldr	r3, [r7, #24]
    139e:	f103 0308 	add.w	r3, r3, #8
    13a2:	f04f 0201 	mov.w	r2, #1
    13a6:	fa02 f303 	lsl.w	r3, r2, r3
    13aa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    13ac:	683b      	ldr	r3, [r7, #0]
    13ae:	881b      	ldrh	r3, [r3, #0]
    13b0:	461a      	mov	r2, r3
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	4013      	ands	r3, r2
    13b6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    13b8:	693a      	ldr	r2, [r7, #16]
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	429a      	cmp	r2, r3
    13be:	d130      	bne.n	1422 <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
    13c0:	69bb      	ldr	r3, [r7, #24]
    13c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    13c6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	f04f 020f 	mov.w	r2, #15
    13ce:	fa02 f303 	lsl.w	r3, r2, r3
    13d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    13d4:	68bb      	ldr	r3, [r7, #8]
    13d6:	ea6f 0303 	mvn.w	r3, r3
    13da:	697a      	ldr	r2, [r7, #20]
    13dc:	4013      	ands	r3, r2
    13de:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    13e0:	68fb      	ldr	r3, [r7, #12]
    13e2:	69fa      	ldr	r2, [r7, #28]
    13e4:	fa02 f303 	lsl.w	r3, r2, r3
    13e8:	697a      	ldr	r2, [r7, #20]
    13ea:	4313      	orrs	r3, r2
    13ec:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    13ee:	683b      	ldr	r3, [r7, #0]
    13f0:	78db      	ldrb	r3, [r3, #3]
    13f2:	2b28      	cmp	r3, #40	; 0x28
    13f4:	d108      	bne.n	1408 <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    13f6:	69bb      	ldr	r3, [r7, #24]
    13f8:	f103 0308 	add.w	r3, r3, #8
    13fc:	f04f 0201 	mov.w	r2, #1
    1400:	fa02 f203 	lsl.w	r2, r2, r3
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1408:	683b      	ldr	r3, [r7, #0]
    140a:	78db      	ldrb	r3, [r3, #3]
    140c:	2b48      	cmp	r3, #72	; 0x48
    140e:	d108      	bne.n	1422 <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1410:	69bb      	ldr	r3, [r7, #24]
    1412:	f103 0308 	add.w	r3, r3, #8
    1416:	f04f 0201 	mov.w	r2, #1
    141a:	fa02 f203 	lsl.w	r2, r2, r3
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1422:	69bb      	ldr	r3, [r7, #24]
    1424:	f103 0301 	add.w	r3, r3, #1
    1428:	61bb      	str	r3, [r7, #24]
    142a:	69bb      	ldr	r3, [r7, #24]
    142c:	2b07      	cmp	r3, #7
    142e:	d9b5      	bls.n	139c <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	697a      	ldr	r2, [r7, #20]
    1434:	605a      	str	r2, [r3, #4]
  }
}
    1436:	f107 0724 	add.w	r7, r7, #36	; 0x24
    143a:	46bd      	mov	sp, r7
    143c:	bc80      	pop	{r7}
    143e:	4770      	bx	lr

00001440 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1440:	b480      	push	{r7}
    1442:	b083      	sub	sp, #12
    1444:	af00      	add	r7, sp, #0
    1446:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    144e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	f04f 0202 	mov.w	r2, #2
    1456:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	f04f 0204 	mov.w	r2, #4
    145e:	70da      	strb	r2, [r3, #3]
}
    1460:	f107 070c 	add.w	r7, r7, #12
    1464:	46bd      	mov	sp, r7
    1466:	bc80      	pop	{r7}
    1468:	4770      	bx	lr
    146a:	bf00      	nop

0000146c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    146c:	b480      	push	{r7}
    146e:	b085      	sub	sp, #20
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
    1474:	460b      	mov	r3, r1
    1476:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1478:	f04f 0300 	mov.w	r3, #0
    147c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	689a      	ldr	r2, [r3, #8]
    1482:	887b      	ldrh	r3, [r7, #2]
    1484:	4013      	ands	r3, r2
    1486:	2b00      	cmp	r3, #0
    1488:	d003      	beq.n	1492 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    148a:	f04f 0301 	mov.w	r3, #1
    148e:	73fb      	strb	r3, [r7, #15]
    1490:	e002      	b.n	1498 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1492:	f04f 0300 	mov.w	r3, #0
    1496:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1498:	7bfb      	ldrb	r3, [r7, #15]
}
    149a:	4618      	mov	r0, r3
    149c:	f107 0714 	add.w	r7, r7, #20
    14a0:	46bd      	mov	sp, r7
    14a2:	bc80      	pop	{r7}
    14a4:	4770      	bx	lr
    14a6:	bf00      	nop

000014a8 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    14a8:	b480      	push	{r7}
    14aa:	b083      	sub	sp, #12
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	689b      	ldr	r3, [r3, #8]
    14b4:	b29b      	uxth	r3, r3
}
    14b6:	4618      	mov	r0, r3
    14b8:	f107 070c 	add.w	r7, r7, #12
    14bc:	46bd      	mov	sp, r7
    14be:	bc80      	pop	{r7}
    14c0:	4770      	bx	lr
    14c2:	bf00      	nop

000014c4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    14c4:	b480      	push	{r7}
    14c6:	b085      	sub	sp, #20
    14c8:	af00      	add	r7, sp, #0
    14ca:	6078      	str	r0, [r7, #4]
    14cc:	460b      	mov	r3, r1
    14ce:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    14d0:	f04f 0300 	mov.w	r3, #0
    14d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    14d6:	687b      	ldr	r3, [r7, #4]
    14d8:	68da      	ldr	r2, [r3, #12]
    14da:	887b      	ldrh	r3, [r7, #2]
    14dc:	4013      	ands	r3, r2
    14de:	2b00      	cmp	r3, #0
    14e0:	d003      	beq.n	14ea <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    14e2:	f04f 0301 	mov.w	r3, #1
    14e6:	73fb      	strb	r3, [r7, #15]
    14e8:	e002      	b.n	14f0 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    14ea:	f04f 0300 	mov.w	r3, #0
    14ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    14f0:	7bfb      	ldrb	r3, [r7, #15]
}
    14f2:	4618      	mov	r0, r3
    14f4:	f107 0714 	add.w	r7, r7, #20
    14f8:	46bd      	mov	sp, r7
    14fa:	bc80      	pop	{r7}
    14fc:	4770      	bx	lr
    14fe:	bf00      	nop

00001500 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1500:	b480      	push	{r7}
    1502:	b083      	sub	sp, #12
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	68db      	ldr	r3, [r3, #12]
    150c:	b29b      	uxth	r3, r3
}
    150e:	4618      	mov	r0, r3
    1510:	f107 070c 	add.w	r7, r7, #12
    1514:	46bd      	mov	sp, r7
    1516:	bc80      	pop	{r7}
    1518:	4770      	bx	lr
    151a:	bf00      	nop

0000151c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    151c:	b480      	push	{r7}
    151e:	b083      	sub	sp, #12
    1520:	af00      	add	r7, sp, #0
    1522:	6078      	str	r0, [r7, #4]
    1524:	460b      	mov	r3, r1
    1526:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    1528:	887a      	ldrh	r2, [r7, #2]
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	611a      	str	r2, [r3, #16]
}
    152e:	f107 070c 	add.w	r7, r7, #12
    1532:	46bd      	mov	sp, r7
    1534:	bc80      	pop	{r7}
    1536:	4770      	bx	lr

00001538 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1538:	b480      	push	{r7}
    153a:	b083      	sub	sp, #12
    153c:	af00      	add	r7, sp, #0
    153e:	6078      	str	r0, [r7, #4]
    1540:	460b      	mov	r3, r1
    1542:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    1544:	887a      	ldrh	r2, [r7, #2]
    1546:	687b      	ldr	r3, [r7, #4]
    1548:	615a      	str	r2, [r3, #20]
}
    154a:	f107 070c 	add.w	r7, r7, #12
    154e:	46bd      	mov	sp, r7
    1550:	bc80      	pop	{r7}
    1552:	4770      	bx	lr

00001554 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    1554:	b480      	push	{r7}
    1556:	b083      	sub	sp, #12
    1558:	af00      	add	r7, sp, #0
    155a:	6078      	str	r0, [r7, #4]
    155c:	4613      	mov	r3, r2
    155e:	460a      	mov	r2, r1
    1560:	807a      	strh	r2, [r7, #2]
    1562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    1564:	787b      	ldrb	r3, [r7, #1]
    1566:	2b00      	cmp	r3, #0
    1568:	d003      	beq.n	1572 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    156a:	887a      	ldrh	r2, [r7, #2]
    156c:	687b      	ldr	r3, [r7, #4]
    156e:	611a      	str	r2, [r3, #16]
    1570:	e002      	b.n	1578 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    1572:	887a      	ldrh	r2, [r7, #2]
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	615a      	str	r2, [r3, #20]
  }
}
    1578:	f107 070c 	add.w	r7, r7, #12
    157c:	46bd      	mov	sp, r7
    157e:	bc80      	pop	{r7}
    1580:	4770      	bx	lr
    1582:	bf00      	nop

00001584 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1584:	b480      	push	{r7}
    1586:	b083      	sub	sp, #12
    1588:	af00      	add	r7, sp, #0
    158a:	6078      	str	r0, [r7, #4]
    158c:	460b      	mov	r3, r1
    158e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    1590:	887a      	ldrh	r2, [r7, #2]
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	60da      	str	r2, [r3, #12]
}
    1596:	f107 070c 	add.w	r7, r7, #12
    159a:	46bd      	mov	sp, r7
    159c:	bc80      	pop	{r7}
    159e:	4770      	bx	lr

000015a0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    15a0:	b480      	push	{r7}
    15a2:	b085      	sub	sp, #20
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
    15a8:	460b      	mov	r3, r1
    15aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    15ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    15b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    15b2:	887b      	ldrh	r3, [r7, #2]
    15b4:	68fa      	ldr	r2, [r7, #12]
    15b6:	4313      	orrs	r3, r2
    15b8:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	68fa      	ldr	r2, [r7, #12]
    15be:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    15c0:	887a      	ldrh	r2, [r7, #2]
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	68fa      	ldr	r2, [r7, #12]
    15ca:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	699b      	ldr	r3, [r3, #24]
    15d0:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	699b      	ldr	r3, [r3, #24]
    15d6:	60fb      	str	r3, [r7, #12]
}
    15d8:	f107 0714 	add.w	r7, r7, #20
    15dc:	46bd      	mov	sp, r7
    15de:	bc80      	pop	{r7}
    15e0:	4770      	bx	lr
    15e2:	bf00      	nop

000015e4 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15e4:	b480      	push	{r7}
    15e6:	b085      	sub	sp, #20
    15e8:	af00      	add	r7, sp, #0
    15ea:	4602      	mov	r2, r0
    15ec:	460b      	mov	r3, r1
    15ee:	71fa      	strb	r2, [r7, #7]
    15f0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    15f2:	f04f 0300 	mov.w	r3, #0
    15f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    15f8:	f04f 0300 	mov.w	r3, #0
    15fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1600:	681b      	ldr	r3, [r3, #0]
    1602:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1604:	68fa      	ldr	r2, [r7, #12]
    1606:	f64f 7380 	movw	r3, #65408	; 0xff80
    160a:	4013      	ands	r3, r2
    160c:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    160e:	79fb      	ldrb	r3, [r7, #7]
    1610:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1614:	68fa      	ldr	r2, [r7, #12]
    1616:	4313      	orrs	r3, r2
    1618:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    161a:	79bb      	ldrb	r3, [r7, #6]
    161c:	68fa      	ldr	r2, [r7, #12]
    161e:	4313      	orrs	r3, r2
    1620:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1622:	f04f 0300 	mov.w	r3, #0
    1626:	f2c4 0301 	movt	r3, #16385	; 0x4001
    162a:	68fa      	ldr	r2, [r7, #12]
    162c:	601a      	str	r2, [r3, #0]
}
    162e:	f107 0714 	add.w	r7, r7, #20
    1632:	46bd      	mov	sp, r7
    1634:	bc80      	pop	{r7}
    1636:	4770      	bx	lr

00001638 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1638:	b480      	push	{r7}
    163a:	b083      	sub	sp, #12
    163c:	af00      	add	r7, sp, #0
    163e:	4603      	mov	r3, r0
    1640:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1642:	f04f 031c 	mov.w	r3, #28
    1646:	f2c4 2320 	movt	r3, #16928	; 0x4220
    164a:	79fa      	ldrb	r2, [r7, #7]
    164c:	601a      	str	r2, [r3, #0]
}
    164e:	f107 070c 	add.w	r7, r7, #12
    1652:	46bd      	mov	sp, r7
    1654:	bc80      	pop	{r7}
    1656:	4770      	bx	lr

00001658 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1658:	b480      	push	{r7}
    165a:	b087      	sub	sp, #28
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
    1660:	460b      	mov	r3, r1
    1662:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1664:	f04f 0300 	mov.w	r3, #0
    1668:	613b      	str	r3, [r7, #16]
    166a:	f04f 0300 	mov.w	r3, #0
    166e:	60fb      	str	r3, [r7, #12]
    1670:	f04f 0300 	mov.w	r3, #0
    1674:	617b      	str	r3, [r7, #20]
    1676:	f04f 0300 	mov.w	r3, #0
    167a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	2b00      	cmp	r3, #0
    1680:	da06      	bge.n	1690 <GPIO_PinRemapConfig+0x38>
  {
    tmpreg = AFIO->MAPR2;
    1682:	f04f 0300 	mov.w	r3, #0
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	69db      	ldr	r3, [r3, #28]
    168c:	617b      	str	r3, [r7, #20]
    168e:	e005      	b.n	169c <GPIO_PinRemapConfig+0x44>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    1690:	f04f 0300 	mov.w	r3, #0
    1694:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    16a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
    16a6:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	ea4f 4303 	mov.w	r3, r3, lsl #16
    16ae:	ea4f 4313 	mov.w	r3, r3, lsr #16
    16b2:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    16ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    16be:	d110      	bne.n	16e2 <GPIO_PinRemapConfig+0x8a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    16c0:	697b      	ldr	r3, [r7, #20]
    16c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    16c6:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    16c8:	f04f 0300 	mov.w	r3, #0
    16cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    16d0:	f04f 0200 	mov.w	r2, #0
    16d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    16d8:	6852      	ldr	r2, [r2, #4]
    16da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    16de:	605a      	str	r2, [r3, #4]
    16e0:	e026      	b.n	1730 <GPIO_PinRemapConfig+0xd8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    16e8:	2b00      	cmp	r3, #0
    16ea:	d010      	beq.n	170e <GPIO_PinRemapConfig+0xb6>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    16ec:	68bb      	ldr	r3, [r7, #8]
    16ee:	f04f 0203 	mov.w	r2, #3
    16f2:	fa02 f303 	lsl.w	r3, r2, r3
    16f6:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    16f8:	68fb      	ldr	r3, [r7, #12]
    16fa:	ea6f 0303 	mvn.w	r3, r3
    16fe:	697a      	ldr	r2, [r7, #20]
    1700:	4013      	ands	r3, r2
    1702:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1704:	697b      	ldr	r3, [r7, #20]
    1706:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    170a:	617b      	str	r3, [r7, #20]
    170c:	e010      	b.n	1730 <GPIO_PinRemapConfig+0xd8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1714:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1718:	693a      	ldr	r2, [r7, #16]
    171a:	fa02 f303 	lsl.w	r3, r2, r3
    171e:	ea6f 0303 	mvn.w	r3, r3
    1722:	697a      	ldr	r2, [r7, #20]
    1724:	4013      	ands	r3, r2
    1726:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1728:	697b      	ldr	r3, [r7, #20]
    172a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    172e:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1730:	78fb      	ldrb	r3, [r7, #3]
    1732:	2b00      	cmp	r3, #0
    1734:	d00a      	beq.n	174c <GPIO_PinRemapConfig+0xf4>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	ea4f 5353 	mov.w	r3, r3, lsr #21
    173c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1740:	693a      	ldr	r2, [r7, #16]
    1742:	fa02 f303 	lsl.w	r3, r2, r3
    1746:	697a      	ldr	r2, [r7, #20]
    1748:	4313      	orrs	r3, r2
    174a:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    174c:	687b      	ldr	r3, [r7, #4]
    174e:	2b00      	cmp	r3, #0
    1750:	da06      	bge.n	1760 <GPIO_PinRemapConfig+0x108>
  {
    AFIO->MAPR2 = tmpreg;
    1752:	f04f 0300 	mov.w	r3, #0
    1756:	f2c4 0301 	movt	r3, #16385	; 0x4001
    175a:	697a      	ldr	r2, [r7, #20]
    175c:	61da      	str	r2, [r3, #28]
    175e:	e005      	b.n	176c <GPIO_PinRemapConfig+0x114>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    1760:	f04f 0300 	mov.w	r3, #0
    1764:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1768:	697a      	ldr	r2, [r7, #20]
    176a:	605a      	str	r2, [r3, #4]
  }
}
    176c:	f107 071c 	add.w	r7, r7, #28
    1770:	46bd      	mov	sp, r7
    1772:	bc80      	pop	{r7}
    1774:	4770      	bx	lr
    1776:	bf00      	nop

00001778 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1778:	b490      	push	{r4, r7}
    177a:	b084      	sub	sp, #16
    177c:	af00      	add	r7, sp, #0
    177e:	4602      	mov	r2, r0
    1780:	460b      	mov	r3, r1
    1782:	71fa      	strb	r2, [r7, #7]
    1784:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1786:	f04f 0300 	mov.w	r3, #0
    178a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    178c:	79bb      	ldrb	r3, [r7, #6]
    178e:	f003 0303 	and.w	r3, r3, #3
    1792:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1796:	f04f 020f 	mov.w	r2, #15
    179a:	fa02 f303 	lsl.w	r3, r2, r3
    179e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    17a0:	f04f 0300 	mov.w	r3, #0
    17a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17a8:	79ba      	ldrb	r2, [r7, #6]
    17aa:	ea4f 0292 	mov.w	r2, r2, lsr #2
    17ae:	b2d2      	uxtb	r2, r2
    17b0:	4610      	mov	r0, r2
    17b2:	f04f 0200 	mov.w	r2, #0
    17b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    17ba:	79b9      	ldrb	r1, [r7, #6]
    17bc:	ea4f 0191 	mov.w	r1, r1, lsr #2
    17c0:	b2c9      	uxtb	r1, r1
    17c2:	f101 0102 	add.w	r1, r1, #2
    17c6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    17ca:	68fa      	ldr	r2, [r7, #12]
    17cc:	ea6f 0202 	mvn.w	r2, r2
    17d0:	4011      	ands	r1, r2
    17d2:	f100 0202 	add.w	r2, r0, #2
    17d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    17da:	f04f 0300 	mov.w	r3, #0
    17de:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17e2:	79ba      	ldrb	r2, [r7, #6]
    17e4:	ea4f 0292 	mov.w	r2, r2, lsr #2
    17e8:	b2d2      	uxtb	r2, r2
    17ea:	4610      	mov	r0, r2
    17ec:	f04f 0200 	mov.w	r2, #0
    17f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    17f4:	79b9      	ldrb	r1, [r7, #6]
    17f6:	ea4f 0191 	mov.w	r1, r1, lsr #2
    17fa:	b2c9      	uxtb	r1, r1
    17fc:	f101 0102 	add.w	r1, r1, #2
    1800:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1804:	79fc      	ldrb	r4, [r7, #7]
    1806:	79ba      	ldrb	r2, [r7, #6]
    1808:	f002 0203 	and.w	r2, r2, #3
    180c:	ea4f 0282 	mov.w	r2, r2, lsl #2
    1810:	fa04 f202 	lsl.w	r2, r4, r2
    1814:	4311      	orrs	r1, r2
    1816:	f100 0202 	add.w	r2, r0, #2
    181a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    181e:	f107 0710 	add.w	r7, r7, #16
    1822:	46bd      	mov	sp, r7
    1824:	bc90      	pop	{r4, r7}
    1826:	4770      	bx	lr

00001828 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    1828:	b480      	push	{r7}
    182a:	b083      	sub	sp, #12
    182c:	af00      	add	r7, sp, #0
    182e:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1830:	f04f 03dc 	mov.w	r3, #220	; 0xdc
    1834:	f2c4 2320 	movt	r3, #16928	; 0x4220
    1838:	687a      	ldr	r2, [r7, #4]
    183a:	601a      	str	r2, [r3, #0]
}
    183c:	f107 070c 	add.w	r7, r7, #12
    1840:	46bd      	mov	sp, r7
    1842:	bc80      	pop	{r7}
    1844:	4770      	bx	lr
    1846:	bf00      	nop

00001848 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1848:	b580      	push	{r7, lr}
    184a:	b082      	sub	sp, #8
    184c:	af00      	add	r7, sp, #0
    184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1850:	687a      	ldr	r2, [r7, #4]
    1852:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1856:	f2c4 0301 	movt	r3, #16385	; 0x4001
    185a:	429a      	cmp	r2, r3
    185c:	d10c      	bne.n	1878 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    185e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1862:	f04f 0101 	mov.w	r1, #1
    1866:	f7ff fb61 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    186a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    186e:	f04f 0100 	mov.w	r1, #0
    1872:	f7ff fb5b 	bl	f2c <RCC_APB2PeriphResetCmd>
    1876:	e04e      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
    1878:	687a      	ldr	r2, [r7, #4]
    187a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    187e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1882:	429a      	cmp	r2, r3
    1884:	d10c      	bne.n	18a0 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    1886:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    188a:	f04f 0101 	mov.w	r1, #1
    188e:	f7ff fb77 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    1892:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1896:	f04f 0100 	mov.w	r1, #0
    189a:	f7ff fb71 	bl	f80 <RCC_APB1PeriphResetCmd>
    189e:	e03a      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
    18a0:	687a      	ldr	r2, [r7, #4]
    18a2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    18a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18aa:	429a      	cmp	r2, r3
    18ac:	d10c      	bne.n	18c8 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    18ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    18b2:	f04f 0101 	mov.w	r1, #1
    18b6:	f7ff fb63 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    18ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    18be:	f04f 0100 	mov.w	r1, #0
    18c2:	f7ff fb5d 	bl	f80 <RCC_APB1PeriphResetCmd>
    18c6:	e026      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == UART4)
    18c8:	687a      	ldr	r2, [r7, #4]
    18ca:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    18ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18d2:	429a      	cmp	r2, r3
    18d4:	d10c      	bne.n	18f0 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    18d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    18da:	f04f 0101 	mov.w	r1, #1
    18de:	f7ff fb4f 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    18e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    18e6:	f04f 0100 	mov.w	r1, #0
    18ea:	f7ff fb49 	bl	f80 <RCC_APB1PeriphResetCmd>
    18ee:	e012      	b.n	1916 <USART_DeInit+0xce>
  }
  else
  {
    if (USARTx == UART5)
    18f0:	687a      	ldr	r2, [r7, #4]
    18f2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    18f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18fa:	429a      	cmp	r2, r3
    18fc:	d10b      	bne.n	1916 <USART_DeInit+0xce>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    18fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1902:	f04f 0101 	mov.w	r1, #1
    1906:	f7ff fb3b 	bl	f80 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    190a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    190e:	f04f 0100 	mov.w	r1, #0
    1912:	f7ff fb35 	bl	f80 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1916:	f107 0708 	add.w	r7, r7, #8
    191a:	46bd      	mov	sp, r7
    191c:	bd80      	pop	{r7, pc}
    191e:	bf00      	nop

00001920 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1920:	b580      	push	{r7, lr}
    1922:	b08c      	sub	sp, #48	; 0x30
    1924:	af00      	add	r7, sp, #0
    1926:	6078      	str	r0, [r7, #4]
    1928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    192a:	f04f 0300 	mov.w	r3, #0
    192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1930:	f04f 0300 	mov.w	r3, #0
    1934:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    1936:	f04f 0300 	mov.w	r3, #0
    193a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    193c:	f04f 0300 	mov.w	r3, #0
    1940:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1942:	f04f 0300 	mov.w	r3, #0
    1946:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	8a1b      	ldrh	r3, [r3, #16]
    1950:	b29b      	uxth	r3, r3
    1952:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1956:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    195a:	4013      	ands	r3, r2
    195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    195e:	683b      	ldr	r3, [r7, #0]
    1960:	88db      	ldrh	r3, [r3, #6]
    1962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1964:	4313      	orrs	r3, r2
    1966:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    196a:	b29a      	uxth	r2, r3
    196c:	687b      	ldr	r3, [r7, #4]
    196e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	899b      	ldrh	r3, [r3, #12]
    1974:	b29b      	uxth	r3, r3
    1976:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    197a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    197e:	4013      	ands	r3, r2
    1980:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1982:	683b      	ldr	r3, [r7, #0]
    1984:	889a      	ldrh	r2, [r3, #4]
    1986:	683b      	ldr	r3, [r7, #0]
    1988:	891b      	ldrh	r3, [r3, #8]
    198a:	4313      	orrs	r3, r2
    198c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    198e:	683b      	ldr	r3, [r7, #0]
    1990:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1992:	4313      	orrs	r3, r2
    1994:	b29b      	uxth	r3, r3
    1996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1998:	4313      	orrs	r3, r2
    199a:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    199e:	b29a      	uxth	r2, r3
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	8a9b      	ldrh	r3, [r3, #20]
    19a8:	b29b      	uxth	r3, r3
    19aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    19ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19ae:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    19b2:	4013      	ands	r3, r2
    19b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    19b6:	683b      	ldr	r3, [r7, #0]
    19b8:	899b      	ldrh	r3, [r3, #12]
    19ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19bc:	4313      	orrs	r3, r2
    19be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    19c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19c2:	b29a      	uxth	r2, r3
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    19c8:	f107 0308 	add.w	r3, r7, #8
    19cc:	4618      	mov	r0, r3
    19ce:	f7ff f945 	bl	c5c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    19d2:	69fa      	ldr	r2, [r7, #28]
    19d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    19d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    19dc:	429a      	cmp	r2, r3
    19de:	d102      	bne.n	19e6 <USART_Init+0xc6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    19e0:	697b      	ldr	r3, [r7, #20]
    19e2:	62bb      	str	r3, [r7, #40]	; 0x28
    19e4:	e001      	b.n	19ea <USART_Init+0xca>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    19e6:	693b      	ldr	r3, [r7, #16]
    19e8:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    19ea:	687b      	ldr	r3, [r7, #4]
    19ec:	899b      	ldrh	r3, [r3, #12]
    19ee:	b29b      	uxth	r3, r3
    19f0:	b29b      	uxth	r3, r3
    19f2:	b21b      	sxth	r3, r3
    19f4:	2b00      	cmp	r3, #0
    19f6:	da0f      	bge.n	1a18 <USART_Init+0xf8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    19f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    19fa:	4613      	mov	r3, r2
    19fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a00:	189b      	adds	r3, r3, r2
    1a02:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1a06:	189a      	adds	r2, r3, r2
    1a08:	683b      	ldr	r3, [r7, #0]
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1a10:	fbb2 f3f3 	udiv	r3, r2, r3
    1a14:	627b      	str	r3, [r7, #36]	; 0x24
    1a16:	e00e      	b.n	1a36 <USART_Init+0x116>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a1a:	4613      	mov	r3, r2
    1a1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a20:	189b      	adds	r3, r3, r2
    1a22:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1a26:	189a      	adds	r2, r3, r2
    1a28:	683b      	ldr	r3, [r7, #0]
    1a2a:	681b      	ldr	r3, [r3, #0]
    1a2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a30:	fbb2 f3f3 	udiv	r3, r2, r3
    1a34:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a38:	f248 531f 	movw	r3, #34079	; 0x851f
    1a3c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1a40:	fba3 1302 	umull	r1, r3, r3, r2
    1a44:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1a48:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    1a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a50:	ea4f 1313 	mov.w	r3, r3, lsr #4
    1a54:	f04f 0264 	mov.w	r2, #100	; 0x64
    1a58:	fb02 f303 	mul.w	r3, r2, r3
    1a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a5e:	1ad3      	subs	r3, r2, r3
    1a60:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	899b      	ldrh	r3, [r3, #12]
    1a66:	b29b      	uxth	r3, r3
    1a68:	b29b      	uxth	r3, r3
    1a6a:	b21b      	sxth	r3, r3
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	da12      	bge.n	1a96 <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    1a70:	6a3b      	ldr	r3, [r7, #32]
    1a72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1a76:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1a7a:	f248 531f 	movw	r3, #34079	; 0x851f
    1a7e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1a82:	fba3 1302 	umull	r1, r3, r3, r2
    1a86:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1a8a:	f003 0307 	and.w	r3, r3, #7
    1a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1a90:	4313      	orrs	r3, r2
    1a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a94:	e011      	b.n	1aba <USART_Init+0x19a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    1a96:	6a3b      	ldr	r3, [r7, #32]
    1a98:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1a9c:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1aa0:	f248 531f 	movw	r3, #34079	; 0x851f
    1aa4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1aa8:	fba3 1302 	umull	r1, r3, r3, r2
    1aac:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1ab0:	f003 030f 	and.w	r3, r3, #15
    1ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ab6:	4313      	orrs	r3, r2
    1ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    1aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1abc:	b29a      	uxth	r2, r3
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	811a      	strh	r2, [r3, #8]
}
    1ac2:	f107 0730 	add.w	r7, r7, #48	; 0x30
    1ac6:	46bd      	mov	sp, r7
    1ac8:	bd80      	pop	{r7, pc}
    1aca:	bf00      	nop

00001acc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    1acc:	b480      	push	{r7}
    1ace:	b083      	sub	sp, #12
    1ad0:	af00      	add	r7, sp, #0
    1ad2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    1ada:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	f04f 0200 	mov.w	r2, #0
    1ae2:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	f04f 0200 	mov.w	r2, #0
    1aea:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	f04f 0200 	mov.w	r2, #0
    1af2:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	f04f 020c 	mov.w	r2, #12
    1afa:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	f04f 0200 	mov.w	r2, #0
    1b02:	819a      	strh	r2, [r3, #12]
}
    1b04:	f107 070c 	add.w	r7, r7, #12
    1b08:	46bd      	mov	sp, r7
    1b0a:	bc80      	pop	{r7}
    1b0c:	4770      	bx	lr
    1b0e:	bf00      	nop

00001b10 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1b10:	b480      	push	{r7}
    1b12:	b085      	sub	sp, #20
    1b14:	af00      	add	r7, sp, #0
    1b16:	6078      	str	r0, [r7, #4]
    1b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    1b1a:	f04f 0300 	mov.w	r3, #0
    1b1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	8a1b      	ldrh	r3, [r3, #16]
    1b24:	b29b      	uxth	r3, r3
    1b26:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    1b28:	68fa      	ldr	r2, [r7, #12]
    1b2a:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1b2e:	4013      	ands	r3, r2
    1b30:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1b32:	683b      	ldr	r3, [r7, #0]
    1b34:	881a      	ldrh	r2, [r3, #0]
    1b36:	683b      	ldr	r3, [r7, #0]
    1b38:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    1b3a:	4313      	orrs	r3, r2
    1b3c:	b29a      	uxth	r2, r3
    1b3e:	683b      	ldr	r3, [r7, #0]
    1b40:	889b      	ldrh	r3, [r3, #4]
    1b42:	4313      	orrs	r3, r2
    1b44:	b29a      	uxth	r2, r3
    1b46:	683b      	ldr	r3, [r7, #0]
    1b48:	88db      	ldrh	r3, [r3, #6]
    1b4a:	4313      	orrs	r3, r2
    1b4c:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1b4e:	68fa      	ldr	r2, [r7, #12]
    1b50:	4313      	orrs	r3, r2
    1b52:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1b54:	68fb      	ldr	r3, [r7, #12]
    1b56:	b29a      	uxth	r2, r3
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	821a      	strh	r2, [r3, #16]
}
    1b5c:	f107 0714 	add.w	r7, r7, #20
    1b60:	46bd      	mov	sp, r7
    1b62:	bc80      	pop	{r7}
    1b64:	4770      	bx	lr
    1b66:	bf00      	nop

00001b68 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1b68:	b480      	push	{r7}
    1b6a:	b083      	sub	sp, #12
    1b6c:	af00      	add	r7, sp, #0
    1b6e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1b70:	687b      	ldr	r3, [r7, #4]
    1b72:	f04f 0200 	mov.w	r2, #0
    1b76:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	f04f 0200 	mov.w	r2, #0
    1b7e:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	f04f 0200 	mov.w	r2, #0
    1b86:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	f04f 0200 	mov.w	r2, #0
    1b8e:	80da      	strh	r2, [r3, #6]
}
    1b90:	f107 070c 	add.w	r7, r7, #12
    1b94:	46bd      	mov	sp, r7
    1b96:	bc80      	pop	{r7}
    1b98:	4770      	bx	lr
    1b9a:	bf00      	nop

00001b9c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b9c:	b480      	push	{r7}
    1b9e:	b083      	sub	sp, #12
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	6078      	str	r0, [r7, #4]
    1ba4:	460b      	mov	r3, r1
    1ba6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1ba8:	78fb      	ldrb	r3, [r7, #3]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d008      	beq.n	1bc0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	899b      	ldrh	r3, [r3, #12]
    1bb2:	b29b      	uxth	r3, r3
    1bb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1bb8:	b29a      	uxth	r2, r3
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	819a      	strh	r2, [r3, #12]
    1bbe:	e007      	b.n	1bd0 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	899b      	ldrh	r3, [r3, #12]
    1bc4:	b29b      	uxth	r3, r3
    1bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1bca:	b29a      	uxth	r2, r3
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	819a      	strh	r2, [r3, #12]
  }
}
    1bd0:	f107 070c 	add.w	r7, r7, #12
    1bd4:	46bd      	mov	sp, r7
    1bd6:	bc80      	pop	{r7}
    1bd8:	4770      	bx	lr
    1bda:	bf00      	nop

00001bdc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    1bdc:	b480      	push	{r7}
    1bde:	b087      	sub	sp, #28
    1be0:	af00      	add	r7, sp, #0
    1be2:	6078      	str	r0, [r7, #4]
    1be4:	4613      	mov	r3, r2
    1be6:	460a      	mov	r2, r1
    1be8:	807a      	strh	r2, [r7, #2]
    1bea:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    1bec:	f04f 0300 	mov.w	r3, #0
    1bf0:	613b      	str	r3, [r7, #16]
    1bf2:	f04f 0300 	mov.w	r3, #0
    1bf6:	60fb      	str	r3, [r7, #12]
    1bf8:	f04f 0300 	mov.w	r3, #0
    1bfc:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    1bfe:	f04f 0300 	mov.w	r3, #0
    1c02:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1c08:	887b      	ldrh	r3, [r7, #2]
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1c10:	b2db      	uxtb	r3, r3
    1c12:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    1c14:	887b      	ldrh	r3, [r7, #2]
    1c16:	f003 031f 	and.w	r3, r3, #31
    1c1a:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	f04f 0201 	mov.w	r2, #1
    1c22:	fa02 f303 	lsl.w	r3, r2, r3
    1c26:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    1c28:	693b      	ldr	r3, [r7, #16]
    1c2a:	2b01      	cmp	r3, #1
    1c2c:	d104      	bne.n	1c38 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    1c2e:	697b      	ldr	r3, [r7, #20]
    1c30:	f103 030c 	add.w	r3, r3, #12
    1c34:	617b      	str	r3, [r7, #20]
    1c36:	e00b      	b.n	1c50 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1c38:	693b      	ldr	r3, [r7, #16]
    1c3a:	2b02      	cmp	r3, #2
    1c3c:	d104      	bne.n	1c48 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    1c3e:	697b      	ldr	r3, [r7, #20]
    1c40:	f103 0310 	add.w	r3, r3, #16
    1c44:	617b      	str	r3, [r7, #20]
    1c46:	e003      	b.n	1c50 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1c48:	697b      	ldr	r3, [r7, #20]
    1c4a:	f103 0314 	add.w	r3, r3, #20
    1c4e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1c50:	787b      	ldrb	r3, [r7, #1]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d006      	beq.n	1c64 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1c56:	697b      	ldr	r3, [r7, #20]
    1c58:	697a      	ldr	r2, [r7, #20]
    1c5a:	6811      	ldr	r1, [r2, #0]
    1c5c:	68ba      	ldr	r2, [r7, #8]
    1c5e:	430a      	orrs	r2, r1
    1c60:	601a      	str	r2, [r3, #0]
    1c62:	e007      	b.n	1c74 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1c64:	697b      	ldr	r3, [r7, #20]
    1c66:	697a      	ldr	r2, [r7, #20]
    1c68:	6811      	ldr	r1, [r2, #0]
    1c6a:	68ba      	ldr	r2, [r7, #8]
    1c6c:	ea6f 0202 	mvn.w	r2, r2
    1c70:	400a      	ands	r2, r1
    1c72:	601a      	str	r2, [r3, #0]
  }
}
    1c74:	f107 071c 	add.w	r7, r7, #28
    1c78:	46bd      	mov	sp, r7
    1c7a:	bc80      	pop	{r7}
    1c7c:	4770      	bx	lr
    1c7e:	bf00      	nop

00001c80 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1c80:	b480      	push	{r7}
    1c82:	b083      	sub	sp, #12
    1c84:	af00      	add	r7, sp, #0
    1c86:	6078      	str	r0, [r7, #4]
    1c88:	4613      	mov	r3, r2
    1c8a:	460a      	mov	r2, r1
    1c8c:	807a      	strh	r2, [r7, #2]
    1c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c90:	787b      	ldrb	r3, [r7, #1]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d008      	beq.n	1ca8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1c96:	687b      	ldr	r3, [r7, #4]
    1c98:	8a9b      	ldrh	r3, [r3, #20]
    1c9a:	b29a      	uxth	r2, r3
    1c9c:	887b      	ldrh	r3, [r7, #2]
    1c9e:	4313      	orrs	r3, r2
    1ca0:	b29a      	uxth	r2, r3
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	829a      	strh	r2, [r3, #20]
    1ca6:	e00a      	b.n	1cbe <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	8a9b      	ldrh	r3, [r3, #20]
    1cac:	b29a      	uxth	r2, r3
    1cae:	887b      	ldrh	r3, [r7, #2]
    1cb0:	ea6f 0303 	mvn.w	r3, r3
    1cb4:	b29b      	uxth	r3, r3
    1cb6:	4013      	ands	r3, r2
    1cb8:	b29a      	uxth	r2, r3
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	829a      	strh	r2, [r3, #20]
  }
}
    1cbe:	f107 070c 	add.w	r7, r7, #12
    1cc2:	46bd      	mov	sp, r7
    1cc4:	bc80      	pop	{r7}
    1cc6:	4770      	bx	lr

00001cc8 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1cc8:	b480      	push	{r7}
    1cca:	b083      	sub	sp, #12
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
    1cd0:	460b      	mov	r3, r1
    1cd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	8a1b      	ldrh	r3, [r3, #16]
    1cd8:	b29b      	uxth	r3, r3
    1cda:	f023 030f 	bic.w	r3, r3, #15
    1cde:	b29a      	uxth	r2, r3
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1ce4:	687b      	ldr	r3, [r7, #4]
    1ce6:	8a1b      	ldrh	r3, [r3, #16]
    1ce8:	b29a      	uxth	r2, r3
    1cea:	78fb      	ldrb	r3, [r7, #3]
    1cec:	b29b      	uxth	r3, r3
    1cee:	4313      	orrs	r3, r2
    1cf0:	b29a      	uxth	r2, r3
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	821a      	strh	r2, [r3, #16]
}
    1cf6:	f107 070c 	add.w	r7, r7, #12
    1cfa:	46bd      	mov	sp, r7
    1cfc:	bc80      	pop	{r7}
    1cfe:	4770      	bx	lr

00001d00 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1d00:	b480      	push	{r7}
    1d02:	b083      	sub	sp, #12
    1d04:	af00      	add	r7, sp, #0
    1d06:	6078      	str	r0, [r7, #4]
    1d08:	460b      	mov	r3, r1
    1d0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	899b      	ldrh	r3, [r3, #12]
    1d10:	b29b      	uxth	r3, r3
    1d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1d16:	b29a      	uxth	r2, r3
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	899b      	ldrh	r3, [r3, #12]
    1d20:	b29a      	uxth	r2, r3
    1d22:	887b      	ldrh	r3, [r7, #2]
    1d24:	4313      	orrs	r3, r2
    1d26:	b29a      	uxth	r2, r3
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	819a      	strh	r2, [r3, #12]
}
    1d2c:	f107 070c 	add.w	r7, r7, #12
    1d30:	46bd      	mov	sp, r7
    1d32:	bc80      	pop	{r7}
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop

00001d38 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d38:	b480      	push	{r7}
    1d3a:	b083      	sub	sp, #12
    1d3c:	af00      	add	r7, sp, #0
    1d3e:	6078      	str	r0, [r7, #4]
    1d40:	460b      	mov	r3, r1
    1d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d44:	78fb      	ldrb	r3, [r7, #3]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d008      	beq.n	1d5c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	899b      	ldrh	r3, [r3, #12]
    1d4e:	b29b      	uxth	r3, r3
    1d50:	f043 0302 	orr.w	r3, r3, #2
    1d54:	b29a      	uxth	r2, r3
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	819a      	strh	r2, [r3, #12]
    1d5a:	e007      	b.n	1d6c <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1d5c:	687b      	ldr	r3, [r7, #4]
    1d5e:	899b      	ldrh	r3, [r3, #12]
    1d60:	b29b      	uxth	r3, r3
    1d62:	f023 0302 	bic.w	r3, r3, #2
    1d66:	b29a      	uxth	r2, r3
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	819a      	strh	r2, [r3, #12]
  }
}
    1d6c:	f107 070c 	add.w	r7, r7, #12
    1d70:	46bd      	mov	sp, r7
    1d72:	bc80      	pop	{r7}
    1d74:	4770      	bx	lr
    1d76:	bf00      	nop

00001d78 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1d78:	b480      	push	{r7}
    1d7a:	b083      	sub	sp, #12
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
    1d80:	460b      	mov	r3, r1
    1d82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	8a1b      	ldrh	r3, [r3, #16]
    1d88:	b29b      	uxth	r3, r3
    1d8a:	f023 0320 	bic.w	r3, r3, #32
    1d8e:	b29a      	uxth	r2, r3
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	8a1b      	ldrh	r3, [r3, #16]
    1d98:	b29a      	uxth	r2, r3
    1d9a:	887b      	ldrh	r3, [r7, #2]
    1d9c:	4313      	orrs	r3, r2
    1d9e:	b29a      	uxth	r2, r3
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	821a      	strh	r2, [r3, #16]
}
    1da4:	f107 070c 	add.w	r7, r7, #12
    1da8:	46bd      	mov	sp, r7
    1daa:	bc80      	pop	{r7}
    1dac:	4770      	bx	lr
    1dae:	bf00      	nop

00001db0 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1db0:	b480      	push	{r7}
    1db2:	b083      	sub	sp, #12
    1db4:	af00      	add	r7, sp, #0
    1db6:	6078      	str	r0, [r7, #4]
    1db8:	460b      	mov	r3, r1
    1dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1dbc:	78fb      	ldrb	r3, [r7, #3]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d008      	beq.n	1dd4 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	8a1b      	ldrh	r3, [r3, #16]
    1dc6:	b29b      	uxth	r3, r3
    1dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1dcc:	b29a      	uxth	r2, r3
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	821a      	strh	r2, [r3, #16]
    1dd2:	e007      	b.n	1de4 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	8a1b      	ldrh	r3, [r3, #16]
    1dd8:	b29b      	uxth	r3, r3
    1dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1dde:	b29a      	uxth	r2, r3
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	821a      	strh	r2, [r3, #16]
  }
}
    1de4:	f107 070c 	add.w	r7, r7, #12
    1de8:	46bd      	mov	sp, r7
    1dea:	bc80      	pop	{r7}
    1dec:	4770      	bx	lr
    1dee:	bf00      	nop

00001df0 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1df0:	b480      	push	{r7}
    1df2:	b083      	sub	sp, #12
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
    1df8:	460b      	mov	r3, r1
    1dfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1dfc:	887b      	ldrh	r3, [r7, #2]
    1dfe:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    1e02:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1e06:	b29a      	uxth	r2, r3
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	809a      	strh	r2, [r3, #4]
}
    1e0c:	f107 070c 	add.w	r7, r7, #12
    1e10:	46bd      	mov	sp, r7
    1e12:	bc80      	pop	{r7}
    1e14:	4770      	bx	lr
    1e16:	bf00      	nop

00001e18 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1e18:	b480      	push	{r7}
    1e1a:	b083      	sub	sp, #12
    1e1c:	af00      	add	r7, sp, #0
    1e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	889b      	ldrh	r3, [r3, #4]
    1e24:	b29b      	uxth	r3, r3
    1e26:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    1e2a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1e2e:	b29b      	uxth	r3, r3
}
    1e30:	4618      	mov	r0, r3
    1e32:	f107 070c 	add.w	r7, r7, #12
    1e36:	46bd      	mov	sp, r7
    1e38:	bc80      	pop	{r7}
    1e3a:	4770      	bx	lr

00001e3c <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1e3c:	b480      	push	{r7}
    1e3e:	b083      	sub	sp, #12
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	899b      	ldrh	r3, [r3, #12]
    1e48:	b29b      	uxth	r3, r3
    1e4a:	f043 0301 	orr.w	r3, r3, #1
    1e4e:	b29a      	uxth	r2, r3
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	819a      	strh	r2, [r3, #12]
}
    1e54:	f107 070c 	add.w	r7, r7, #12
    1e58:	46bd      	mov	sp, r7
    1e5a:	bc80      	pop	{r7}
    1e5c:	4770      	bx	lr
    1e5e:	bf00      	nop

00001e60 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1e60:	b480      	push	{r7}
    1e62:	b083      	sub	sp, #12
    1e64:	af00      	add	r7, sp, #0
    1e66:	6078      	str	r0, [r7, #4]
    1e68:	460b      	mov	r3, r1
    1e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	8b1b      	ldrh	r3, [r3, #24]
    1e70:	b29b      	uxth	r3, r3
    1e72:	b2db      	uxtb	r3, r3
    1e74:	b29a      	uxth	r2, r3
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	8b1b      	ldrh	r3, [r3, #24]
    1e7e:	b29a      	uxth	r2, r3
    1e80:	78fb      	ldrb	r3, [r7, #3]
    1e82:	b29b      	uxth	r3, r3
    1e84:	ea4f 2303 	mov.w	r3, r3, lsl #8
    1e88:	b29b      	uxth	r3, r3
    1e8a:	4313      	orrs	r3, r2
    1e8c:	b29a      	uxth	r2, r3
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	831a      	strh	r2, [r3, #24]
}
    1e92:	f107 070c 	add.w	r7, r7, #12
    1e96:	46bd      	mov	sp, r7
    1e98:	bc80      	pop	{r7}
    1e9a:	4770      	bx	lr

00001e9c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1e9c:	b480      	push	{r7}
    1e9e:	b083      	sub	sp, #12
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
    1ea4:	460b      	mov	r3, r1
    1ea6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	8b1b      	ldrh	r3, [r3, #24]
    1eac:	b29b      	uxth	r3, r3
    1eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1eb2:	b29a      	uxth	r2, r3
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	8b1b      	ldrh	r3, [r3, #24]
    1ebc:	b29a      	uxth	r2, r3
    1ebe:	78fb      	ldrb	r3, [r7, #3]
    1ec0:	b29b      	uxth	r3, r3
    1ec2:	4313      	orrs	r3, r2
    1ec4:	b29a      	uxth	r2, r3
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	831a      	strh	r2, [r3, #24]
}
    1eca:	f107 070c 	add.w	r7, r7, #12
    1ece:	46bd      	mov	sp, r7
    1ed0:	bc80      	pop	{r7}
    1ed2:	4770      	bx	lr

00001ed4 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1ed4:	b480      	push	{r7}
    1ed6:	b083      	sub	sp, #12
    1ed8:	af00      	add	r7, sp, #0
    1eda:	6078      	str	r0, [r7, #4]
    1edc:	460b      	mov	r3, r1
    1ede:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1ee0:	78fb      	ldrb	r3, [r7, #3]
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d008      	beq.n	1ef8 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	8a9b      	ldrh	r3, [r3, #20]
    1eea:	b29b      	uxth	r3, r3
    1eec:	f043 0320 	orr.w	r3, r3, #32
    1ef0:	b29a      	uxth	r2, r3
    1ef2:	687b      	ldr	r3, [r7, #4]
    1ef4:	829a      	strh	r2, [r3, #20]
    1ef6:	e007      	b.n	1f08 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	8a9b      	ldrh	r3, [r3, #20]
    1efc:	b29b      	uxth	r3, r3
    1efe:	f023 0320 	bic.w	r3, r3, #32
    1f02:	b29a      	uxth	r2, r3
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	829a      	strh	r2, [r3, #20]
  }
}
    1f08:	f107 070c 	add.w	r7, r7, #12
    1f0c:	46bd      	mov	sp, r7
    1f0e:	bc80      	pop	{r7}
    1f10:	4770      	bx	lr
    1f12:	bf00      	nop

00001f14 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f14:	b480      	push	{r7}
    1f16:	b083      	sub	sp, #12
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
    1f1c:	460b      	mov	r3, r1
    1f1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1f20:	78fb      	ldrb	r3, [r7, #3]
    1f22:	2b00      	cmp	r3, #0
    1f24:	d008      	beq.n	1f38 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	8a9b      	ldrh	r3, [r3, #20]
    1f2a:	b29b      	uxth	r3, r3
    1f2c:	f043 0310 	orr.w	r3, r3, #16
    1f30:	b29a      	uxth	r2, r3
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	829a      	strh	r2, [r3, #20]
    1f36:	e007      	b.n	1f48 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	8a9b      	ldrh	r3, [r3, #20]
    1f3c:	b29b      	uxth	r3, r3
    1f3e:	f023 0310 	bic.w	r3, r3, #16
    1f42:	b29a      	uxth	r2, r3
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	829a      	strh	r2, [r3, #20]
  }
}
    1f48:	f107 070c 	add.w	r7, r7, #12
    1f4c:	46bd      	mov	sp, r7
    1f4e:	bc80      	pop	{r7}
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f54:	b480      	push	{r7}
    1f56:	b083      	sub	sp, #12
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1f60:	78fb      	ldrb	r3, [r7, #3]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d008      	beq.n	1f78 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	8a9b      	ldrh	r3, [r3, #20]
    1f6a:	b29b      	uxth	r3, r3
    1f6c:	f043 0308 	orr.w	r3, r3, #8
    1f70:	b29a      	uxth	r2, r3
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	829a      	strh	r2, [r3, #20]
    1f76:	e007      	b.n	1f88 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	8a9b      	ldrh	r3, [r3, #20]
    1f7c:	b29b      	uxth	r3, r3
    1f7e:	f023 0308 	bic.w	r3, r3, #8
    1f82:	b29a      	uxth	r2, r3
    1f84:	687b      	ldr	r3, [r7, #4]
    1f86:	829a      	strh	r2, [r3, #20]
  }
}
    1f88:	f107 070c 	add.w	r7, r7, #12
    1f8c:	46bd      	mov	sp, r7
    1f8e:	bc80      	pop	{r7}
    1f90:	4770      	bx	lr
    1f92:	bf00      	nop

00001f94 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f94:	b480      	push	{r7}
    1f96:	b083      	sub	sp, #12
    1f98:	af00      	add	r7, sp, #0
    1f9a:	6078      	str	r0, [r7, #4]
    1f9c:	460b      	mov	r3, r1
    1f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1fa0:	78fb      	ldrb	r3, [r7, #3]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d00a      	beq.n	1fbc <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	899b      	ldrh	r3, [r3, #12]
    1faa:	b29b      	uxth	r3, r3
    1fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1fb4:	b29a      	uxth	r2, r3
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	819a      	strh	r2, [r3, #12]
    1fba:	e009      	b.n	1fd0 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	899b      	ldrh	r3, [r3, #12]
    1fc0:	b29b      	uxth	r3, r3
    1fc2:	ea4f 4343 	mov.w	r3, r3, lsl #17
    1fc6:	ea4f 4353 	mov.w	r3, r3, lsr #17
    1fca:	b29a      	uxth	r2, r3
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	819a      	strh	r2, [r3, #12]
  }
}
    1fd0:	f107 070c 	add.w	r7, r7, #12
    1fd4:	46bd      	mov	sp, r7
    1fd6:	bc80      	pop	{r7}
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1fdc:	b480      	push	{r7}
    1fde:	b083      	sub	sp, #12
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
    1fe4:	460b      	mov	r3, r1
    1fe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1fe8:	78fb      	ldrb	r3, [r7, #3]
    1fea:	2b00      	cmp	r3, #0
    1fec:	d008      	beq.n	2000 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1fee:	687b      	ldr	r3, [r7, #4]
    1ff0:	8a9b      	ldrh	r3, [r3, #20]
    1ff2:	b29b      	uxth	r3, r3
    1ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1ff8:	b29a      	uxth	r2, r3
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	829a      	strh	r2, [r3, #20]
    1ffe:	e007      	b.n	2010 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	8a9b      	ldrh	r3, [r3, #20]
    2004:	b29b      	uxth	r3, r3
    2006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    200a:	b29a      	uxth	r2, r3
    200c:	687b      	ldr	r3, [r7, #4]
    200e:	829a      	strh	r2, [r3, #20]
  }
}
    2010:	f107 070c 	add.w	r7, r7, #12
    2014:	46bd      	mov	sp, r7
    2016:	bc80      	pop	{r7}
    2018:	4770      	bx	lr
    201a:	bf00      	nop

0000201c <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    201c:	b480      	push	{r7}
    201e:	b083      	sub	sp, #12
    2020:	af00      	add	r7, sp, #0
    2022:	6078      	str	r0, [r7, #4]
    2024:	460b      	mov	r3, r1
    2026:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	8a9b      	ldrh	r3, [r3, #20]
    202c:	b29b      	uxth	r3, r3
    202e:	f023 0304 	bic.w	r3, r3, #4
    2032:	b29a      	uxth	r2, r3
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    2038:	687b      	ldr	r3, [r7, #4]
    203a:	8a9b      	ldrh	r3, [r3, #20]
    203c:	b29a      	uxth	r2, r3
    203e:	887b      	ldrh	r3, [r7, #2]
    2040:	4313      	orrs	r3, r2
    2042:	b29a      	uxth	r2, r3
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	829a      	strh	r2, [r3, #20]
}
    2048:	f107 070c 	add.w	r7, r7, #12
    204c:	46bd      	mov	sp, r7
    204e:	bc80      	pop	{r7}
    2050:	4770      	bx	lr
    2052:	bf00      	nop

00002054 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2054:	b480      	push	{r7}
    2056:	b083      	sub	sp, #12
    2058:	af00      	add	r7, sp, #0
    205a:	6078      	str	r0, [r7, #4]
    205c:	460b      	mov	r3, r1
    205e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2060:	78fb      	ldrb	r3, [r7, #3]
    2062:	2b00      	cmp	r3, #0
    2064:	d008      	beq.n	2078 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	8a9b      	ldrh	r3, [r3, #20]
    206a:	b29b      	uxth	r3, r3
    206c:	f043 0302 	orr.w	r3, r3, #2
    2070:	b29a      	uxth	r2, r3
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	829a      	strh	r2, [r3, #20]
    2076:	e007      	b.n	2088 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	8a9b      	ldrh	r3, [r3, #20]
    207c:	b29b      	uxth	r3, r3
    207e:	f023 0302 	bic.w	r3, r3, #2
    2082:	b29a      	uxth	r2, r3
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	829a      	strh	r2, [r3, #20]
  }
}
    2088:	f107 070c 	add.w	r7, r7, #12
    208c:	46bd      	mov	sp, r7
    208e:	bc80      	pop	{r7}
    2090:	4770      	bx	lr
    2092:	bf00      	nop

00002094 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    2094:	b480      	push	{r7}
    2096:	b085      	sub	sp, #20
    2098:	af00      	add	r7, sp, #0
    209a:	6078      	str	r0, [r7, #4]
    209c:	460b      	mov	r3, r1
    209e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    20a0:	f04f 0300 	mov.w	r3, #0
    20a4:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	881b      	ldrh	r3, [r3, #0]
    20aa:	b29a      	uxth	r2, r3
    20ac:	887b      	ldrh	r3, [r7, #2]
    20ae:	4013      	ands	r3, r2
    20b0:	b29b      	uxth	r3, r3
    20b2:	2b00      	cmp	r3, #0
    20b4:	d003      	beq.n	20be <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    20b6:	f04f 0301 	mov.w	r3, #1
    20ba:	73fb      	strb	r3, [r7, #15]
    20bc:	e002      	b.n	20c4 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    20be:	f04f 0300 	mov.w	r3, #0
    20c2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    20c4:	7bfb      	ldrb	r3, [r7, #15]
}
    20c6:	4618      	mov	r0, r3
    20c8:	f107 0714 	add.w	r7, r7, #20
    20cc:	46bd      	mov	sp, r7
    20ce:	bc80      	pop	{r7}
    20d0:	4770      	bx	lr
    20d2:	bf00      	nop

000020d4 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    20d4:	b480      	push	{r7}
    20d6:	b083      	sub	sp, #12
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
    20dc:	460b      	mov	r3, r1
    20de:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    20e0:	887b      	ldrh	r3, [r7, #2]
    20e2:	ea6f 0303 	mvn.w	r3, r3
    20e6:	b29a      	uxth	r2, r3
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	801a      	strh	r2, [r3, #0]
}
    20ec:	f107 070c 	add.w	r7, r7, #12
    20f0:	46bd      	mov	sp, r7
    20f2:	bc80      	pop	{r7}
    20f4:	4770      	bx	lr
    20f6:	bf00      	nop

000020f8 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    20f8:	b480      	push	{r7}
    20fa:	b087      	sub	sp, #28
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
    2100:	460b      	mov	r3, r1
    2102:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    2104:	f04f 0300 	mov.w	r3, #0
    2108:	60fb      	str	r3, [r7, #12]
    210a:	f04f 0300 	mov.w	r3, #0
    210e:	617b      	str	r3, [r7, #20]
    2110:	f04f 0300 	mov.w	r3, #0
    2114:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    2116:	f04f 0300 	mov.w	r3, #0
    211a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    211c:	887b      	ldrh	r3, [r7, #2]
    211e:	b2db      	uxtb	r3, r3
    2120:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2124:	b2db      	uxtb	r3, r3
    2126:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    2128:	887b      	ldrh	r3, [r7, #2]
    212a:	f003 031f 	and.w	r3, r3, #31
    212e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    2130:	697b      	ldr	r3, [r7, #20]
    2132:	f04f 0201 	mov.w	r2, #1
    2136:	fa02 f303 	lsl.w	r3, r2, r3
    213a:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    213c:	68bb      	ldr	r3, [r7, #8]
    213e:	2b01      	cmp	r3, #1
    2140:	d106      	bne.n	2150 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	899b      	ldrh	r3, [r3, #12]
    2146:	b29b      	uxth	r3, r3
    2148:	697a      	ldr	r2, [r7, #20]
    214a:	4013      	ands	r3, r2
    214c:	617b      	str	r3, [r7, #20]
    214e:	e00f      	b.n	2170 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    2150:	68bb      	ldr	r3, [r7, #8]
    2152:	2b02      	cmp	r3, #2
    2154:	d106      	bne.n	2164 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	8a1b      	ldrh	r3, [r3, #16]
    215a:	b29b      	uxth	r3, r3
    215c:	697a      	ldr	r2, [r7, #20]
    215e:	4013      	ands	r3, r2
    2160:	617b      	str	r3, [r7, #20]
    2162:	e005      	b.n	2170 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	8a9b      	ldrh	r3, [r3, #20]
    2168:	b29b      	uxth	r3, r3
    216a:	697a      	ldr	r2, [r7, #20]
    216c:	4013      	ands	r3, r2
    216e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    2170:	887b      	ldrh	r3, [r7, #2]
    2172:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2176:	b29b      	uxth	r3, r3
    2178:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    217a:	68fb      	ldr	r3, [r7, #12]
    217c:	f04f 0201 	mov.w	r2, #1
    2180:	fa02 f303 	lsl.w	r3, r2, r3
    2184:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	881b      	ldrh	r3, [r3, #0]
    218a:	b29b      	uxth	r3, r3
    218c:	68fa      	ldr	r2, [r7, #12]
    218e:	4013      	ands	r3, r2
    2190:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    2192:	697b      	ldr	r3, [r7, #20]
    2194:	2b00      	cmp	r3, #0
    2196:	d006      	beq.n	21a6 <USART_GetITStatus+0xae>
    2198:	68fb      	ldr	r3, [r7, #12]
    219a:	2b00      	cmp	r3, #0
    219c:	d003      	beq.n	21a6 <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
    219e:	f04f 0301 	mov.w	r3, #1
    21a2:	74fb      	strb	r3, [r7, #19]
    21a4:	e002      	b.n	21ac <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
    21a6:	f04f 0300 	mov.w	r3, #0
    21aa:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    21ac:	7cfb      	ldrb	r3, [r7, #19]
}
    21ae:	4618      	mov	r0, r3
    21b0:	f107 071c 	add.w	r7, r7, #28
    21b4:	46bd      	mov	sp, r7
    21b6:	bc80      	pop	{r7}
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop

000021bc <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    21bc:	b480      	push	{r7}
    21be:	b085      	sub	sp, #20
    21c0:	af00      	add	r7, sp, #0
    21c2:	6078      	str	r0, [r7, #4]
    21c4:	460b      	mov	r3, r1
    21c6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    21c8:	f04f 0300 	mov.w	r3, #0
    21cc:	81fb      	strh	r3, [r7, #14]
    21ce:	f04f 0300 	mov.w	r3, #0
    21d2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    21d4:	887b      	ldrh	r3, [r7, #2]
    21d6:	ea4f 2313 	mov.w	r3, r3, lsr #8
    21da:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    21dc:	89fb      	ldrh	r3, [r7, #14]
    21de:	f04f 0201 	mov.w	r2, #1
    21e2:	fa02 f303 	lsl.w	r3, r2, r3
    21e6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    21e8:	89bb      	ldrh	r3, [r7, #12]
    21ea:	ea6f 0303 	mvn.w	r3, r3
    21ee:	b29a      	uxth	r2, r3
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	801a      	strh	r2, [r3, #0]
}
    21f4:	f107 0714 	add.w	r7, r7, #20
    21f8:	46bd      	mov	sp, r7
    21fa:	bc80      	pop	{r7}
    21fc:	4770      	bx	lr
    21fe:	bf00      	nop

00002200 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    2200:	b480      	push	{r7}
    2202:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    2204:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2208:	f2c4 0301 	movt	r3, #16385	; 0x4001
    220c:	f04f 0200 	mov.w	r2, #0
    2210:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    2212:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2216:	f2c4 0301 	movt	r3, #16385	; 0x4001
    221a:	f04f 0200 	mov.w	r2, #0
    221e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    2220:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2224:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2228:	f04f 0200 	mov.w	r2, #0
    222c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    222e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2232:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2236:	f04f 0200 	mov.w	r2, #0
    223a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    223c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2240:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2244:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2248:	f2c0 020f 	movt	r2, #15
    224c:	615a      	str	r2, [r3, #20]
}
    224e:	46bd      	mov	sp, r7
    2250:	bc80      	pop	{r7}
    2252:	4770      	bx	lr

00002254 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2254:	b480      	push	{r7}
    2256:	b085      	sub	sp, #20
    2258:	af00      	add	r7, sp, #0
    225a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    225c:	f04f 0300 	mov.w	r3, #0
    2260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    2262:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2266:	f2c4 0301 	movt	r3, #16385	; 0x4001
    226a:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	799b      	ldrb	r3, [r3, #6]
    2270:	2b00      	cmp	r3, #0
    2272:	d078      	beq.n	2366 <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    2274:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2278:	f2c4 0301 	movt	r3, #16385	; 0x4001
    227c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2280:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2284:	6811      	ldr	r1, [r2, #0]
    2286:	687a      	ldr	r2, [r7, #4]
    2288:	6812      	ldr	r2, [r2, #0]
    228a:	ea6f 0202 	mvn.w	r2, r2
    228e:	400a      	ands	r2, r1
    2290:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2292:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2296:	f2c4 0301 	movt	r3, #16385	; 0x4001
    229a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    229e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22a2:	6851      	ldr	r1, [r2, #4]
    22a4:	687a      	ldr	r2, [r7, #4]
    22a6:	6812      	ldr	r2, [r2, #0]
    22a8:	ea6f 0202 	mvn.w	r2, r2
    22ac:	400a      	ands	r2, r1
    22ae:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	791b      	ldrb	r3, [r3, #4]
    22b4:	68fa      	ldr	r2, [r7, #12]
    22b6:	18d3      	adds	r3, r2, r3
    22b8:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    22ba:	68fb      	ldr	r3, [r7, #12]
    22bc:	68fa      	ldr	r2, [r7, #12]
    22be:	6811      	ldr	r1, [r2, #0]
    22c0:	687a      	ldr	r2, [r7, #4]
    22c2:	6812      	ldr	r2, [r2, #0]
    22c4:	430a      	orrs	r2, r1
    22c6:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    22c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    22cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    22d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    22d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22d8:	6891      	ldr	r1, [r2, #8]
    22da:	687a      	ldr	r2, [r7, #4]
    22dc:	6812      	ldr	r2, [r2, #0]
    22de:	ea6f 0202 	mvn.w	r2, r2
    22e2:	400a      	ands	r2, r1
    22e4:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    22e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    22ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
    22ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    22f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22f6:	68d1      	ldr	r1, [r2, #12]
    22f8:	687a      	ldr	r2, [r7, #4]
    22fa:	6812      	ldr	r2, [r2, #0]
    22fc:	ea6f 0202 	mvn.w	r2, r2
    2300:	400a      	ands	r2, r1
    2302:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2304:	687b      	ldr	r3, [r7, #4]
    2306:	795b      	ldrb	r3, [r3, #5]
    2308:	2b10      	cmp	r3, #16
    230a:	d11a      	bne.n	2342 <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    230c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2310:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2314:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2318:	f2c4 0201 	movt	r2, #16385	; 0x4001
    231c:	6891      	ldr	r1, [r2, #8]
    231e:	687a      	ldr	r2, [r7, #4]
    2320:	6812      	ldr	r2, [r2, #0]
    2322:	430a      	orrs	r2, r1
    2324:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    2326:	f44f 6380 	mov.w	r3, #1024	; 0x400
    232a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    232e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2332:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2336:	68d1      	ldr	r1, [r2, #12]
    2338:	687a      	ldr	r2, [r7, #4]
    233a:	6812      	ldr	r2, [r2, #0]
    233c:	430a      	orrs	r2, r1
    233e:	60da      	str	r2, [r3, #12]
    2340:	e01f      	b.n	2382 <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    2342:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2346:	f2c4 0301 	movt	r3, #16385	; 0x4001
    234a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	795b      	ldrb	r3, [r3, #5]
    2350:	68fa      	ldr	r2, [r7, #12]
    2352:	18d3      	adds	r3, r2, r3
    2354:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2356:	68fb      	ldr	r3, [r7, #12]
    2358:	68fa      	ldr	r2, [r7, #12]
    235a:	6811      	ldr	r1, [r2, #0]
    235c:	687a      	ldr	r2, [r7, #4]
    235e:	6812      	ldr	r2, [r2, #0]
    2360:	430a      	orrs	r2, r1
    2362:	601a      	str	r2, [r3, #0]
    2364:	e00d      	b.n	2382 <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	791b      	ldrb	r3, [r3, #4]
    236a:	68fa      	ldr	r2, [r7, #12]
    236c:	18d3      	adds	r3, r2, r3
    236e:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    2370:	68fb      	ldr	r3, [r7, #12]
    2372:	68fa      	ldr	r2, [r7, #12]
    2374:	6811      	ldr	r1, [r2, #0]
    2376:	687a      	ldr	r2, [r7, #4]
    2378:	6812      	ldr	r2, [r2, #0]
    237a:	ea6f 0202 	mvn.w	r2, r2
    237e:	400a      	ands	r2, r1
    2380:	601a      	str	r2, [r3, #0]
  }
}
    2382:	f107 0714 	add.w	r7, r7, #20
    2386:	46bd      	mov	sp, r7
    2388:	bc80      	pop	{r7}
    238a:	4770      	bx	lr

0000238c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    238c:	b480      	push	{r7}
    238e:	b083      	sub	sp, #12
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	f04f 0200 	mov.w	r2, #0
    239a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	f04f 0200 	mov.w	r2, #0
    23a2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	f04f 020c 	mov.w	r2, #12
    23aa:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	f04f 0200 	mov.w	r2, #0
    23b2:	719a      	strb	r2, [r3, #6]
}
    23b4:	f107 070c 	add.w	r7, r7, #12
    23b8:	46bd      	mov	sp, r7
    23ba:	bc80      	pop	{r7}
    23bc:	4770      	bx	lr
    23be:	bf00      	nop

000023c0 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    23c0:	b480      	push	{r7}
    23c2:	b083      	sub	sp, #12
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    23c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    23d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    23d8:	6911      	ldr	r1, [r2, #16]
    23da:	687a      	ldr	r2, [r7, #4]
    23dc:	430a      	orrs	r2, r1
    23de:	611a      	str	r2, [r3, #16]
}
    23e0:	f107 070c 	add.w	r7, r7, #12
    23e4:	46bd      	mov	sp, r7
    23e6:	bc80      	pop	{r7}
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    23ec:	b480      	push	{r7}
    23ee:	b085      	sub	sp, #20
    23f0:	af00      	add	r7, sp, #0
    23f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    23f4:	f04f 0300 	mov.w	r3, #0
    23f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    23fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2402:	695a      	ldr	r2, [r3, #20]
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	4013      	ands	r3, r2
    2408:	2b00      	cmp	r3, #0
    240a:	d003      	beq.n	2414 <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
    240c:	f04f 0301 	mov.w	r3, #1
    2410:	73fb      	strb	r3, [r7, #15]
    2412:	e002      	b.n	241a <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
    2414:	f04f 0300 	mov.w	r3, #0
    2418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    241a:	7bfb      	ldrb	r3, [r7, #15]
}
    241c:	4618      	mov	r0, r3
    241e:	f107 0714 	add.w	r7, r7, #20
    2422:	46bd      	mov	sp, r7
    2424:	bc80      	pop	{r7}
    2426:	4770      	bx	lr

00002428 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2428:	b480      	push	{r7}
    242a:	b083      	sub	sp, #12
    242c:	af00      	add	r7, sp, #0
    242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2430:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2434:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2438:	687a      	ldr	r2, [r7, #4]
    243a:	615a      	str	r2, [r3, #20]
}
    243c:	f107 070c 	add.w	r7, r7, #12
    2440:	46bd      	mov	sp, r7
    2442:	bc80      	pop	{r7}
    2444:	4770      	bx	lr
    2446:	bf00      	nop

00002448 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    2448:	b480      	push	{r7}
    244a:	b085      	sub	sp, #20
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    2450:	f04f 0300 	mov.w	r3, #0
    2454:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    2456:	f04f 0300 	mov.w	r3, #0
    245a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    245c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2460:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2464:	681a      	ldr	r2, [r3, #0]
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	4013      	ands	r3, r2
    246a:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    246c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2470:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2474:	695a      	ldr	r2, [r3, #20]
    2476:	687b      	ldr	r3, [r7, #4]
    2478:	4013      	ands	r3, r2
    247a:	2b00      	cmp	r3, #0
    247c:	d006      	beq.n	248c <EXTI_GetITStatus+0x44>
    247e:	68bb      	ldr	r3, [r7, #8]
    2480:	2b00      	cmp	r3, #0
    2482:	d003      	beq.n	248c <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
    2484:	f04f 0301 	mov.w	r3, #1
    2488:	73fb      	strb	r3, [r7, #15]
    248a:	e002      	b.n	2492 <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
    248c:	f04f 0300 	mov.w	r3, #0
    2490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2492:	7bfb      	ldrb	r3, [r7, #15]
}
    2494:	4618      	mov	r0, r3
    2496:	f107 0714 	add.w	r7, r7, #20
    249a:	46bd      	mov	sp, r7
    249c:	bc80      	pop	{r7}
    249e:	4770      	bx	lr

000024a0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    24a0:	b480      	push	{r7}
    24a2:	b083      	sub	sp, #12
    24a4:	af00      	add	r7, sp, #0
    24a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    24a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    24ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    24b0:	687a      	ldr	r2, [r7, #4]
    24b2:	615a      	str	r2, [r3, #20]
}
    24b4:	f107 070c 	add.w	r7, r7, #12
    24b8:	46bd      	mov	sp, r7
    24ba:	bc80      	pop	{r7}
    24bc:	4770      	bx	lr
    24be:	bf00      	nop

000024c0 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    24c0:	b480      	push	{r7}
    24c2:	b083      	sub	sp, #12
    24c4:	af00      	add	r7, sp, #0
    24c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    24c8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    24cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    24d0:	687a      	ldr	r2, [r7, #4]
    24d2:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
    24d6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    24da:	60da      	str	r2, [r3, #12]
}
    24dc:	f107 070c 	add.w	r7, r7, #12
    24e0:	46bd      	mov	sp, r7
    24e2:	bc80      	pop	{r7}
    24e4:	4770      	bx	lr
    24e6:	bf00      	nop

000024e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    24e8:	b480      	push	{r7}
    24ea:	b087      	sub	sp, #28
    24ec:	af00      	add	r7, sp, #0
    24ee:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    24f0:	f04f 0300 	mov.w	r3, #0
    24f4:	617b      	str	r3, [r7, #20]
    24f6:	f04f 0300 	mov.w	r3, #0
    24fa:	613b      	str	r3, [r7, #16]
    24fc:	f04f 030f 	mov.w	r3, #15
    2500:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	78db      	ldrb	r3, [r3, #3]
    2506:	2b00      	cmp	r3, #0
    2508:	d047      	beq.n	259a <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    250a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    250e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2512:	68db      	ldr	r3, [r3, #12]
    2514:	ea6f 0303 	mvn.w	r3, r3
    2518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    251c:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2520:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2522:	697b      	ldr	r3, [r7, #20]
    2524:	f1c3 0304 	rsb	r3, r3, #4
    2528:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    252a:	697b      	ldr	r3, [r7, #20]
    252c:	68fa      	ldr	r2, [r7, #12]
    252e:	fa22 f303 	lsr.w	r3, r2, r3
    2532:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2534:	687b      	ldr	r3, [r7, #4]
    2536:	785b      	ldrb	r3, [r3, #1]
    2538:	461a      	mov	r2, r3
    253a:	693b      	ldr	r3, [r7, #16]
    253c:	fa02 f303 	lsl.w	r3, r2, r3
    2540:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	789b      	ldrb	r3, [r3, #2]
    2546:	461a      	mov	r2, r3
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	4013      	ands	r3, r2
    254c:	697a      	ldr	r2, [r7, #20]
    254e:	4313      	orrs	r3, r2
    2550:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    2552:	697b      	ldr	r3, [r7, #20]
    2554:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2558:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    255a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    255e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2562:	687a      	ldr	r2, [r7, #4]
    2564:	7812      	ldrb	r2, [r2, #0]
    2566:	4611      	mov	r1, r2
    2568:	697a      	ldr	r2, [r7, #20]
    256a:	b2d2      	uxtb	r2, r2
    256c:	185b      	adds	r3, r3, r1
    256e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2572:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    2576:	f2ce 0300 	movt	r3, #57344	; 0xe000
    257a:	687a      	ldr	r2, [r7, #4]
    257c:	7812      	ldrb	r2, [r2, #0]
    257e:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2582:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2584:	6879      	ldr	r1, [r7, #4]
    2586:	7809      	ldrb	r1, [r1, #0]
    2588:	f001 011f 	and.w	r1, r1, #31
    258c:	f04f 0001 	mov.w	r0, #1
    2590:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2598:	e014      	b.n	25c4 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    259a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    259e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    25a2:	687a      	ldr	r2, [r7, #4]
    25a4:	7812      	ldrb	r2, [r2, #0]
    25a6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    25aa:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    25ac:	6879      	ldr	r1, [r7, #4]
    25ae:	7809      	ldrb	r1, [r1, #0]
    25b0:	f001 011f 	and.w	r1, r1, #31
    25b4:	f04f 0001 	mov.w	r0, #1
    25b8:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    25bc:	f102 0220 	add.w	r2, r2, #32
    25c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    25c4:	f107 071c 	add.w	r7, r7, #28
    25c8:	46bd      	mov	sp, r7
    25ca:	bc80      	pop	{r7}
    25cc:	4770      	bx	lr
    25ce:	bf00      	nop

000025d0 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    25d0:	b480      	push	{r7}
    25d2:	b083      	sub	sp, #12
    25d4:	af00      	add	r7, sp, #0
    25d6:	6078      	str	r0, [r7, #4]
    25d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    25da:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    25de:	f2ce 0300 	movt	r3, #57344	; 0xe000
    25e2:	683a      	ldr	r2, [r7, #0]
    25e4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    25e8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    25ec:	6879      	ldr	r1, [r7, #4]
    25ee:	430a      	orrs	r2, r1
    25f0:	609a      	str	r2, [r3, #8]
}
    25f2:	f107 070c 	add.w	r7, r7, #12
    25f6:	46bd      	mov	sp, r7
    25f8:	bc80      	pop	{r7}
    25fa:	4770      	bx	lr

000025fc <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    25fc:	b480      	push	{r7}
    25fe:	b083      	sub	sp, #12
    2600:	af00      	add	r7, sp, #0
    2602:	4602      	mov	r2, r0
    2604:	460b      	mov	r3, r1
    2606:	71fa      	strb	r2, [r7, #7]
    2608:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    260a:	79bb      	ldrb	r3, [r7, #6]
    260c:	2b00      	cmp	r3, #0
    260e:	d00c      	beq.n	262a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2610:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2614:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2618:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    261c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2620:	6911      	ldr	r1, [r2, #16]
    2622:	79fa      	ldrb	r2, [r7, #7]
    2624:	430a      	orrs	r2, r1
    2626:	611a      	str	r2, [r3, #16]
    2628:	e00d      	b.n	2646 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    262a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    262e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2632:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2636:	f2ce 0200 	movt	r2, #57344	; 0xe000
    263a:	6911      	ldr	r1, [r2, #16]
    263c:	79fa      	ldrb	r2, [r7, #7]
    263e:	ea6f 0202 	mvn.w	r2, r2
    2642:	400a      	ands	r2, r1
    2644:	611a      	str	r2, [r3, #16]
  }
}
    2646:	f107 070c 	add.w	r7, r7, #12
    264a:	46bd      	mov	sp, r7
    264c:	bc80      	pop	{r7}
    264e:	4770      	bx	lr

00002650 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    2650:	b480      	push	{r7}
    2652:	b083      	sub	sp, #12
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	2b04      	cmp	r3, #4
    265c:	d10c      	bne.n	2678 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    265e:	f24e 0310 	movw	r3, #57360	; 0xe010
    2662:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2666:	f24e 0210 	movw	r2, #57360	; 0xe010
    266a:	f2ce 0200 	movt	r2, #57344	; 0xe000
    266e:	6812      	ldr	r2, [r2, #0]
    2670:	f042 0204 	orr.w	r2, r2, #4
    2674:	601a      	str	r2, [r3, #0]
    2676:	e00b      	b.n	2690 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    2678:	f24e 0310 	movw	r3, #57360	; 0xe010
    267c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2680:	f24e 0210 	movw	r2, #57360	; 0xe010
    2684:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2688:	6812      	ldr	r2, [r2, #0]
    268a:	f022 0204 	bic.w	r2, r2, #4
    268e:	601a      	str	r2, [r3, #0]
  }
}
    2690:	f107 070c 	add.w	r7, r7, #12
    2694:	46bd      	mov	sp, r7
    2696:	bc80      	pop	{r7}
    2698:	4770      	bx	lr
    269a:	bf00      	nop

0000269c <SysTick_Handler>:
	.global SysTick_Handler
	.type	USART2_IRQHandler, %function
	.global USART2_IRQHandler
SysTick_Handler:
USART2_IRQHandler:
	mrs r0, psp
    269c:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r7}
    26a0:	f840 7d04 	str.w	r7, [r0, #-4]!

	/* Get ISR number */
	mrs r7, ipsr
    26a4:	f3ef 8705 	mrs	r7, IPSR
	neg r7, r7
    26a8:	f1c7 0700 	rsb	r7, r7, #0

	/* save user state */
	stmdb r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
    26ac:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* load kernel state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
    26b0:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	msr psr, ip
    26b4:	f38c 8803 	msr	PSR, ip

	bx lr
    26b8:	4770      	bx	lr

000026ba <SVC_Handler>:

	.type	SVC_Handler, %function
	.global SVC_Handler
SVC_Handler:
	/* save user state */
	mrs r0, psp
    26ba:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r7}
    26be:	f840 7d04 	str.w	r7, [r0, #-4]!
	stmdb r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
    26c2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* load kernel state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
    26c6:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	msr psr, ip
    26ca:	f38c 8803 	msr	PSR, ip
	
	bx lr
    26ce:	4770      	bx	lr

000026d0 <activate>:

	.global activate
activate:
	/* save kernel state */
	mrs ip, psr
    26d0:	f3ef 8c03 	mrs	ip, PSR
	push {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
    26d4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	
	/* switch to process stack pointer */
	msr psp, r0
    26d8:	f380 8809 	msr	PSP, r0
	mov r0, #3
    26dc:	f04f 0003 	mov.w	r0, #3
	msr control, r0
    26e0:	f380 8814 	msr	CONTROL, r0
	
	/* load user state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
    26e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pop {r7}
    26e8:	bc80      	pop	{r7}

	bx lr
    26ea:	4770      	bx	lr

000026ec <fork>:
	.fpu softvfp
	.thumb

.global fork
fork:
	push {r7}
    26ec:	b480      	push	{r7}
	mov r7, #0x1
    26ee:	f04f 0701 	mov.w	r7, #1
	svc 0
    26f2:	df00      	svc	0
	nop
    26f4:	bf00      	nop
	pop {r7}
    26f6:	bc80      	pop	{r7}
	bx lr
    26f8:	4770      	bx	lr

000026fa <getpid>:
.global getpid
getpid:
	push {r7}
    26fa:	b480      	push	{r7}
	mov r7, #0x2
    26fc:	f04f 0702 	mov.w	r7, #2
	svc 0
    2700:	df00      	svc	0
	nop
    2702:	bf00      	nop
	pop {r7}
    2704:	bc80      	pop	{r7}
	bx lr
    2706:	4770      	bx	lr

00002708 <write>:
.global write
write:
	push {r7}
    2708:	b480      	push	{r7}
	mov r7, #0x3
    270a:	f04f 0703 	mov.w	r7, #3
	svc 0
    270e:	df00      	svc	0
	nop
    2710:	bf00      	nop
	pop {r7}
    2712:	bc80      	pop	{r7}
	bx lr
    2714:	4770      	bx	lr

00002716 <read>:
.global read
read:
	push {r7}
    2716:	b480      	push	{r7}
	mov r7, #0x4
    2718:	f04f 0704 	mov.w	r7, #4
	svc 0
    271c:	df00      	svc	0
	nop
    271e:	bf00      	nop
	pop {r7}
    2720:	bc80      	pop	{r7}
	bx lr
    2722:	4770      	bx	lr

00002724 <interrupt_wait>:
.global interrupt_wait
interrupt_wait:
	push {r7}
    2724:	b480      	push	{r7}
	mov r7, #0x5
    2726:	f04f 0705 	mov.w	r7, #5
	svc 0
    272a:	df00      	svc	0
	nop
    272c:	bf00      	nop
	pop {r7}
    272e:	bc80      	pop	{r7}
	bx lr
    2730:	4770      	bx	lr

00002732 <getpriority>:
.global getpriority
getpriority:
	push {r7}
    2732:	b480      	push	{r7}
	mov r7, #0x6
    2734:	f04f 0706 	mov.w	r7, #6
	svc 0
    2738:	df00      	svc	0
	nop
    273a:	bf00      	nop
	pop {r7}
    273c:	bc80      	pop	{r7}
	bx lr
    273e:	4770      	bx	lr

00002740 <setpriority>:
.global setpriority
setpriority:
	push {r7}
    2740:	b480      	push	{r7}
	mov r7, #0x7
    2742:	f04f 0707 	mov.w	r7, #7
	svc 0
    2746:	df00      	svc	0
	nop
    2748:	bf00      	nop
	pop {r7}
    274a:	bc80      	pop	{r7}
	bx lr
    274c:	4770      	bx	lr

0000274e <mknod>:
.global mknod
mknod:
	push {r7}
    274e:	b480      	push	{r7}
	mov r7, #0x8
    2750:	f04f 0708 	mov.w	r7, #8
	svc 0
    2754:	df00      	svc	0
	nop
    2756:	bf00      	nop
	pop {r7}
    2758:	bc80      	pop	{r7}
	bx lr
    275a:	4770      	bx	lr

0000275c <sleep>:
.global sleep
sleep:
	push {r7}
    275c:	b480      	push	{r7}
	mov r7, #0x9
    275e:	f04f 0709 	mov.w	r7, #9
	svc 0
    2762:	df00      	svc	0
	nop
    2764:	bf00      	nop
	pop {r7}
    2766:	bc80      	pop	{r7}
	bx lr
    2768:	4770      	bx	lr
	...

0000276c <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
    276c:	b580      	push	{r7, lr}
    276e:	b082      	sub	sp, #8
    2770:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    2772:	f04f 0010 	mov.w	r0, #16
    2776:	f04f 0101 	mov.w	r1, #1
    277a:	f7fe fb83 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    277e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    2782:	f2c4 0001 	movt	r0, #16385	; 0x4001
    2786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    278a:	f04f 0201 	mov.w	r2, #1
    278e:	f7fe fee1 	bl	1554 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    2792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2796:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    2798:	f04f 0310 	mov.w	r3, #16
    279c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    279e:	f04f 0303 	mov.w	r3, #3
    27a2:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    27a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    27a8:	f2c4 0001 	movt	r0, #16385	; 0x4001
    27ac:	f107 0304 	add.w	r3, r7, #4
    27b0:	4619      	mov	r1, r3
    27b2:	f7fe fd6d 	bl	1290 <GPIO_Init>
}
    27b6:	f107 0708 	add.w	r7, r7, #8
    27ba:	46bd      	mov	sp, r7
    27bc:	bd80      	pop	{r7, pc}
    27be:	bf00      	nop

000027c0 <init_button>:

void init_button(void)
{
    27c0:	b580      	push	{r7, lr}
    27c2:	b082      	sub	sp, #8
    27c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    27c6:	f04f 0004 	mov.w	r0, #4
    27ca:	f04f 0101 	mov.w	r1, #1
    27ce:	f7fe fb59 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    27d2:	f04f 0301 	mov.w	r3, #1
    27d6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    27d8:	f04f 0304 	mov.w	r3, #4
    27dc:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    27de:	f04f 0303 	mov.w	r3, #3
    27e2:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    27e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    27e8:	f2c4 0001 	movt	r0, #16385	; 0x4001
    27ec:	f107 0304 	add.w	r3, r7, #4
    27f0:	4619      	mov	r1, r3
    27f2:	f7fe fd4d 	bl	1290 <GPIO_Init>
}
    27f6:	f107 0708 	add.w	r7, r7, #8
    27fa:	46bd      	mov	sp, r7
    27fc:	bd80      	pop	{r7, pc}
    27fe:	bf00      	nop

00002800 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    2800:	b580      	push	{r7, lr}
    2802:	b084      	sub	sp, #16
    2804:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    2806:	f04f 0001 	mov.w	r0, #1
    280a:	f04f 0101 	mov.w	r1, #1
    280e:	f7fe fb39 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    2812:	f04f 0000 	mov.w	r0, #0
    2816:	f04f 0100 	mov.w	r1, #0
    281a:	f7fe ffad 	bl	1778 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    281e:	f04f 0301 	mov.w	r3, #1
    2822:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    2824:	f04f 0300 	mov.w	r3, #0
    2828:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    282a:	f04f 0308 	mov.w	r3, #8
    282e:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    2830:	f04f 0301 	mov.w	r3, #1
    2834:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    2836:	f107 0308 	add.w	r3, r7, #8
    283a:	4618      	mov	r0, r3
    283c:	f7ff fd0a 	bl	2254 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    2840:	f04f 0306 	mov.w	r3, #6
    2844:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    2846:	f04f 030f 	mov.w	r3, #15
    284a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    284c:	f04f 030f 	mov.w	r3, #15
    2850:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    2852:	f04f 0301 	mov.w	r3, #1
    2856:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    2858:	f107 0304 	add.w	r3, r7, #4
    285c:	4618      	mov	r0, r3
    285e:	f7ff fe43 	bl	24e8 <NVIC_Init>
}
    2862:	f107 0710 	add.w	r7, r7, #16
    2866:	46bd      	mov	sp, r7
    2868:	bd80      	pop	{r7, pc}
    286a:	bf00      	nop

0000286c <init_rs232>:

void init_rs232(void)
{
    286c:	b580      	push	{r7, lr}
    286e:	b086      	sub	sp, #24
    2870:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    2872:	f04f 0005 	mov.w	r0, #5
    2876:	f04f 0101 	mov.w	r1, #1
    287a:	f7fe fb03 	bl	e84 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    287e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2882:	f04f 0101 	mov.w	r1, #1
    2886:	f7fe fb27 	bl	ed8 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    288a:	f04f 0308 	mov.w	r3, #8
    288e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    2890:	f04f 0304 	mov.w	r3, #4
    2894:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    2896:	f44f 6000 	mov.w	r0, #2048	; 0x800
    289a:	f2c4 0001 	movt	r0, #16385	; 0x4001
    289e:	f107 0304 	add.w	r3, r7, #4
    28a2:	4619      	mov	r1, r3
    28a4:	f7fe fcf4 	bl	1290 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    28a8:	f04f 0304 	mov.w	r3, #4
    28ac:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    28ae:	f04f 0303 	mov.w	r3, #3
    28b2:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    28b4:	f04f 0318 	mov.w	r3, #24
    28b8:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    28ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
    28be:	f2c4 0001 	movt	r0, #16385	; 0x4001
    28c2:	f107 0304 	add.w	r3, r7, #4
    28c6:	4619      	mov	r1, r3
    28c8:	f7fe fce2 	bl	1290 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    28cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    28d0:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    28d2:	f04f 0300 	mov.w	r3, #0
    28d6:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    28d8:	f04f 0300 	mov.w	r3, #0
    28dc:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    28de:	f04f 0300 	mov.w	r3, #0
    28e2:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    28e4:	f04f 0300 	mov.w	r3, #0
    28e8:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    28ea:	f04f 030c 	mov.w	r3, #12
    28ee:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    28f0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    28f4:	f2c4 0000 	movt	r0, #16384	; 0x4000
    28f8:	f107 0308 	add.w	r3, r7, #8
    28fc:	4619      	mov	r1, r3
    28fe:	f7ff f80f 	bl	1920 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    2902:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    2906:	f2c4 0000 	movt	r0, #16384	; 0x4000
    290a:	f04f 0101 	mov.w	r1, #1
    290e:	f7ff f945 	bl	1b9c <USART_Cmd>
}
    2912:	f107 0718 	add.w	r7, r7, #24
    2916:	46bd      	mov	sp, r7
    2918:	bd80      	pop	{r7, pc}
    291a:	bf00      	nop

0000291c <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    291c:	b580      	push	{r7, lr}
    291e:	b082      	sub	sp, #8
    2920:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    2922:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    2926:	f2c4 0000 	movt	r0, #16384	; 0x4000
    292a:	f240 7127 	movw	r1, #1831	; 0x727
    292e:	f04f 0200 	mov.w	r2, #0
    2932:	f7ff f953 	bl	1bdc <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    2936:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    293a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    293e:	f240 5125 	movw	r1, #1317	; 0x525
    2942:	f04f 0201 	mov.w	r2, #1
    2946:	f7ff f949 	bl	1bdc <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    294a:	f04f 0326 	mov.w	r3, #38	; 0x26
    294e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    2950:	f04f 0300 	mov.w	r3, #0
    2954:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    2956:	f04f 0301 	mov.w	r3, #1
    295a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    295c:	f107 0304 	add.w	r3, r7, #4
    2960:	4618      	mov	r0, r3
    2962:	f7ff fdc1 	bl	24e8 <NVIC_Init>
}
    2966:	f107 0708 	add.w	r7, r7, #8
    296a:	46bd      	mov	sp, r7
    296c:	bd80      	pop	{r7, pc}
    296e:	bf00      	nop

00002970 <enable_rs232>:

void enable_rs232(void)
{
    2970:	b580      	push	{r7, lr}
    2972:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
    2974:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    2978:	f2c4 0000 	movt	r0, #16384	; 0x4000
    297c:	f04f 0101 	mov.w	r1, #1
    2980:	f7ff f90c 	bl	1b9c <USART_Cmd>
}
    2984:	bd80      	pop	{r7, pc}
    2986:	bf00      	nop

00002988 <__enable_irq>:


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
    2988:	b480      	push	{r7}
    298a:	af00      	add	r7, sp, #0
    298c:	b662      	cpsie	i
    298e:	46bd      	mov	sp, r7
    2990:	bc80      	pop	{r7}
    2992:	4770      	bx	lr

00002994 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	4603      	mov	r3, r0
    299c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    299e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    29a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    29a6:	f997 2007 	ldrsb.w	r2, [r7, #7]
    29aa:	ea4f 1252 	mov.w	r2, r2, lsr #5
    29ae:	79f9      	ldrb	r1, [r7, #7]
    29b0:	f001 011f 	and.w	r1, r1, #31
    29b4:	f04f 0001 	mov.w	r0, #1
    29b8:	fa00 f101 	lsl.w	r1, r0, r1
    29bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    29c0:	f107 070c 	add.w	r7, r7, #12
    29c4:	46bd      	mov	sp, r7
    29c6:	bc80      	pop	{r7}
    29c8:	4770      	bx	lr
    29ca:	bf00      	nop

000029cc <NVIC_DisableIRQ>:
 *
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    29cc:	b480      	push	{r7}
    29ce:	b083      	sub	sp, #12
    29d0:	af00      	add	r7, sp, #0
    29d2:	4603      	mov	r3, r0
    29d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    29d6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    29da:	f2ce 0300 	movt	r3, #57344	; 0xe000
    29de:	f997 2007 	ldrsb.w	r2, [r7, #7]
    29e2:	ea4f 1252 	mov.w	r2, r2, lsr #5
    29e6:	79f9      	ldrb	r1, [r7, #7]
    29e8:	f001 011f 	and.w	r1, r1, #31
    29ec:	f04f 0001 	mov.w	r0, #1
    29f0:	fa00 f101 	lsl.w	r1, r0, r1
    29f4:	f102 0220 	add.w	r2, r2, #32
    29f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    29fc:	f107 070c 	add.w	r7, r7, #12
    2a00:	46bd      	mov	sp, r7
    2a02:	bc80      	pop	{r7}
    2a04:	4770      	bx	lr
    2a06:	bf00      	nop

00002a08 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    2a08:	b480      	push	{r7}
    2a0a:	b083      	sub	sp, #12
    2a0c:	af00      	add	r7, sp, #0
    2a0e:	4603      	mov	r3, r0
    2a10:	6039      	str	r1, [r7, #0]
    2a12:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    2a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2a18:	2b00      	cmp	r3, #0
    2a1a:	da10      	bge.n	2a3e <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
    2a1c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2a20:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2a24:	79fa      	ldrb	r2, [r7, #7]
    2a26:	f002 020f 	and.w	r2, r2, #15
    2a2a:	f1a2 0104 	sub.w	r1, r2, #4
    2a2e:	683a      	ldr	r2, [r7, #0]
    2a30:	b2d2      	uxtb	r2, r2
    2a32:	ea4f 1202 	mov.w	r2, r2, lsl #4
    2a36:	b2d2      	uxtb	r2, r2
    2a38:	185b      	adds	r3, r3, r1
    2a3a:	761a      	strb	r2, [r3, #24]
    2a3c:	e00d      	b.n	2a5a <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    2a3e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    2a42:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2a46:	f997 1007 	ldrsb.w	r1, [r7, #7]
    2a4a:	683a      	ldr	r2, [r7, #0]
    2a4c:	b2d2      	uxtb	r2, r2
    2a4e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    2a52:	b2d2      	uxtb	r2, r2
    2a54:	185b      	adds	r3, r3, r1
    2a56:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    2a5a:	f107 070c 	add.w	r7, r7, #12
    2a5e:	46bd      	mov	sp, r7
    2a60:	bc80      	pop	{r7}
    2a62:	4770      	bx	lr

00002a64 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    2a64:	b580      	push	{r7, lr}
    2a66:	b082      	sub	sp, #8
    2a68:	af00      	add	r7, sp, #0
    2a6a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
    2a6c:	687a      	ldr	r2, [r7, #4]
    2a6e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    2a72:	429a      	cmp	r2, r3
    2a74:	d902      	bls.n	2a7c <SysTick_Config+0x18>
    2a76:	f04f 0301 	mov.w	r3, #1
    2a7a:	e01f      	b.n	2abc <SysTick_Config+0x58>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    2a7c:	f24e 0310 	movw	r3, #57360	; 0xe010
    2a80:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2a84:	687a      	ldr	r2, [r7, #4]
    2a86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2a8a:	f102 32ff 	add.w	r2, r2, #4294967295
    2a8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
    2a90:	f04f 30ff 	mov.w	r0, #4294967295
    2a94:	f04f 010f 	mov.w	r1, #15
    2a98:	f7ff ffb6 	bl	2a08 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    2a9c:	f24e 0310 	movw	r3, #57360	; 0xe010
    2aa0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2aa4:	f04f 0200 	mov.w	r2, #0
    2aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2aaa:	f24e 0310 	movw	r3, #57360	; 0xe010
    2aae:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2ab2:	f04f 0207 	mov.w	r2, #7
    2ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    2ab8:	f04f 0300 	mov.w	r3, #0
}
    2abc:	4618      	mov	r0, r3
    2abe:	f107 0708 	add.w	r7, r7, #8
    2ac2:	46bd      	mov	sp, r7
    2ac4:	bd80      	pop	{r7, pc}
    2ac6:	bf00      	nop

00002ac8 <pathserver>:
 * 0-2 are reserved FDs and are skipped.
 * The server registers itself at /sys/pathserver
*/
#define PATH_SERVER_NAME "/sys/pathserver"
void pathserver()
{
    2ac8:	b5b0      	push	{r4, r5, r7, lr}
    2aca:	b0b6      	sub	sp, #216	; 0xd8
    2acc:	af00      	add	r7, sp, #0
	char paths[PIPE_LIMIT - TASK_LIMIT - 3][PATH_MAX];
	int npaths = 0;
    2ace:	f04f 0300 	mov.w	r3, #0
    2ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	int i = 0;
    2ad6:	f04f 0300 	mov.w	r3, #0
    2ada:	633b      	str	r3, [r7, #48]	; 0x30
	unsigned int plen = 0;
    2adc:	f04f 0300 	mov.w	r3, #0
    2ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
	unsigned int replyfd = 0;
    2ae2:	f04f 0300 	mov.w	r3, #0
    2ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	char path[PATH_MAX];

	memcpy(paths[npaths++], PATH_SERVER_NAME, sizeof(PATH_SERVER_NAME));
    2ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    2aec:	ea4f 1343 	mov.w	r3, r3, lsl #5
    2af0:	f107 0234 	add.w	r2, r7, #52	; 0x34
    2af4:	18d2      	adds	r2, r2, r3
    2af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    2afa:	f103 0301 	add.w	r3, r3, #1
    2afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    2b02:	f245 0318 	movw	r3, #20504	; 0x5018
    2b06:	f2c0 0300 	movt	r3, #0
    2b0a:	4614      	mov	r4, r2
    2b0c:	461d      	mov	r5, r3
    2b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2b10:	6020      	str	r0, [r4, #0]
    2b12:	6061      	str	r1, [r4, #4]
    2b14:	60a2      	str	r2, [r4, #8]
    2b16:	60e3      	str	r3, [r4, #12]
    2b18:	e000      	b.n	2b1c <pathserver+0x54>
			if (i >= npaths) {
				i = -1; /* Error: not found */
				write(replyfd, &i, 4);
			}
		}
	}
    2b1a:	bf00      	nop
	char path[PATH_MAX];

	memcpy(paths[npaths++], PATH_SERVER_NAME, sizeof(PATH_SERVER_NAME));

	while (1) {
		read(PATHSERVER_FD, &replyfd, 4);
    2b1c:	f04f 000b 	mov.w	r0, #11
    2b20:	f107 0328 	add.w	r3, r7, #40	; 0x28
    2b24:	4619      	mov	r1, r3
    2b26:	f04f 0204 	mov.w	r2, #4
    2b2a:	f7ff fdf4 	bl	2716 <read>
		read(PATHSERVER_FD, &plen, 4);
    2b2e:	f04f 000b 	mov.w	r0, #11
    2b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    2b36:	4619      	mov	r1, r3
    2b38:	f04f 0204 	mov.w	r2, #4
    2b3c:	f7ff fdeb 	bl	2716 <read>
		read(PATHSERVER_FD, path, plen);
    2b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b42:	f04f 000b 	mov.w	r0, #11
    2b46:	f107 0208 	add.w	r2, r7, #8
    2b4a:	4611      	mov	r1, r2
    2b4c:	461a      	mov	r2, r3
    2b4e:	f7ff fde2 	bl	2716 <read>

		if (!replyfd) { /* mkfifo */
    2b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b54:	2b00      	cmp	r3, #0
    2b56:	d12a      	bne.n	2bae <pathserver+0xe6>
			int dev;
			read(PATHSERVER_FD, &dev, 4);
    2b58:	f04f 000b 	mov.w	r0, #11
    2b5c:	f107 0304 	add.w	r3, r7, #4
    2b60:	4619      	mov	r1, r3
    2b62:	f04f 0204 	mov.w	r2, #4
    2b66:	f7ff fdd6 	bl	2716 <read>
			memcpy(paths[npaths], path, plen);
    2b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    2b6e:	ea4f 1343 	mov.w	r3, r3, lsl #5
    2b72:	f107 0234 	add.w	r2, r7, #52	; 0x34
    2b76:	18d2      	adds	r2, r2, r3
    2b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b7a:	4611      	mov	r1, r2
    2b7c:	f107 0208 	add.w	r2, r7, #8
    2b80:	4608      	mov	r0, r1
    2b82:	4611      	mov	r1, r2
    2b84:	461a      	mov	r2, r3
    2b86:	f002 f84b 	bl	4c20 <memcpy>
			mknod(npaths + 3 + TASK_LIMIT, 0, dev);
    2b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    2b8e:	f103 020b 	add.w	r2, r3, #11
    2b92:	687b      	ldr	r3, [r7, #4]
    2b94:	4610      	mov	r0, r2
    2b96:	f04f 0100 	mov.w	r1, #0
    2b9a:	461a      	mov	r2, r3
    2b9c:	f7ff fdd7 	bl	274e <mknod>
			npaths++;
    2ba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    2ba4:	f103 0301 	add.w	r3, r3, #1
    2ba8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			if (i >= npaths) {
				i = -1; /* Error: not found */
				write(replyfd, &i, 4);
			}
		}
	}
    2bac:	e7b5      	b.n	2b1a <pathserver+0x52>
			mknod(npaths + 3 + TASK_LIMIT, 0, dev);
			npaths++;
		}
		else { /* open */
			/* Search for path */
			for (i = 0; i < npaths; i++) {
    2bae:	f04f 0300 	mov.w	r3, #0
    2bb2:	633b      	str	r3, [r7, #48]	; 0x30
    2bb4:	e030      	b.n	2c18 <pathserver+0x150>
				if (*paths[i] && strcmp(path, paths[i]) == 0) {
    2bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2bb8:	ea4f 1343 	mov.w	r3, r3, lsl #5
    2bbc:	f107 0234 	add.w	r2, r7, #52	; 0x34
    2bc0:	18d3      	adds	r3, r2, r3
    2bc2:	781b      	ldrb	r3, [r3, #0]
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d023      	beq.n	2c10 <pathserver+0x148>
    2bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2bca:	ea4f 1343 	mov.w	r3, r3, lsl #5
    2bce:	f107 0234 	add.w	r2, r7, #52	; 0x34
    2bd2:	18d3      	adds	r3, r2, r3
    2bd4:	f107 0208 	add.w	r2, r7, #8
    2bd8:	4610      	mov	r0, r2
    2bda:	4619      	mov	r1, r3
    2bdc:	f002 f868 	bl	4cb0 <strcmp>
    2be0:	4603      	mov	r3, r0
    2be2:	2b00      	cmp	r3, #0
    2be4:	d114      	bne.n	2c10 <pathserver+0x148>
					i += 3; /* 0-2 are reserved */
    2be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2be8:	f103 0303 	add.w	r3, r3, #3
    2bec:	633b      	str	r3, [r7, #48]	; 0x30
					i += TASK_LIMIT; /* FDs reserved for tasks */
    2bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2bf0:	f103 0308 	add.w	r3, r3, #8
    2bf4:	633b      	str	r3, [r7, #48]	; 0x30
					write(replyfd, &i, 4);
    2bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bf8:	4618      	mov	r0, r3
    2bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
    2bfe:	4619      	mov	r1, r3
    2c00:	f04f 0204 	mov.w	r2, #4
    2c04:	f7ff fd80 	bl	2708 <write>
					i = 0;
    2c08:	f04f 0300 	mov.w	r3, #0
    2c0c:	633b      	str	r3, [r7, #48]	; 0x30
					break;
    2c0e:	e008      	b.n	2c22 <pathserver+0x15a>
			mknod(npaths + 3 + TASK_LIMIT, 0, dev);
			npaths++;
		}
		else { /* open */
			/* Search for path */
			for (i = 0; i < npaths; i++) {
    2c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c12:	f103 0301 	add.w	r3, r3, #1
    2c16:	633b      	str	r3, [r7, #48]	; 0x30
    2c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    2c1e:	429a      	cmp	r2, r3
    2c20:	dbc9      	blt.n	2bb6 <pathserver+0xee>
					i = 0;
					break;
				}
			}

			if (i >= npaths) {
    2c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    2c28:	429a      	cmp	r2, r3
    2c2a:	f6ff af76 	blt.w	2b1a <pathserver+0x52>
				i = -1; /* Error: not found */
    2c2e:	f04f 33ff 	mov.w	r3, #4294967295
    2c32:	633b      	str	r3, [r7, #48]	; 0x30
				write(replyfd, &i, 4);
    2c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c36:	4618      	mov	r0, r3
    2c38:	f107 0330 	add.w	r3, r7, #48	; 0x30
    2c3c:	4619      	mov	r1, r3
    2c3e:	f04f 0204 	mov.w	r2, #4
    2c42:	f7ff fd61 	bl	2708 <write>
			}
		}
	}
    2c46:	e768      	b.n	2b1a <pathserver+0x52>

00002c48 <mkfile>:
}

int mkfile(const char *pathname, int mode, int dev)
{
    2c48:	b580      	push	{r7, lr}
    2c4a:	b090      	sub	sp, #64	; 0x40
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	60f8      	str	r0, [r7, #12]
    2c50:	60b9      	str	r1, [r7, #8]
    2c52:	607a      	str	r2, [r7, #4]
	size_t plen = strlen(pathname)+1;
    2c54:	68f8      	ldr	r0, [r7, #12]
    2c56:	f002 f839 	bl	4ccc <strlen>
    2c5a:	4603      	mov	r3, r0
    2c5c:	f103 0301 	add.w	r3, r3, #1
    2c60:	63fb      	str	r3, [r7, #60]	; 0x3c
	char buf[4+4+PATH_MAX+4];
	(void) mode;

	*((unsigned int *)buf) = 0;
    2c62:	f04f 0200 	mov.w	r2, #0
    2c66:	f107 0310 	add.w	r3, r7, #16
    2c6a:	601a      	str	r2, [r3, #0]
	*((unsigned int *)(buf + 4)) = plen;
    2c6c:	f107 0310 	add.w	r3, r7, #16
    2c70:	f103 0304 	add.w	r3, r3, #4
    2c74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2c76:	601a      	str	r2, [r3, #0]
	memcpy(buf + 4 + 4, pathname, plen);
    2c78:	f107 0310 	add.w	r3, r7, #16
    2c7c:	f103 0208 	add.w	r2, r3, #8
    2c80:	68fb      	ldr	r3, [r7, #12]
    2c82:	4611      	mov	r1, r2
    2c84:	461a      	mov	r2, r3
    2c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2c88:	4608      	mov	r0, r1
    2c8a:	4611      	mov	r1, r2
    2c8c:	461a      	mov	r2, r3
    2c8e:	f001 ffc7 	bl	4c20 <memcpy>
	*((int *)(buf + 4 + 4 + plen)) = dev;
    2c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2c94:	f103 0308 	add.w	r3, r3, #8
    2c98:	f107 0210 	add.w	r2, r7, #16
    2c9c:	18d3      	adds	r3, r2, r3
    2c9e:	687a      	ldr	r2, [r7, #4]
    2ca0:	601a      	str	r2, [r3, #0]
	write(PATHSERVER_FD, buf, 4 + 4 + plen + 4);
    2ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ca4:	f103 030c 	add.w	r3, r3, #12
    2ca8:	f04f 000b 	mov.w	r0, #11
    2cac:	f107 0210 	add.w	r2, r7, #16
    2cb0:	4611      	mov	r1, r2
    2cb2:	461a      	mov	r2, r3
    2cb4:	f7ff fd28 	bl	2708 <write>

	return 0;
    2cb8:	f04f 0300 	mov.w	r3, #0
}
    2cbc:	4618      	mov	r0, r3
    2cbe:	f107 0740 	add.w	r7, r7, #64	; 0x40
    2cc2:	46bd      	mov	sp, r7
    2cc4:	bd80      	pop	{r7, pc}
    2cc6:	bf00      	nop

00002cc8 <mkfifo>:

int mkfifo(const char *pathname, int mode)
{
    2cc8:	b580      	push	{r7, lr}
    2cca:	b082      	sub	sp, #8
    2ccc:	af00      	add	r7, sp, #0
    2cce:	6078      	str	r0, [r7, #4]
    2cd0:	6039      	str	r1, [r7, #0]
	mkfile(pathname, mode, S_IFIFO);
    2cd2:	6878      	ldr	r0, [r7, #4]
    2cd4:	6839      	ldr	r1, [r7, #0]
    2cd6:	f04f 0201 	mov.w	r2, #1
    2cda:	f7ff ffb5 	bl	2c48 <mkfile>
	return 0;
    2cde:	f04f 0300 	mov.w	r3, #0
}
    2ce2:	4618      	mov	r0, r3
    2ce4:	f107 0708 	add.w	r7, r7, #8
    2ce8:	46bd      	mov	sp, r7
    2cea:	bd80      	pop	{r7, pc}

00002cec <open>:

int open(const char *pathname, int flags)
{
    2cec:	b580      	push	{r7, lr}
    2cee:	b090      	sub	sp, #64	; 0x40
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	6078      	str	r0, [r7, #4]
    2cf4:	6039      	str	r1, [r7, #0]
	unsigned int replyfd = getpid() + 3;
    2cf6:	f7ff fd00 	bl	26fa <getpid>
    2cfa:	4603      	mov	r3, r0
    2cfc:	f103 0303 	add.w	r3, r3, #3
    2d00:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(pathname) + 1;
    2d02:	6878      	ldr	r0, [r7, #4]
    2d04:	f001 ffe2 	bl	4ccc <strlen>
    2d08:	4603      	mov	r3, r0
    2d0a:	f103 0301 	add.w	r3, r3, #1
    2d0e:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned int fd = -1;
    2d10:	f04f 33ff 	mov.w	r3, #4294967295
    2d14:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4 + 4 + PATH_MAX];
	(void) flags;

	*((unsigned int *)buf) = replyfd;
    2d16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2d18:	f107 030c 	add.w	r3, r7, #12
    2d1c:	601a      	str	r2, [r3, #0]
	*((unsigned int *)(buf + 4)) = plen;
    2d1e:	f107 030c 	add.w	r3, r7, #12
    2d22:	f103 0304 	add.w	r3, r3, #4
    2d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2d28:	601a      	str	r2, [r3, #0]
	memcpy(buf + 4 + 4, pathname, plen);
    2d2a:	f107 030c 	add.w	r3, r7, #12
    2d2e:	f103 0208 	add.w	r2, r3, #8
    2d32:	687b      	ldr	r3, [r7, #4]
    2d34:	4611      	mov	r1, r2
    2d36:	461a      	mov	r2, r3
    2d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2d3a:	4608      	mov	r0, r1
    2d3c:	4611      	mov	r1, r2
    2d3e:	461a      	mov	r2, r3
    2d40:	f001 ff6e 	bl	4c20 <memcpy>
	write(PATHSERVER_FD, buf, 4 + 4 + plen);
    2d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2d46:	f103 0308 	add.w	r3, r3, #8
    2d4a:	f04f 000b 	mov.w	r0, #11
    2d4e:	f107 020c 	add.w	r2, r7, #12
    2d52:	4611      	mov	r1, r2
    2d54:	461a      	mov	r2, r3
    2d56:	f7ff fcd7 	bl	2708 <write>
	read(replyfd, &fd, 4);
    2d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d5c:	4618      	mov	r0, r3
    2d5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    2d62:	4619      	mov	r1, r3
    2d64:	f04f 0204 	mov.w	r2, #4
    2d68:	f7ff fcd5 	bl	2716 <read>

	return fd;
    2d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    2d6e:	4618      	mov	r0, r3
    2d70:	f107 0740 	add.w	r7, r7, #64	; 0x40
    2d74:	46bd      	mov	sp, r7
    2d76:	bd80      	pop	{r7, pc}

00002d78 <mq_open>:

int mq_open(const char *name, int oflag)
{
    2d78:	b580      	push	{r7, lr}
    2d7a:	b082      	sub	sp, #8
    2d7c:	af00      	add	r7, sp, #0
    2d7e:	6078      	str	r0, [r7, #4]
    2d80:	6039      	str	r1, [r7, #0]
	if (oflag & O_CREAT)
    2d82:	683b      	ldr	r3, [r7, #0]
    2d84:	f003 0304 	and.w	r3, r3, #4
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d006      	beq.n	2d9a <mq_open+0x22>
		mkfile(name, 0, S_IMSGQ);
    2d8c:	6878      	ldr	r0, [r7, #4]
    2d8e:	f04f 0100 	mov.w	r1, #0
    2d92:	f04f 0202 	mov.w	r2, #2
    2d96:	f7ff ff57 	bl	2c48 <mkfile>
	return open(name, 0);
    2d9a:	6878      	ldr	r0, [r7, #4]
    2d9c:	f04f 0100 	mov.w	r1, #0
    2da0:	f7ff ffa4 	bl	2cec <open>
    2da4:	4603      	mov	r3, r0
}
    2da6:	4618      	mov	r0, r3
    2da8:	f107 0708 	add.w	r7, r7, #8
    2dac:	46bd      	mov	sp, r7
    2dae:	bd80      	pop	{r7, pc}

00002db0 <serialout>:

void serialout(USART_TypeDef* uart, unsigned int intr)
{
    2db0:	b580      	push	{r7, lr}
    2db2:	b086      	sub	sp, #24
    2db4:	af00      	add	r7, sp, #0
    2db6:	6078      	str	r0, [r7, #4]
    2db8:	6039      	str	r1, [r7, #0]
	int fd;
	char c;
	int doread = 1;
    2dba:	f04f 0301 	mov.w	r3, #1
    2dbe:	617b      	str	r3, [r7, #20]
	mkfifo("/dev/tty0/out", 0);
    2dc0:	f245 0028 	movw	r0, #20520	; 0x5028
    2dc4:	f2c0 0000 	movt	r0, #0
    2dc8:	f04f 0100 	mov.w	r1, #0
    2dcc:	f7ff ff7c 	bl	2cc8 <mkfifo>
	fd = open("/dev/tty0/out", 0);
    2dd0:	f245 0028 	movw	r0, #20520	; 0x5028
    2dd4:	f2c0 0000 	movt	r0, #0
    2dd8:	f04f 0100 	mov.w	r1, #0
    2ddc:	f7ff ff86 	bl	2cec <open>
    2de0:	6138      	str	r0, [r7, #16]

	while (1) {
		if (doread)
    2de2:	697b      	ldr	r3, [r7, #20]
    2de4:	2b00      	cmp	r3, #0
    2de6:	d007      	beq.n	2df8 <serialout+0x48>
			read(fd, &c, 1);
    2de8:	6938      	ldr	r0, [r7, #16]
    2dea:	f107 030f 	add.w	r3, r7, #15
    2dee:	4619      	mov	r1, r3
    2df0:	f04f 0201 	mov.w	r2, #1
    2df4:	f7ff fc8f 	bl	2716 <read>
		doread = 0;
    2df8:	f04f 0300 	mov.w	r3, #0
    2dfc:	617b      	str	r3, [r7, #20]
		if (USART_GetFlagStatus(uart, USART_FLAG_TXE) == SET) {
    2dfe:	6878      	ldr	r0, [r7, #4]
    2e00:	f04f 0180 	mov.w	r1, #128	; 0x80
    2e04:	f7ff f946 	bl	2094 <USART_GetFlagStatus>
    2e08:	4603      	mov	r3, r0
    2e0a:	2b01      	cmp	r3, #1
    2e0c:	d111      	bne.n	2e32 <serialout+0x82>
			USART_SendData(uart, c);
    2e0e:	7bfb      	ldrb	r3, [r7, #15]
    2e10:	6878      	ldr	r0, [r7, #4]
    2e12:	4619      	mov	r1, r3
    2e14:	f7fe ffec 	bl	1df0 <USART_SendData>
			USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    2e18:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    2e1c:	f2c4 0000 	movt	r0, #16384	; 0x4000
    2e20:	f240 7127 	movw	r1, #1831	; 0x727
    2e24:	f04f 0201 	mov.w	r2, #1
    2e28:	f7fe fed8 	bl	1bdc <USART_ITConfig>
			doread = 1;
    2e2c:	f04f 0301 	mov.w	r3, #1
    2e30:	617b      	str	r3, [r7, #20]
		}
		interrupt_wait(intr);
    2e32:	683b      	ldr	r3, [r7, #0]
    2e34:	4618      	mov	r0, r3
    2e36:	f7ff fc75 	bl	2724 <interrupt_wait>
		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    2e3a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    2e3e:	f2c4 0000 	movt	r0, #16384	; 0x4000
    2e42:	f240 7127 	movw	r1, #1831	; 0x727
    2e46:	f04f 0200 	mov.w	r2, #0
    2e4a:	f7fe fec7 	bl	1bdc <USART_ITConfig>
	}
    2e4e:	e7c8      	b.n	2de2 <serialout+0x32>

00002e50 <serialin>:
}

void serialin(USART_TypeDef* uart, unsigned int intr)
{
    2e50:	b580      	push	{r7, lr}
    2e52:	b084      	sub	sp, #16
    2e54:	af00      	add	r7, sp, #0
    2e56:	6078      	str	r0, [r7, #4]
    2e58:	6039      	str	r1, [r7, #0]
	int fd;
	char c;
	mkfifo("/dev/tty0/in", 0);
    2e5a:	f245 0038 	movw	r0, #20536	; 0x5038
    2e5e:	f2c0 0000 	movt	r0, #0
    2e62:	f04f 0100 	mov.w	r1, #0
    2e66:	f7ff ff2f 	bl	2cc8 <mkfifo>
	fd = open("/dev/tty0/in", 0);
    2e6a:	f245 0038 	movw	r0, #20536	; 0x5038
    2e6e:	f2c0 0000 	movt	r0, #0
    2e72:	f04f 0100 	mov.w	r1, #0
    2e76:	f7ff ff39 	bl	2cec <open>
    2e7a:	60f8      	str	r0, [r7, #12]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    2e7c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    2e80:	f2c4 0000 	movt	r0, #16384	; 0x4000
    2e84:	f240 5125 	movw	r1, #1317	; 0x525
    2e88:	f04f 0201 	mov.w	r2, #1
    2e8c:	f7fe fea6 	bl	1bdc <USART_ITConfig>
    2e90:	e000      	b.n	2e94 <serialin+0x44>
		interrupt_wait(intr);
		if (USART_GetFlagStatus(uart, USART_FLAG_RXNE) == SET) {
			c = USART_ReceiveData(uart);
			write(fd, &c, 1);
		}
	}
    2e92:	bf00      	nop
	fd = open("/dev/tty0/in", 0);

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);

	while (1) {
		interrupt_wait(intr);
    2e94:	683b      	ldr	r3, [r7, #0]
    2e96:	4618      	mov	r0, r3
    2e98:	f7ff fc44 	bl	2724 <interrupt_wait>
		if (USART_GetFlagStatus(uart, USART_FLAG_RXNE) == SET) {
    2e9c:	6878      	ldr	r0, [r7, #4]
    2e9e:	f04f 0120 	mov.w	r1, #32
    2ea2:	f7ff f8f7 	bl	2094 <USART_GetFlagStatus>
    2ea6:	4603      	mov	r3, r0
    2ea8:	2b01      	cmp	r3, #1
    2eaa:	d1f2      	bne.n	2e92 <serialin+0x42>
			c = USART_ReceiveData(uart);
    2eac:	6878      	ldr	r0, [r7, #4]
    2eae:	f7fe ffb3 	bl	1e18 <USART_ReceiveData>
    2eb2:	4603      	mov	r3, r0
    2eb4:	b2db      	uxtb	r3, r3
    2eb6:	72fb      	strb	r3, [r7, #11]
			write(fd, &c, 1);
    2eb8:	68f8      	ldr	r0, [r7, #12]
    2eba:	f107 030b 	add.w	r3, r7, #11
    2ebe:	4619      	mov	r1, r3
    2ec0:	f04f 0201 	mov.w	r2, #1
    2ec4:	f7ff fc20 	bl	2708 <write>
		}
	}
    2ec8:	e7e3      	b.n	2e92 <serialin+0x42>
    2eca:	bf00      	nop

00002ecc <greeting>:
}

void greeting()
{
    2ecc:	b580      	push	{r7, lr}
    2ece:	b082      	sub	sp, #8
    2ed0:	af00      	add	r7, sp, #0
	int fdout = open("/dev/tty0/out", 0);
    2ed2:	f245 0028 	movw	r0, #20520	; 0x5028
    2ed6:	f2c0 0000 	movt	r0, #0
    2eda:	f04f 0100 	mov.w	r1, #0
    2ede:	f7ff ff05 	bl	2cec <open>
    2ee2:	6038      	str	r0, [r7, #0]
	char *string = "Hello, World!\n";
    2ee4:	f245 0348 	movw	r3, #20552	; 0x5048
    2ee8:	f2c0 0300 	movt	r3, #0
    2eec:	607b      	str	r3, [r7, #4]
	while (*string) {
    2eee:	e009      	b.n	2f04 <greeting+0x38>
		write(fdout, string, 1);
    2ef0:	6838      	ldr	r0, [r7, #0]
    2ef2:	6879      	ldr	r1, [r7, #4]
    2ef4:	f04f 0201 	mov.w	r2, #1
    2ef8:	f7ff fc06 	bl	2708 <write>
		string++;
    2efc:	687b      	ldr	r3, [r7, #4]
    2efe:	f103 0301 	add.w	r3, r3, #1
    2f02:	607b      	str	r3, [r7, #4]

void greeting()
{
	int fdout = open("/dev/tty0/out", 0);
	char *string = "Hello, World!\n";
	while (*string) {
    2f04:	687b      	ldr	r3, [r7, #4]
    2f06:	781b      	ldrb	r3, [r3, #0]
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d1f1      	bne.n	2ef0 <greeting+0x24>
		write(fdout, string, 1);
		string++;
	}
}
    2f0c:	f107 0708 	add.w	r7, r7, #8
    2f10:	46bd      	mov	sp, r7
    2f12:	bd80      	pop	{r7, pc}

00002f14 <echo>:

void echo()
{
    2f14:	b580      	push	{r7, lr}
    2f16:	b084      	sub	sp, #16
    2f18:	af00      	add	r7, sp, #0
	int fdout, fdin;
	char c;
	fdout = open("/dev/tty0/out", 0);
    2f1a:	f245 0028 	movw	r0, #20520	; 0x5028
    2f1e:	f2c0 0000 	movt	r0, #0
    2f22:	f04f 0100 	mov.w	r1, #0
    2f26:	f7ff fee1 	bl	2cec <open>
    2f2a:	60f8      	str	r0, [r7, #12]
	fdin = open("/dev/tty0/in", 0);
    2f2c:	f245 0038 	movw	r0, #20536	; 0x5038
    2f30:	f2c0 0000 	movt	r0, #0
    2f34:	f04f 0100 	mov.w	r1, #0
    2f38:	f7ff fed8 	bl	2cec <open>
    2f3c:	60b8      	str	r0, [r7, #8]

	while (1) {
		read(fdin, &c, 1);
    2f3e:	68b8      	ldr	r0, [r7, #8]
    2f40:	f107 0307 	add.w	r3, r7, #7
    2f44:	4619      	mov	r1, r3
    2f46:	f04f 0201 	mov.w	r2, #1
    2f4a:	f7ff fbe4 	bl	2716 <read>
		write(fdout, &c, 1);
    2f4e:	68f8      	ldr	r0, [r7, #12]
    2f50:	f107 0307 	add.w	r3, r7, #7
    2f54:	4619      	mov	r1, r3
    2f56:	f04f 0201 	mov.w	r2, #1
    2f5a:	f7ff fbd5 	bl	2708 <write>
	}
    2f5e:	e7ee      	b.n	2f3e <echo+0x2a>

00002f60 <rs232_xmit_msg_task>:
}

void rs232_xmit_msg_task()
{
    2f60:	b580      	push	{r7, lr}
    2f62:	b09c      	sub	sp, #112	; 0x70
    2f64:	af00      	add	r7, sp, #0
	int fdout, fdin;
	char str[100];
	int curr_char;
	fdout = open("/dev/tty0/out", 0);
    2f66:	f245 0028 	movw	r0, #20520	; 0x5028
    2f6a:	f2c0 0000 	movt	r0, #0
    2f6e:	f04f 0100 	mov.w	r1, #0
    2f72:	f7ff febb 	bl	2cec <open>
    2f76:	66b8      	str	r0, [r7, #104]	; 0x68
	fdin = mq_open("/tmp/mqueue/out", O_CREAT);
    2f78:	f245 0058 	movw	r0, #20568	; 0x5058
    2f7c:	f2c0 0000 	movt	r0, #0
    2f80:	f04f 0104 	mov.w	r1, #4
    2f84:	f7ff fef8 	bl	2d78 <mq_open>
    2f88:	6678      	str	r0, [r7, #100]	; 0x64
	setpriority(0, PRIORITY_DEFAULT - 2);
    2f8a:	f04f 0000 	mov.w	r0, #0
    2f8e:	f04f 0112 	mov.w	r1, #18
    2f92:	f7ff fbd5 	bl	2740 <setpriority>

	while (1) {
		/* Read from the queue.  Keep trying until a message is
		 * received.  This will block for a period of time (specified
		 * by portMAX_DELAY). */
		read(fdin, str, 100);
    2f96:	6e78      	ldr	r0, [r7, #100]	; 0x64
    2f98:	463b      	mov	r3, r7
    2f9a:	4619      	mov	r1, r3
    2f9c:	f04f 0264 	mov.w	r2, #100	; 0x64
    2fa0:	f7ff fbb9 	bl	2716 <read>

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
    2fa4:	f04f 0300 	mov.w	r3, #0
    2fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (str[curr_char] != '\0') {
    2faa:	e00c      	b.n	2fc6 <rs232_xmit_msg_task+0x66>
			write(fdout, &str[curr_char], 1);
    2fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    2fae:	463a      	mov	r2, r7
    2fb0:	18d3      	adds	r3, r2, r3
    2fb2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    2fb4:	4619      	mov	r1, r3
    2fb6:	f04f 0201 	mov.w	r2, #1
    2fba:	f7ff fba5 	bl	2708 <write>
			curr_char++;
    2fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    2fc0:	f103 0301 	add.w	r3, r3, #1
    2fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
		 * by portMAX_DELAY). */
		read(fdin, str, 100);

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
		while (str[curr_char] != '\0') {
    2fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    2fc8:	463a      	mov	r2, r7
    2fca:	18d3      	adds	r3, r2, r3
    2fcc:	781b      	ldrb	r3, [r3, #0]
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d1ec      	bne.n	2fac <rs232_xmit_msg_task+0x4c>
			write(fdout, &str[curr_char], 1);
			curr_char++;
		}
	}
    2fd2:	e7e0      	b.n	2f96 <rs232_xmit_msg_task+0x36>

00002fd4 <queue_str_task>:
}

void queue_str_task(const char *str, int delay)
{
    2fd4:	b580      	push	{r7, lr}
    2fd6:	b084      	sub	sp, #16
    2fd8:	af00      	add	r7, sp, #0
    2fda:	6078      	str	r0, [r7, #4]
    2fdc:	6039      	str	r1, [r7, #0]
	int fdout = mq_open("/tmp/mqueue/out", 0);
    2fde:	f245 0058 	movw	r0, #20568	; 0x5058
    2fe2:	f2c0 0000 	movt	r0, #0
    2fe6:	f04f 0100 	mov.w	r1, #0
    2fea:	f7ff fec5 	bl	2d78 <mq_open>
    2fee:	60f8      	str	r0, [r7, #12]
	int msg_len = strlen(str) + 1;
    2ff0:	6878      	ldr	r0, [r7, #4]
    2ff2:	f001 fe6b 	bl	4ccc <strlen>
    2ff6:	4603      	mov	r3, r0
    2ff8:	f103 0301 	add.w	r3, r3, #1
    2ffc:	60bb      	str	r3, [r7, #8]

	while (1) {
		/* Post the message.  Keep on trying until it is successful. */
		write(fdout, str, msg_len);
    2ffe:	68bb      	ldr	r3, [r7, #8]
    3000:	68f8      	ldr	r0, [r7, #12]
    3002:	6879      	ldr	r1, [r7, #4]
    3004:	461a      	mov	r2, r3
    3006:	f7ff fb7f 	bl	2708 <write>

		/* Wait. */
		sleep(delay);
    300a:	683b      	ldr	r3, [r7, #0]
    300c:	4618      	mov	r0, r3
    300e:	f7ff fba5 	bl	275c <sleep>
	}
    3012:	e7f4      	b.n	2ffe <queue_str_task+0x2a>

00003014 <queue_str_task1>:
}

void queue_str_task1()
{
    3014:	b580      	push	{r7, lr}
    3016:	af00      	add	r7, sp, #0
	queue_str_task("Hello 1\n", 200);
    3018:	f245 0068 	movw	r0, #20584	; 0x5068
    301c:	f2c0 0000 	movt	r0, #0
    3020:	f04f 01c8 	mov.w	r1, #200	; 0xc8
    3024:	f7ff ffd6 	bl	2fd4 <queue_str_task>
}
    3028:	bd80      	pop	{r7, pc}
    302a:	bf00      	nop

0000302c <queue_str_task2>:

void queue_str_task2()
{
    302c:	b580      	push	{r7, lr}
    302e:	af00      	add	r7, sp, #0
	queue_str_task("Hello 2\n", 50);
    3030:	f245 0074 	movw	r0, #20596	; 0x5074
    3034:	f2c0 0000 	movt	r0, #0
    3038:	f04f 0132 	mov.w	r1, #50	; 0x32
    303c:	f7ff ffca 	bl	2fd4 <queue_str_task>
}
    3040:	bd80      	pop	{r7, pc}
    3042:	bf00      	nop

00003044 <get_task_status>:

char *get_task_status(int status)
{
    3044:	b480      	push	{r7}
    3046:	b083      	sub	sp, #12
    3048:	af00      	add	r7, sp, #0
    304a:	6078      	str	r0, [r7, #4]
	switch(status) {
    304c:	687b      	ldr	r3, [r7, #4]
    304e:	2b04      	cmp	r3, #4
    3050:	d825      	bhi.n	309e <get_task_status+0x5a>
    3052:	a201      	add	r2, pc, #4	; (adr r2, 3058 <get_task_status+0x14>)
    3054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3058:	0000306d 	.word	0x0000306d
    305c:	00003077 	.word	0x00003077
    3060:	00003081 	.word	0x00003081
    3064:	0000308b 	.word	0x0000308b
    3068:	00003095 	.word	0x00003095
		case TASK_READY:
			return "Ready";
    306c:	f245 0380 	movw	r3, #20608	; 0x5080
    3070:	f2c0 0300 	movt	r3, #0
    3074:	e017      	b.n	30a6 <get_task_status+0x62>
		case TASK_WAIT_READ:
			return "Wait Read";
    3076:	f245 0388 	movw	r3, #20616	; 0x5088
    307a:	f2c0 0300 	movt	r3, #0
    307e:	e012      	b.n	30a6 <get_task_status+0x62>
		case TASK_WAIT_WRITE:
			return "Wait Write";
    3080:	f245 0394 	movw	r3, #20628	; 0x5094
    3084:	f2c0 0300 	movt	r3, #0
    3088:	e00d      	b.n	30a6 <get_task_status+0x62>
		case TASK_WAIT_INTR:
			return "Wait Intr";
    308a:	f245 03a0 	movw	r3, #20640	; 0x50a0
    308e:	f2c0 0300 	movt	r3, #0
    3092:	e008      	b.n	30a6 <get_task_status+0x62>
		case TASK_WAIT_TIME:
			return "Wait Time";
    3094:	f245 03ac 	movw	r3, #20652	; 0x50ac
    3098:	f2c0 0300 	movt	r3, #0
    309c:	e003      	b.n	30a6 <get_task_status+0x62>
		default:
			return "Unknown status";
    309e:	f245 03b8 	movw	r3, #20664	; 0x50b8
    30a2:	f2c0 0300 	movt	r3, #0
	}
}
    30a6:	4618      	mov	r0, r3
    30a8:	f107 070c 	add.w	r7, r7, #12
    30ac:	46bd      	mov	sp, r7
    30ae:	bc80      	pop	{r7}
    30b0:	4770      	bx	lr
    30b2:	bf00      	nop

000030b4 <proc_cmd>:

void proc_cmd(char *cmd)
{
    30b4:	b590      	push	{r4, r7, lr}
    30b6:	b089      	sub	sp, #36	; 0x24
    30b8:	af00      	add	r7, sp, #0
    30ba:	6078      	str	r0, [r7, #4]
	char tmp[16];
	int i;

	if(!strcmp(cmd, "ps")) {
    30bc:	6878      	ldr	r0, [r7, #4]
    30be:	f245 01c8 	movw	r1, #20680	; 0x50c8
    30c2:	f2c0 0100 	movt	r1, #0
    30c6:	f001 fdf3 	bl	4cb0 <strcmp>
    30ca:	4603      	mov	r3, r0
    30cc:	2b00      	cmp	r3, #0
    30ce:	d178      	bne.n	31c2 <proc_cmd+0x10e>
	    	puts("Task list : " NEWLINE "\0");
    30d0:	f245 00cc 	movw	r0, #20684	; 0x50cc
    30d4:	f2c0 0000 	movt	r0, #0
    30d8:	f001 fe6a 	bl	4db0 <puts>
	    	for(i = 0; i < task_count; i++) {
    30dc:	f04f 0300 	mov.w	r3, #0
    30e0:	61fb      	str	r3, [r7, #28]
    30e2:	e065      	b.n	31b0 <proc_cmd+0xfc>
	    	    	puts("PID -> ");
    30e4:	f245 00dc 	movw	r0, #20700	; 0x50dc
    30e8:	f2c0 0000 	movt	r0, #0
    30ec:	f001 fe60 	bl	4db0 <puts>
	    	    	int2str(tasks[i].pid, tmp);
    30f0:	f240 0228 	movw	r2, #40	; 0x28
    30f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30f8:	69f9      	ldr	r1, [r7, #28]
    30fa:	460b      	mov	r3, r1
    30fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3100:	185b      	adds	r3, r3, r1
    3102:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3106:	18d3      	adds	r3, r2, r3
    3108:	f103 0304 	add.w	r3, r3, #4
    310c:	681b      	ldr	r3, [r3, #0]
    310e:	4618      	mov	r0, r3
    3110:	f107 030c 	add.w	r3, r7, #12
    3114:	4619      	mov	r1, r3
    3116:	f001 fe67 	bl	4de8 <int2str>
			puts(tmp);
    311a:	f107 030c 	add.w	r3, r7, #12
    311e:	4618      	mov	r0, r3
    3120:	f001 fe46 	bl	4db0 <puts>

			puts(", Status -> ");
    3124:	f245 00e4 	movw	r0, #20708	; 0x50e4
    3128:	f2c0 0000 	movt	r0, #0
    312c:	f001 fe40 	bl	4db0 <puts>
			puts(get_task_status(tasks[i].status));
    3130:	f240 0228 	movw	r2, #40	; 0x28
    3134:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3138:	69f9      	ldr	r1, [r7, #28]
    313a:	460b      	mov	r3, r1
    313c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3140:	185b      	adds	r3, r3, r1
    3142:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3146:	18d3      	adds	r3, r2, r3
    3148:	f103 0308 	add.w	r3, r3, #8
    314c:	681b      	ldr	r3, [r3, #0]
    314e:	4618      	mov	r0, r3
    3150:	f7ff ff78 	bl	3044 <get_task_status>
    3154:	4603      	mov	r3, r0
    3156:	4618      	mov	r0, r3
    3158:	f001 fe2a 	bl	4db0 <puts>

			puts(", Priority -> ");
    315c:	f245 00f4 	movw	r0, #20724	; 0x50f4
    3160:	f2c0 0000 	movt	r0, #0
    3164:	f001 fe24 	bl	4db0 <puts>
			int2str(tasks[i].priority, tmp);
    3168:	f240 0228 	movw	r2, #40	; 0x28
    316c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3170:	69f9      	ldr	r1, [r7, #28]
    3172:	460b      	mov	r3, r1
    3174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3178:	185b      	adds	r3, r3, r1
    317a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    317e:	18d3      	adds	r3, r2, r3
    3180:	f103 030c 	add.w	r3, r3, #12
    3184:	681b      	ldr	r3, [r3, #0]
    3186:	4618      	mov	r0, r3
    3188:	f107 030c 	add.w	r3, r7, #12
    318c:	4619      	mov	r1, r3
    318e:	f001 fe2b 	bl	4de8 <int2str>
			puts(tmp);
    3192:	f107 030c 	add.w	r3, r7, #12
    3196:	4618      	mov	r0, r3
    3198:	f001 fe0a 	bl	4db0 <puts>

			puts(NEWLINE "\0");
    319c:	f245 1004 	movw	r0, #20740	; 0x5104
    31a0:	f2c0 0000 	movt	r0, #0
    31a4:	f001 fe04 	bl	4db0 <puts>
	char tmp[16];
	int i;

	if(!strcmp(cmd, "ps")) {
	    	puts("Task list : " NEWLINE "\0");
	    	for(i = 0; i < task_count; i++) {
    31a8:	69fb      	ldr	r3, [r7, #28]
    31aa:	f103 0301 	add.w	r3, r3, #1
    31ae:	61fb      	str	r3, [r7, #28]
    31b0:	69fa      	ldr	r2, [r7, #28]
    31b2:	f240 03e8 	movw	r3, #232	; 0xe8
    31b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	429a      	cmp	r2, r3
    31be:	d391      	bcc.n	30e4 <proc_cmd+0x30>
    31c0:	e087      	b.n	32d2 <proc_cmd+0x21e>
			puts(tmp);

			puts(NEWLINE "\0");
		}
	}
	else if(!strncmp(cmd, "echo", 4) && (strlen(cmd) == 4) || cmd[4] == ' ') {
    31c2:	6878      	ldr	r0, [r7, #4]
    31c4:	f245 1108 	movw	r1, #20744	; 0x5108
    31c8:	f2c0 0100 	movt	r1, #0
    31cc:	f04f 0204 	mov.w	r2, #4
    31d0:	f001 fd88 	bl	4ce4 <strncmp>
    31d4:	4603      	mov	r3, r0
    31d6:	2b00      	cmp	r3, #0
    31d8:	d105      	bne.n	31e6 <proc_cmd+0x132>
    31da:	6878      	ldr	r0, [r7, #4]
    31dc:	f001 fd76 	bl	4ccc <strlen>
    31e0:	4603      	mov	r3, r0
    31e2:	2b04      	cmp	r3, #4
    31e4:	d005      	beq.n	31f2 <proc_cmd+0x13e>
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	f103 0304 	add.w	r3, r3, #4
    31ec:	781b      	ldrb	r3, [r3, #0]
    31ee:	2b20      	cmp	r3, #32
    31f0:	d129      	bne.n	3246 <proc_cmd+0x192>
		if(strlen(cmd) == 4) {
    31f2:	6878      	ldr	r0, [r7, #4]
    31f4:	f001 fd6a 	bl	4ccc <strlen>
    31f8:	4603      	mov	r3, r0
    31fa:	2b04      	cmp	r3, #4
    31fc:	d106      	bne.n	320c <proc_cmd+0x158>
			puts(" \0");
    31fe:	f245 1010 	movw	r0, #20752	; 0x5110
    3202:	f2c0 0000 	movt	r0, #0
    3206:	f001 fdd3 	bl	4db0 <puts>

			puts(NEWLINE "\0");
		}
	}
	else if(!strncmp(cmd, "echo", 4) && (strlen(cmd) == 4) || cmd[4] == ' ') {
		if(strlen(cmd) == 4) {
    320a:	e062      	b.n	32d2 <proc_cmd+0x21e>
			puts(" \0");
		}
		else {
			for(i = 5; i < strlen(cmd); i++) {
    320c:	f04f 0305 	mov.w	r3, #5
    3210:	61fb      	str	r3, [r7, #28]
    3212:	e010      	b.n	3236 <proc_cmd+0x182>
				tmp[0] = cmd[i];
    3214:	69fb      	ldr	r3, [r7, #28]
    3216:	687a      	ldr	r2, [r7, #4]
    3218:	18d3      	adds	r3, r2, r3
    321a:	781b      	ldrb	r3, [r3, #0]
    321c:	733b      	strb	r3, [r7, #12]
				tmp[1] = '\0';
    321e:	f04f 0300 	mov.w	r3, #0
    3222:	737b      	strb	r3, [r7, #13]
				puts(tmp);
    3224:	f107 030c 	add.w	r3, r7, #12
    3228:	4618      	mov	r0, r3
    322a:	f001 fdc1 	bl	4db0 <puts>
	else if(!strncmp(cmd, "echo", 4) && (strlen(cmd) == 4) || cmd[4] == ' ') {
		if(strlen(cmd) == 4) {
			puts(" \0");
		}
		else {
			for(i = 5; i < strlen(cmd); i++) {
    322e:	69fb      	ldr	r3, [r7, #28]
    3230:	f103 0301 	add.w	r3, r3, #1
    3234:	61fb      	str	r3, [r7, #28]
    3236:	69fc      	ldr	r4, [r7, #28]
    3238:	6878      	ldr	r0, [r7, #4]
    323a:	f001 fd47 	bl	4ccc <strlen>
    323e:	4603      	mov	r3, r0
    3240:	429c      	cmp	r4, r3
    3242:	d3e7      	bcc.n	3214 <proc_cmd+0x160>

			puts(NEWLINE "\0");
		}
	}
	else if(!strncmp(cmd, "echo", 4) && (strlen(cmd) == 4) || cmd[4] == ' ') {
		if(strlen(cmd) == 4) {
    3244:	e045      	b.n	32d2 <proc_cmd+0x21e>
				tmp[1] = '\0';
				puts(tmp);
			}
		}
	}
	else if(!strcmp(cmd, "hello")) {
    3246:	6878      	ldr	r0, [r7, #4]
    3248:	f245 1114 	movw	r1, #20756	; 0x5114
    324c:	f2c0 0100 	movt	r1, #0
    3250:	f001 fd2e 	bl	4cb0 <strcmp>
    3254:	4603      	mov	r3, r0
    3256:	2b00      	cmp	r3, #0
    3258:	d106      	bne.n	3268 <proc_cmd+0x1b4>
		puts("Hello! nice to meet you ^_^" NEWLINE "\0");
    325a:	f245 101c 	movw	r0, #20764	; 0x511c
    325e:	f2c0 0000 	movt	r0, #0
    3262:	f001 fda5 	bl	4db0 <puts>
    3266:	e034      	b.n	32d2 <proc_cmd+0x21e>
	}
	else if(!strcmp(cmd, "help")) {
    3268:	6878      	ldr	r0, [r7, #4]
    326a:	f245 113c 	movw	r1, #20796	; 0x513c
    326e:	f2c0 0100 	movt	r1, #0
    3272:	f001 fd1d 	bl	4cb0 <strcmp>
    3276:	4603      	mov	r3, r0
    3278:	2b00      	cmp	r3, #0
    327a:	d124      	bne.n	32c6 <proc_cmd+0x212>
		puts("You can use 4 command in zxc2694's shell." NEWLINE "\0");
    327c:	f245 1044 	movw	r0, #20804	; 0x5144
    3280:	f2c0 0000 	movt	r0, #0
    3284:	f001 fd94 	bl	4db0 <puts>
		puts(" "NEWLINE "\0");
    3288:	f245 1074 	movw	r0, #20852	; 0x5174
    328c:	f2c0 0000 	movt	r0, #0
    3290:	f001 fd8e 	bl	4db0 <puts>
		puts("ps    - List all tasks" NEWLINE "\0");
    3294:	f245 107c 	movw	r0, #20860	; 0x517c
    3298:	f2c0 0000 	movt	r0, #0
    329c:	f001 fd88 	bl	4db0 <puts>
		puts("echo  - Output message" NEWLINE "\0");
    32a0:	f245 1098 	movw	r0, #20888	; 0x5198
    32a4:	f2c0 0000 	movt	r0, #0
    32a8:	f001 fd82 	bl	4db0 <puts>
		puts("hello - Show welcome message" NEWLINE "\0");
    32ac:	f245 10b4 	movw	r0, #20916	; 0x51b4
    32b0:	f2c0 0000 	movt	r0, #0
    32b4:	f001 fd7c 	bl	4db0 <puts>
		puts("help  - Show this help table" NEWLINE "\0");
    32b8:	f245 10d4 	movw	r0, #20948	; 0x51d4
    32bc:	f2c0 0000 	movt	r0, #0
    32c0:	f001 fd76 	bl	4db0 <puts>
    32c4:	e005      	b.n	32d2 <proc_cmd+0x21e>
	}
	else {
	    puts("Command not found" NEWLINE "\0");
    32c6:	f245 10f4 	movw	r0, #20980	; 0x51f4
    32ca:	f2c0 0000 	movt	r0, #0
    32ce:	f001 fd6f 	bl	4db0 <puts>
	}
}
    32d2:	f107 0724 	add.w	r7, r7, #36	; 0x24
    32d6:	46bd      	mov	sp, r7
    32d8:	bd90      	pop	{r4, r7, pc}
    32da:	bf00      	nop

000032dc <MYserial_readwrite_task>:

void MYserial_readwrite_task()
{
    32dc:	b580      	push	{r7, lr}
    32de:	b0a2      	sub	sp, #136	; 0x88
    32e0:	af00      	add	r7, sp, #0
	char str[100];
	char ch;
	int curr_char;
	int done;

	fdout = mq_open("/tmp/mqueue/out", 0);
    32e2:	f245 0058 	movw	r0, #20568	; 0x5058
    32e6:	f2c0 0000 	movt	r0, #0
    32ea:	f04f 0100 	mov.w	r1, #0
    32ee:	f7ff fd43 	bl	2d78 <mq_open>
    32f2:	67f8      	str	r0, [r7, #124]	; 0x7c
	fdin = open("/dev/tty0/in", 0);
    32f4:	f245 0038 	movw	r0, #20536	; 0x5038
    32f8:	f2c0 0000 	movt	r0, #0
    32fc:	f04f 0100 	mov.w	r1, #0
    3300:	f7ff fcf4 	bl	2cec <open>
    3304:	67b8      	str	r0, [r7, #120]	; 0x78

	// Prepare prompt hint string
	char *prompt_hint = "zxc2694_shell $ \0";
    3306:	f245 230c 	movw	r3, #21004	; 0x520c
    330a:	f2c0 0300 	movt	r3, #0
    330e:	677b      	str	r3, [r7, #116]	; 0x74

	while (1) {
	    	// Prompt hint
		puts(prompt_hint);
    3310:	6f78      	ldr	r0, [r7, #116]	; 0x74
    3312:	f001 fd4d 	bl	4db0 <puts>

		curr_char = 0;
    3316:	f04f 0300 	mov.w	r3, #0
    331a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		done = 0;
    331e:	f04f 0300 	mov.w	r3, #0
    3322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		do {
			/* Receive a byte from the RS232 port (this call will
			 * block). */
			read(fdin, &ch, 1);
    3326:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    3328:	f107 030f 	add.w	r3, r7, #15
    332c:	4619      	mov	r1, r3
    332e:	f04f 0201 	mov.w	r2, #1
    3332:	f7ff f9f0 	bl	2716 <read>

			/* If the byte is an end-of-line type character, then
			 * finish the string and inidcate we are done.
			 */
			if (curr_char >= 98 || (ch == '\r') || (ch == '\n')) {
    3336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    333a:	2b61      	cmp	r3, #97	; 0x61
    333c:	dc05      	bgt.n	334a <MYserial_readwrite_task+0x6e>
    333e:	7bfb      	ldrb	r3, [r7, #15]
    3340:	2b0d      	cmp	r3, #13
    3342:	d002      	beq.n	334a <MYserial_readwrite_task+0x6e>
    3344:	7bfb      	ldrb	r3, [r7, #15]
    3346:	2b0a      	cmp	r3, #10
    3348:	d112      	bne.n	3370 <MYserial_readwrite_task+0x94>
				str[curr_char++] = '\0';
    334a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    334e:	f107 0210 	add.w	r2, r7, #16
    3352:	18d3      	adds	r3, r2, r3
    3354:	f04f 0200 	mov.w	r2, #0
    3358:	701a      	strb	r2, [r3, #0]
    335a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    335e:	f103 0301 	add.w	r3, r3, #1
    3362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				done = -1;
    3366:	f04f 33ff 	mov.w	r3, #4294967295
    336a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    336e:	e07f      	b.n	3470 <MYserial_readwrite_task+0x194>
				/* Otherwise, add the character to the
				 * response string. */
			}
			else if(ch == 27) {
    3370:	7bfb      	ldrb	r3, [r7, #15]
    3372:	2b1b      	cmp	r3, #27
    3374:	d14f      	bne.n	3416 <MYserial_readwrite_task+0x13a>
				read(fdin, &ch, 1);
    3376:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    3378:	f107 030f 	add.w	r3, r7, #15
    337c:	4619      	mov	r1, r3
    337e:	f04f 0201 	mov.w	r2, #1
    3382:	f7ff f9c8 	bl	2716 <read>
				read(fdin, &ch, 1);
    3386:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    3388:	f107 030f 	add.w	r3, r7, #15
    338c:	4619      	mov	r1, r3
    338e:	f04f 0201 	mov.w	r2, #1
    3392:	f7ff f9c0 	bl	2716 <read>
				char tmpesc[4];
				tmpesc[0] = 27;
    3396:	f04f 031b 	mov.w	r3, #27
    339a:	723b      	strb	r3, [r7, #8]
				tmpesc[3] = '\0';
    339c:	f04f 0300 	mov.w	r3, #0
    33a0:	72fb      	strb	r3, [r7, #11]
				switch(ch) {
    33a2:	7bfb      	ldrb	r3, [r7, #15]
    33a4:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
    33a8:	2b03      	cmp	r3, #3
    33aa:	d860      	bhi.n	346e <MYserial_readwrite_task+0x192>
    33ac:	a201      	add	r2, pc, #4	; (adr r2, 33b4 <MYserial_readwrite_task+0xd8>)
    33ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    33b2:	bf00      	nop
    33b4:	0000346f 	.word	0x0000346f
    33b8:	0000346f 	.word	0x0000346f
    33bc:	000033c5 	.word	0x000033c5
    33c0:	000033eb 	.word	0x000033eb
					case 65: // Up key
					case 66: // Down key
						break;
					case 67: // Right key
						tmpesc[1] = '[';
    33c4:	f04f 035b 	mov.w	r3, #91	; 0x5b
    33c8:	727b      	strb	r3, [r7, #9]
						tmpesc[2] = 'C';
    33ca:	f04f 0343 	mov.w	r3, #67	; 0x43
    33ce:	72bb      	strb	r3, [r7, #10]
						puts(tmpesc);
    33d0:	f107 0308 	add.w	r3, r7, #8
    33d4:	4618      	mov	r0, r3
    33d6:	f001 fceb 	bl	4db0 <puts>
						curr_char++;
    33da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    33de:	f103 0301 	add.w	r3, r3, #1
    33e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						break;
    33e6:	bf00      	nop
    33e8:	e042      	b.n	3470 <MYserial_readwrite_task+0x194>
					case 68: // Left key
						if(curr_char > 0) {
    33ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    33ee:	2b00      	cmp	r3, #0
    33f0:	dd3d      	ble.n	346e <MYserial_readwrite_task+0x192>
							tmpesc[1] = '[';
    33f2:	f04f 035b 	mov.w	r3, #91	; 0x5b
    33f6:	727b      	strb	r3, [r7, #9]
							tmpesc[2] = 'D';
    33f8:	f04f 0344 	mov.w	r3, #68	; 0x44
    33fc:	72bb      	strb	r3, [r7, #10]
							puts(tmpesc);
    33fe:	f107 0308 	add.w	r3, r7, #8
    3402:	4618      	mov	r0, r3
    3404:	f001 fcd4 	bl	4db0 <puts>
							curr_char--;
    3408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    340c:	f103 33ff 	add.w	r3, r3, #4294967295
    3410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						}
						break;
    3414:	e02b      	b.n	346e <MYserial_readwrite_task+0x192>
				}
			}
			else if(ch == 127) {
    3416:	7bfb      	ldrb	r3, [r7, #15]
    3418:	2b7f      	cmp	r3, #127	; 0x7f
    341a:	d110      	bne.n	343e <MYserial_readwrite_task+0x162>
				if(curr_char > 0) {
    341c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    3420:	2b00      	cmp	r3, #0
    3422:	dd25      	ble.n	3470 <MYserial_readwrite_task+0x194>
					puts("\b \b\0");
    3424:	f245 2020 	movw	r0, #21024	; 0x5220
    3428:	f2c0 0000 	movt	r0, #0
    342c:	f001 fcc0 	bl	4db0 <puts>
					curr_char--;
    3430:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    3434:	f103 33ff 	add.w	r3, r3, #4294967295
    3438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    343c:	e018      	b.n	3470 <MYserial_readwrite_task+0x194>
				}
			}
			else {
				str[curr_char++] = ch;
    343e:	7bfa      	ldrb	r2, [r7, #15]
    3440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    3444:	f107 0110 	add.w	r1, r7, #16
    3448:	18cb      	adds	r3, r1, r3
    344a:	701a      	strb	r2, [r3, #0]
    344c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    3450:	f103 0301 	add.w	r3, r3, #1
    3454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				char tmpstr[2];
				tmpstr[0] = ch;
    3458:	7bfb      	ldrb	r3, [r7, #15]
    345a:	713b      	strb	r3, [r7, #4]
				tmpstr[1] = '\0';
    345c:	f04f 0300 	mov.w	r3, #0
    3460:	717b      	strb	r3, [r7, #5]
				puts(tmpstr);
    3462:	f107 0304 	add.w	r3, r7, #4
    3466:	4618      	mov	r0, r3
    3468:	f001 fca2 	bl	4db0 <puts>
    346c:	e000      	b.n	3470 <MYserial_readwrite_task+0x194>
							tmpesc[1] = '[';
							tmpesc[2] = 'D';
							puts(tmpesc);
							curr_char--;
						}
						break;
    346e:	bf00      	nop
				tmpstr[0] = ch;
				tmpstr[1] = '\0';
				puts(tmpstr);
			}
			// Output thr current input character
		} while (!done);
    3470:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3474:	2b00      	cmp	r3, #0
    3476:	f43f af56 	beq.w	3326 <MYserial_readwrite_task+0x4a>

		/* Once we are done building the response string, queue the
		 * response to be sent to the RS232 port.
		 */
	    	puts(NEWLINE "\0");
    347a:	f245 1004 	movw	r0, #20740	; 0x5104
    347e:	f2c0 0000 	movt	r0, #0
    3482:	f001 fc95 	bl	4db0 <puts>
		proc_cmd(str);
    3486:	f107 0310 	add.w	r3, r7, #16
    348a:	4618      	mov	r0, r3
    348c:	f7ff fe12 	bl	30b4 <proc_cmd>
		puts(NEWLINE "\0");
    3490:	f245 1004 	movw	r0, #20740	; 0x5104
    3494:	f2c0 0000 	movt	r0, #0
    3498:	f001 fc8a 	bl	4db0 <puts>
	}
    349c:	e738      	b.n	3310 <MYserial_readwrite_task+0x34>
    349e:	bf00      	nop

000034a0 <first>:
}

void first()
{
    34a0:	b580      	push	{r7, lr}
    34a2:	af00      	add	r7, sp, #0
	setpriority(0, 0);
    34a4:	f04f 0000 	mov.w	r0, #0
    34a8:	f04f 0100 	mov.w	r1, #0
    34ac:	f7ff f948 	bl	2740 <setpriority>

	if (!fork()) setpriority(0, 0), pathserver();
    34b0:	f7ff f91c 	bl	26ec <fork>
    34b4:	4603      	mov	r3, r0
    34b6:	2b00      	cmp	r3, #0
    34b8:	d107      	bne.n	34ca <first+0x2a>
    34ba:	f04f 0000 	mov.w	r0, #0
    34be:	f04f 0100 	mov.w	r1, #0
    34c2:	f7ff f93d 	bl	2740 <setpriority>
    34c6:	f7ff faff 	bl	2ac8 <pathserver>
	if (!fork()) setpriority(0, 0), serialout(USART2, USART2_IRQn);
    34ca:	f7ff f90f 	bl	26ec <fork>
    34ce:	4603      	mov	r3, r0
    34d0:	2b00      	cmp	r3, #0
    34d2:	d10d      	bne.n	34f0 <first+0x50>
    34d4:	f04f 0000 	mov.w	r0, #0
    34d8:	f04f 0100 	mov.w	r1, #0
    34dc:	f7ff f930 	bl	2740 <setpriority>
    34e0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    34e4:	f2c4 0000 	movt	r0, #16384	; 0x4000
    34e8:	f04f 0126 	mov.w	r1, #38	; 0x26
    34ec:	f7ff fc60 	bl	2db0 <serialout>
	if (!fork()) setpriority(0, 0), serialin(USART2, USART2_IRQn);
    34f0:	f7ff f8fc 	bl	26ec <fork>
    34f4:	4603      	mov	r3, r0
    34f6:	2b00      	cmp	r3, #0
    34f8:	d10d      	bne.n	3516 <first+0x76>
    34fa:	f04f 0000 	mov.w	r0, #0
    34fe:	f04f 0100 	mov.w	r1, #0
    3502:	f7ff f91d 	bl	2740 <setpriority>
    3506:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    350a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    350e:	f04f 0126 	mov.w	r1, #38	; 0x26
    3512:	f7ff fc9d 	bl	2e50 <serialin>
	if (!fork()) rs232_xmit_msg_task();
    3516:	f7ff f8e9 	bl	26ec <fork>
    351a:	4603      	mov	r3, r0
    351c:	2b00      	cmp	r3, #0
    351e:	d101      	bne.n	3524 <first+0x84>
    3520:	f7ff fd1e 	bl	2f60 <rs232_xmit_msg_task>
	if (!fork()) setpriority(0, PRIORITY_DEFAULT - 10), MYserial_readwrite_task();
    3524:	f7ff f8e2 	bl	26ec <fork>
    3528:	4603      	mov	r3, r0
    352a:	2b00      	cmp	r3, #0
    352c:	d107      	bne.n	353e <first+0x9e>
    352e:	f04f 0000 	mov.w	r0, #0
    3532:	f04f 010a 	mov.w	r1, #10
    3536:	f7ff f903 	bl	2740 <setpriority>
    353a:	f7ff fecf 	bl	32dc <MYserial_readwrite_task>

	setpriority(0, PRIORITY_LIMIT);
    353e:	f04f 0000 	mov.w	r0, #0
    3542:	f04f 0127 	mov.w	r1, #39	; 0x27
    3546:	f7ff f8fb 	bl	2740 <setpriority>

	while(1);
    354a:	e7fe      	b.n	354a <first+0xaa>

0000354c <init_task>:
#define PIPE_POP(pipe, v)  RB_POP((pipe), PIPE_BUF, (v))
#define PIPE_PEEK(pipe, v, i)  RB_PEEK((pipe), PIPE_BUF, (v), (i))
#define PIPE_LEN(pipe)     (RB_LEN((pipe), PIPE_BUF))

unsigned int *init_task(unsigned int *stack, void (*start)())
{
    354c:	b480      	push	{r7}
    354e:	b083      	sub	sp, #12
    3550:	af00      	add	r7, sp, #0
    3552:	6078      	str	r0, [r7, #4]
    3554:	6039      	str	r1, [r7, #0]
	stack += STACK_SIZE - 9; /* End of stack, minus what we're about to push */
    3556:	687b      	ldr	r3, [r7, #4]
    3558:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
    355c:	f103 030c 	add.w	r3, r3, #12
    3560:	607b      	str	r3, [r7, #4]
	stack[8] = (unsigned int)start;
    3562:	687b      	ldr	r3, [r7, #4]
    3564:	f103 0320 	add.w	r3, r3, #32
    3568:	683a      	ldr	r2, [r7, #0]
    356a:	601a      	str	r2, [r3, #0]
	return stack;
    356c:	687b      	ldr	r3, [r7, #4]
}
    356e:	4618      	mov	r0, r3
    3570:	f107 070c 	add.w	r7, r7, #12
    3574:	46bd      	mov	sp, r7
    3576:	bc80      	pop	{r7}
    3578:	4770      	bx	lr
    357a:	bf00      	nop

0000357c <task_push>:

int
task_push (struct task_control_block **list, struct task_control_block *item)
{
    357c:	b480      	push	{r7}
    357e:	b083      	sub	sp, #12
    3580:	af00      	add	r7, sp, #0
    3582:	6078      	str	r0, [r7, #4]
    3584:	6039      	str	r1, [r7, #0]
	if (list && item) {
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	2b00      	cmp	r3, #0
    358a:	d02d      	beq.n	35e8 <task_push+0x6c>
    358c:	683b      	ldr	r3, [r7, #0]
    358e:	2b00      	cmp	r3, #0
    3590:	d02a      	beq.n	35e8 <task_push+0x6c>
		/* Remove itself from original list */
		if (item->prev)
    3592:	683b      	ldr	r3, [r7, #0]
    3594:	691b      	ldr	r3, [r3, #16]
    3596:	2b00      	cmp	r3, #0
    3598:	d004      	beq.n	35a4 <task_push+0x28>
			*(item->prev) = item->next;
    359a:	683b      	ldr	r3, [r7, #0]
    359c:	691b      	ldr	r3, [r3, #16]
    359e:	683a      	ldr	r2, [r7, #0]
    35a0:	6952      	ldr	r2, [r2, #20]
    35a2:	601a      	str	r2, [r3, #0]
		if (item->next)
    35a4:	683b      	ldr	r3, [r7, #0]
    35a6:	695b      	ldr	r3, [r3, #20]
    35a8:	2b00      	cmp	r3, #0
    35aa:	d00b      	beq.n	35c4 <task_push+0x48>
			item->next->prev = item->prev;
    35ac:	683b      	ldr	r3, [r7, #0]
    35ae:	695b      	ldr	r3, [r3, #20]
    35b0:	683a      	ldr	r2, [r7, #0]
    35b2:	6912      	ldr	r2, [r2, #16]
    35b4:	611a      	str	r2, [r3, #16]
		/* Insert into new list */
		while (*list) list = &((*list)->next);
    35b6:	e005      	b.n	35c4 <task_push+0x48>
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	681b      	ldr	r3, [r3, #0]
    35bc:	f103 0314 	add.w	r3, r3, #20
    35c0:	607b      	str	r3, [r7, #4]
    35c2:	e000      	b.n	35c6 <task_push+0x4a>
    35c4:	bf00      	nop
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	2b00      	cmp	r3, #0
    35cc:	d1f4      	bne.n	35b8 <task_push+0x3c>
		*list = item;
    35ce:	687b      	ldr	r3, [r7, #4]
    35d0:	683a      	ldr	r2, [r7, #0]
    35d2:	601a      	str	r2, [r3, #0]
		item->prev = list;
    35d4:	683b      	ldr	r3, [r7, #0]
    35d6:	687a      	ldr	r2, [r7, #4]
    35d8:	611a      	str	r2, [r3, #16]
		item->next = NULL;
    35da:	683b      	ldr	r3, [r7, #0]
    35dc:	f04f 0200 	mov.w	r2, #0
    35e0:	615a      	str	r2, [r3, #20]
		return 0;
    35e2:	f04f 0300 	mov.w	r3, #0
    35e6:	e001      	b.n	35ec <task_push+0x70>
	}
	return -1;
    35e8:	f04f 33ff 	mov.w	r3, #4294967295
}
    35ec:	4618      	mov	r0, r3
    35ee:	f107 070c 	add.w	r7, r7, #12
    35f2:	46bd      	mov	sp, r7
    35f4:	bc80      	pop	{r7}
    35f6:	4770      	bx	lr

000035f8 <task_pop>:

struct task_control_block*
task_pop (struct task_control_block **list)
{
    35f8:	b480      	push	{r7}
    35fa:	b085      	sub	sp, #20
    35fc:	af00      	add	r7, sp, #0
    35fe:	6078      	str	r0, [r7, #4]
	if (list) {
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	2b00      	cmp	r3, #0
    3604:	d01b      	beq.n	363e <task_pop+0x46>
		struct task_control_block *item = *list;
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	60fb      	str	r3, [r7, #12]
		if (item) {
    360c:	68fb      	ldr	r3, [r7, #12]
    360e:	2b00      	cmp	r3, #0
    3610:	d015      	beq.n	363e <task_pop+0x46>
			*list = item->next;
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	695a      	ldr	r2, [r3, #20]
    3616:	687b      	ldr	r3, [r7, #4]
    3618:	601a      	str	r2, [r3, #0]
			if (item->next)
    361a:	68fb      	ldr	r3, [r7, #12]
    361c:	695b      	ldr	r3, [r3, #20]
    361e:	2b00      	cmp	r3, #0
    3620:	d003      	beq.n	362a <task_pop+0x32>
				item->next->prev = list;
    3622:	68fb      	ldr	r3, [r7, #12]
    3624:	695b      	ldr	r3, [r3, #20]
    3626:	687a      	ldr	r2, [r7, #4]
    3628:	611a      	str	r2, [r3, #16]
			item->prev = NULL;
    362a:	68fb      	ldr	r3, [r7, #12]
    362c:	f04f 0200 	mov.w	r2, #0
    3630:	611a      	str	r2, [r3, #16]
			item->next = NULL;
    3632:	68fb      	ldr	r3, [r7, #12]
    3634:	f04f 0200 	mov.w	r2, #0
    3638:	615a      	str	r2, [r3, #20]
			return item;
    363a:	68fb      	ldr	r3, [r7, #12]
    363c:	e001      	b.n	3642 <task_pop+0x4a>
		}
	}
	return NULL;
    363e:	f04f 0300 	mov.w	r3, #0
}
    3642:	4618      	mov	r0, r3
    3644:	f107 0714 	add.w	r7, r7, #20
    3648:	46bd      	mov	sp, r7
    364a:	bc80      	pop	{r7}
    364c:	4770      	bx	lr
    364e:	bf00      	nop

00003650 <_read>:

void _read(struct task_control_block *task, struct task_control_block *tasks, size_t task_count, struct pipe_ringbuffer *pipes);
void _write(struct task_control_block *task, struct task_control_block *tasks, size_t task_count, struct pipe_ringbuffer *pipes);

void _read(struct task_control_block *task, struct task_control_block *tasks, size_t task_count, struct pipe_ringbuffer *pipes)
{
    3650:	b580      	push	{r7, lr}
    3652:	b086      	sub	sp, #24
    3654:	af00      	add	r7, sp, #0
    3656:	60f8      	str	r0, [r7, #12]
    3658:	60b9      	str	r1, [r7, #8]
    365a:	607a      	str	r2, [r7, #4]
    365c:	603b      	str	r3, [r7, #0]
	task->status = TASK_READY;
    365e:	68fb      	ldr	r3, [r7, #12]
    3660:	f04f 0200 	mov.w	r2, #0
    3664:	609a      	str	r2, [r3, #8]
	/* If the fd is invalid */
	if (task->stack->r0 > PIPE_LIMIT) {
    3666:	68fb      	ldr	r3, [r7, #12]
    3668:	681b      	ldr	r3, [r3, #0]
    366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    366c:	2b10      	cmp	r3, #16
    366e:	d905      	bls.n	367c <_read+0x2c>
		task->stack->r0 = -1;
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	681b      	ldr	r3, [r3, #0]
    3674:	f04f 32ff 	mov.w	r2, #4294967295
    3678:	629a      	str	r2, [r3, #40]	; 0x28
    367a:	e03d      	b.n	36f8 <_read+0xa8>
	}
	else {
		struct pipe_ringbuffer *pipe = &pipes[task->stack->r0];
    367c:	68fb      	ldr	r3, [r7, #12]
    367e:	681b      	ldr	r3, [r3, #0]
    3680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3682:	f04f 0258 	mov.w	r2, #88	; 0x58
    3686:	fb02 f303 	mul.w	r3, r2, r3
    368a:	683a      	ldr	r2, [r7, #0]
    368c:	18d3      	adds	r3, r2, r3
    368e:	613b      	str	r3, [r7, #16]

		if (pipe->readable(pipe, task)) {
    3690:	693b      	ldr	r3, [r7, #16]
    3692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3694:	6938      	ldr	r0, [r7, #16]
    3696:	68f9      	ldr	r1, [r7, #12]
    3698:	4798      	blx	r3
    369a:	4603      	mov	r3, r0
    369c:	2b00      	cmp	r3, #0
    369e:	d02b      	beq.n	36f8 <_read+0xa8>
			size_t i;

			pipe->read(pipe, task);
    36a0:	693b      	ldr	r3, [r7, #16]
    36a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    36a4:	6938      	ldr	r0, [r7, #16]
    36a6:	68f9      	ldr	r1, [r7, #12]
    36a8:	4798      	blx	r3

			/* Unblock any waiting writes */
			for (i = 0; i < task_count; i++)
    36aa:	f04f 0300 	mov.w	r3, #0
    36ae:	617b      	str	r3, [r7, #20]
    36b0:	e01e      	b.n	36f0 <_read+0xa0>
				if (tasks[i].status == TASK_WAIT_WRITE)
    36b2:	697a      	ldr	r2, [r7, #20]
    36b4:	4613      	mov	r3, r2
    36b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    36ba:	189b      	adds	r3, r3, r2
    36bc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    36c0:	68ba      	ldr	r2, [r7, #8]
    36c2:	18d3      	adds	r3, r2, r3
    36c4:	689b      	ldr	r3, [r3, #8]
    36c6:	2b02      	cmp	r3, #2
    36c8:	d10e      	bne.n	36e8 <_read+0x98>
					_write(&tasks[i], tasks, task_count, pipes);
    36ca:	697a      	ldr	r2, [r7, #20]
    36cc:	4613      	mov	r3, r2
    36ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
    36d2:	189b      	adds	r3, r3, r2
    36d4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    36d8:	68ba      	ldr	r2, [r7, #8]
    36da:	18d3      	adds	r3, r2, r3
    36dc:	4618      	mov	r0, r3
    36de:	68b9      	ldr	r1, [r7, #8]
    36e0:	687a      	ldr	r2, [r7, #4]
    36e2:	683b      	ldr	r3, [r7, #0]
    36e4:	f000 f80c 	bl	3700 <_write>
			size_t i;

			pipe->read(pipe, task);

			/* Unblock any waiting writes */
			for (i = 0; i < task_count; i++)
    36e8:	697b      	ldr	r3, [r7, #20]
    36ea:	f103 0301 	add.w	r3, r3, #1
    36ee:	617b      	str	r3, [r7, #20]
    36f0:	697a      	ldr	r2, [r7, #20]
    36f2:	687b      	ldr	r3, [r7, #4]
    36f4:	429a      	cmp	r2, r3
    36f6:	d3dc      	bcc.n	36b2 <_read+0x62>
				if (tasks[i].status == TASK_WAIT_WRITE)
					_write(&tasks[i], tasks, task_count, pipes);
		}
	}
}
    36f8:	f107 0718 	add.w	r7, r7, #24
    36fc:	46bd      	mov	sp, r7
    36fe:	bd80      	pop	{r7, pc}

00003700 <_write>:

void _write(struct task_control_block *task, struct task_control_block *tasks, size_t task_count, struct pipe_ringbuffer *pipes)
{
    3700:	b580      	push	{r7, lr}
    3702:	b086      	sub	sp, #24
    3704:	af00      	add	r7, sp, #0
    3706:	60f8      	str	r0, [r7, #12]
    3708:	60b9      	str	r1, [r7, #8]
    370a:	607a      	str	r2, [r7, #4]
    370c:	603b      	str	r3, [r7, #0]
	task->status = TASK_READY;
    370e:	68fb      	ldr	r3, [r7, #12]
    3710:	f04f 0200 	mov.w	r2, #0
    3714:	609a      	str	r2, [r3, #8]
	/* If the fd is invalid */
	if (task->stack->r0 > PIPE_LIMIT) {
    3716:	68fb      	ldr	r3, [r7, #12]
    3718:	681b      	ldr	r3, [r3, #0]
    371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    371c:	2b10      	cmp	r3, #16
    371e:	d905      	bls.n	372c <_write+0x2c>
		task->stack->r0 = -1;
    3720:	68fb      	ldr	r3, [r7, #12]
    3722:	681b      	ldr	r3, [r3, #0]
    3724:	f04f 32ff 	mov.w	r2, #4294967295
    3728:	629a      	str	r2, [r3, #40]	; 0x28
    372a:	e03d      	b.n	37a8 <_write+0xa8>
	}
	else {
		struct pipe_ringbuffer *pipe = &pipes[task->stack->r0];
    372c:	68fb      	ldr	r3, [r7, #12]
    372e:	681b      	ldr	r3, [r3, #0]
    3730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3732:	f04f 0258 	mov.w	r2, #88	; 0x58
    3736:	fb02 f303 	mul.w	r3, r2, r3
    373a:	683a      	ldr	r2, [r7, #0]
    373c:	18d3      	adds	r3, r2, r3
    373e:	613b      	str	r3, [r7, #16]

		if (pipe->writable(pipe, task)) {
    3740:	693b      	ldr	r3, [r7, #16]
    3742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3744:	6938      	ldr	r0, [r7, #16]
    3746:	68f9      	ldr	r1, [r7, #12]
    3748:	4798      	blx	r3
    374a:	4603      	mov	r3, r0
    374c:	2b00      	cmp	r3, #0
    374e:	d02b      	beq.n	37a8 <_write+0xa8>
			size_t i;

			pipe->write(pipe, task);
    3750:	693b      	ldr	r3, [r7, #16]
    3752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3754:	6938      	ldr	r0, [r7, #16]
    3756:	68f9      	ldr	r1, [r7, #12]
    3758:	4798      	blx	r3

			/* Unblock any waiting reads */
			for (i = 0; i < task_count; i++)
    375a:	f04f 0300 	mov.w	r3, #0
    375e:	617b      	str	r3, [r7, #20]
    3760:	e01e      	b.n	37a0 <_write+0xa0>
				if (tasks[i].status == TASK_WAIT_READ)
    3762:	697a      	ldr	r2, [r7, #20]
    3764:	4613      	mov	r3, r2
    3766:	ea4f 0343 	mov.w	r3, r3, lsl #1
    376a:	189b      	adds	r3, r3, r2
    376c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3770:	68ba      	ldr	r2, [r7, #8]
    3772:	18d3      	adds	r3, r2, r3
    3774:	689b      	ldr	r3, [r3, #8]
    3776:	2b01      	cmp	r3, #1
    3778:	d10e      	bne.n	3798 <_write+0x98>
					_read(&tasks[i], tasks, task_count, pipes);
    377a:	697a      	ldr	r2, [r7, #20]
    377c:	4613      	mov	r3, r2
    377e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3782:	189b      	adds	r3, r3, r2
    3784:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3788:	68ba      	ldr	r2, [r7, #8]
    378a:	18d3      	adds	r3, r2, r3
    378c:	4618      	mov	r0, r3
    378e:	68b9      	ldr	r1, [r7, #8]
    3790:	687a      	ldr	r2, [r7, #4]
    3792:	683b      	ldr	r3, [r7, #0]
    3794:	f7ff ff5c 	bl	3650 <_read>
			size_t i;

			pipe->write(pipe, task);

			/* Unblock any waiting reads */
			for (i = 0; i < task_count; i++)
    3798:	697b      	ldr	r3, [r7, #20]
    379a:	f103 0301 	add.w	r3, r3, #1
    379e:	617b      	str	r3, [r7, #20]
    37a0:	697a      	ldr	r2, [r7, #20]
    37a2:	687b      	ldr	r3, [r7, #4]
    37a4:	429a      	cmp	r2, r3
    37a6:	d3dc      	bcc.n	3762 <_write+0x62>
				if (tasks[i].status == TASK_WAIT_READ)
					_read(&tasks[i], tasks, task_count, pipes);
		}
	}
}
    37a8:	f107 0718 	add.w	r7, r7, #24
    37ac:	46bd      	mov	sp, r7
    37ae:	bd80      	pop	{r7, pc}

000037b0 <fifo_readable>:

int
fifo_readable (struct pipe_ringbuffer *pipe,
			   struct task_control_block *task)
{
    37b0:	b480      	push	{r7}
    37b2:	b083      	sub	sp, #12
    37b4:	af00      	add	r7, sp, #0
    37b6:	6078      	str	r0, [r7, #4]
    37b8:	6039      	str	r1, [r7, #0]
	/* Trying to read too much */
	if (task->stack->r2 > PIPE_BUF) {
    37ba:	683b      	ldr	r3, [r7, #0]
    37bc:	681b      	ldr	r3, [r3, #0]
    37be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    37c0:	2b40      	cmp	r3, #64	; 0x40
    37c2:	d907      	bls.n	37d4 <fifo_readable+0x24>
		task->stack->r0 = -1;
    37c4:	683b      	ldr	r3, [r7, #0]
    37c6:	681b      	ldr	r3, [r3, #0]
    37c8:	f04f 32ff 	mov.w	r2, #4294967295
    37cc:	629a      	str	r2, [r3, #40]	; 0x28
		return 0;
    37ce:	f04f 0300 	mov.w	r3, #0
    37d2:	e01f      	b.n	3814 <fifo_readable+0x64>
	}
	if ((size_t)PIPE_LEN(*pipe) < task->stack->r2) {
    37d4:	687b      	ldr	r3, [r7, #4]
    37d6:	685a      	ldr	r2, [r3, #4]
    37d8:	687b      	ldr	r3, [r7, #4]
    37da:	681b      	ldr	r3, [r3, #0]
    37dc:	1ad2      	subs	r2, r2, r3
    37de:	687b      	ldr	r3, [r7, #4]
    37e0:	6859      	ldr	r1, [r3, #4]
    37e2:	687b      	ldr	r3, [r7, #4]
    37e4:	681b      	ldr	r3, [r3, #0]
    37e6:	4299      	cmp	r1, r3
    37e8:	da02      	bge.n	37f0 <fifo_readable+0x40>
    37ea:	f04f 0340 	mov.w	r3, #64	; 0x40
    37ee:	e001      	b.n	37f4 <fifo_readable+0x44>
    37f0:	f04f 0300 	mov.w	r3, #0
    37f4:	18d3      	adds	r3, r2, r3
    37f6:	461a      	mov	r2, r3
    37f8:	683b      	ldr	r3, [r7, #0]
    37fa:	681b      	ldr	r3, [r3, #0]
    37fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    37fe:	429a      	cmp	r2, r3
    3800:	d206      	bcs.n	3810 <fifo_readable+0x60>
		/* Trying to read more than there is: block */
		task->status = TASK_WAIT_READ;
    3802:	683b      	ldr	r3, [r7, #0]
    3804:	f04f 0201 	mov.w	r2, #1
    3808:	609a      	str	r2, [r3, #8]
		return 0;
    380a:	f04f 0300 	mov.w	r3, #0
    380e:	e001      	b.n	3814 <fifo_readable+0x64>
	}
	return 1;
    3810:	f04f 0301 	mov.w	r3, #1
}
    3814:	4618      	mov	r0, r3
    3816:	f107 070c 	add.w	r7, r7, #12
    381a:	46bd      	mov	sp, r7
    381c:	bc80      	pop	{r7}
    381e:	4770      	bx	lr

00003820 <mq_readable>:

int
mq_readable (struct pipe_ringbuffer *pipe,
			 struct task_control_block *task)
{
    3820:	b480      	push	{r7}
    3822:	b087      	sub	sp, #28
    3824:	af00      	add	r7, sp, #0
    3826:	6078      	str	r0, [r7, #4]
    3828:	6039      	str	r1, [r7, #0]
	size_t msg_len;

	/* Trying to read too much */
	if ((size_t)PIPE_LEN(*pipe) < sizeof(size_t)) {
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	685a      	ldr	r2, [r3, #4]
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	681b      	ldr	r3, [r3, #0]
    3832:	1ad2      	subs	r2, r2, r3
    3834:	687b      	ldr	r3, [r7, #4]
    3836:	6859      	ldr	r1, [r3, #4]
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	681b      	ldr	r3, [r3, #0]
    383c:	4299      	cmp	r1, r3
    383e:	da02      	bge.n	3846 <mq_readable+0x26>
    3840:	f04f 0340 	mov.w	r3, #64	; 0x40
    3844:	e001      	b.n	384a <mq_readable+0x2a>
    3846:	f04f 0300 	mov.w	r3, #0
    384a:	18d3      	adds	r3, r2, r3
    384c:	2b03      	cmp	r3, #3
    384e:	d806      	bhi.n	385e <mq_readable+0x3e>
		/* Nothing to read */
		task->status = TASK_WAIT_READ;
    3850:	683b      	ldr	r3, [r7, #0]
    3852:	f04f 0201 	mov.w	r2, #1
    3856:	609a      	str	r2, [r3, #8]
		return 0;
    3858:	f04f 0300 	mov.w	r3, #0
    385c:	e03e      	b.n	38dc <mq_readable+0xbc>
	}

	PIPE_PEEK(*pipe, msg_len, 4);
    385e:	f04f 0304 	mov.w	r3, #4
    3862:	617b      	str	r3, [r7, #20]
    3864:	687b      	ldr	r3, [r7, #4]
    3866:	681b      	ldr	r3, [r3, #0]
    3868:	613b      	str	r3, [r7, #16]
    386a:	f04f 0300 	mov.w	r3, #0
    386e:	60fb      	str	r3, [r7, #12]
    3870:	e018      	b.n	38a4 <mq_readable+0x84>
    3872:	68fb      	ldr	r3, [r7, #12]
    3874:	f107 0208 	add.w	r2, r7, #8
    3878:	18d3      	adds	r3, r2, r3
    387a:	6879      	ldr	r1, [r7, #4]
    387c:	693a      	ldr	r2, [r7, #16]
    387e:	188a      	adds	r2, r1, r2
    3880:	f102 0208 	add.w	r2, r2, #8
    3884:	7812      	ldrb	r2, [r2, #0]
    3886:	701a      	strb	r2, [r3, #0]
    3888:	68fb      	ldr	r3, [r7, #12]
    388a:	f103 0301 	add.w	r3, r3, #1
    388e:	60fb      	str	r3, [r7, #12]
    3890:	693b      	ldr	r3, [r7, #16]
    3892:	f103 0301 	add.w	r3, r3, #1
    3896:	613b      	str	r3, [r7, #16]
    3898:	693b      	ldr	r3, [r7, #16]
    389a:	2b3f      	cmp	r3, #63	; 0x3f
    389c:	dd02      	ble.n	38a4 <mq_readable+0x84>
    389e:	f04f 0300 	mov.w	r3, #0
    38a2:	613b      	str	r3, [r7, #16]
    38a4:	697b      	ldr	r3, [r7, #20]
    38a6:	2b00      	cmp	r3, #0
    38a8:	bf0c      	ite	eq
    38aa:	2300      	moveq	r3, #0
    38ac:	2301      	movne	r3, #1
    38ae:	b2db      	uxtb	r3, r3
    38b0:	697a      	ldr	r2, [r7, #20]
    38b2:	f102 32ff 	add.w	r2, r2, #4294967295
    38b6:	617a      	str	r2, [r7, #20]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d1da      	bne.n	3872 <mq_readable+0x52>

	if (msg_len > task->stack->r2) {
    38bc:	683b      	ldr	r3, [r7, #0]
    38be:	681b      	ldr	r3, [r3, #0]
    38c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    38c2:	68bb      	ldr	r3, [r7, #8]
    38c4:	429a      	cmp	r2, r3
    38c6:	d207      	bcs.n	38d8 <mq_readable+0xb8>
		/* Trying to read more than buffer size */
		task->stack->r0 = -1;
    38c8:	683b      	ldr	r3, [r7, #0]
    38ca:	681b      	ldr	r3, [r3, #0]
    38cc:	f04f 32ff 	mov.w	r2, #4294967295
    38d0:	629a      	str	r2, [r3, #40]	; 0x28
		return 0;
    38d2:	f04f 0300 	mov.w	r3, #0
    38d6:	e001      	b.n	38dc <mq_readable+0xbc>
	}
	return 1;
    38d8:	f04f 0301 	mov.w	r3, #1
}
    38dc:	4618      	mov	r0, r3
    38de:	f107 071c 	add.w	r7, r7, #28
    38e2:	46bd      	mov	sp, r7
    38e4:	bc80      	pop	{r7}
    38e6:	4770      	bx	lr

000038e8 <fifo_read>:

int
fifo_read (struct pipe_ringbuffer *pipe,
		   struct task_control_block *task)
{
    38e8:	b480      	push	{r7}
    38ea:	b085      	sub	sp, #20
    38ec:	af00      	add	r7, sp, #0
    38ee:	6078      	str	r0, [r7, #4]
    38f0:	6039      	str	r1, [r7, #0]
	size_t i;
	char *buf = (char*)task->stack->r1;
    38f2:	683b      	ldr	r3, [r7, #0]
    38f4:	681b      	ldr	r3, [r3, #0]
    38f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38f8:	60bb      	str	r3, [r7, #8]
	/* Copy data into buf */
	for (i = 0; i < task->stack->r2; i++) {
    38fa:	f04f 0300 	mov.w	r3, #0
    38fe:	60fb      	str	r3, [r7, #12]
    3900:	e01a      	b.n	3938 <fifo_read+0x50>
		PIPE_POP(*pipe, buf[i]);
    3902:	68ba      	ldr	r2, [r7, #8]
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	18d3      	adds	r3, r2, r3
    3908:	687a      	ldr	r2, [r7, #4]
    390a:	6812      	ldr	r2, [r2, #0]
    390c:	6879      	ldr	r1, [r7, #4]
    390e:	188a      	adds	r2, r1, r2
    3910:	7a12      	ldrb	r2, [r2, #8]
    3912:	701a      	strb	r2, [r3, #0]
    3914:	687b      	ldr	r3, [r7, #4]
    3916:	681b      	ldr	r3, [r3, #0]
    3918:	f103 0201 	add.w	r2, r3, #1
    391c:	687b      	ldr	r3, [r7, #4]
    391e:	601a      	str	r2, [r3, #0]
    3920:	687b      	ldr	r3, [r7, #4]
    3922:	681b      	ldr	r3, [r3, #0]
    3924:	2b3f      	cmp	r3, #63	; 0x3f
    3926:	dd03      	ble.n	3930 <fifo_read+0x48>
    3928:	687b      	ldr	r3, [r7, #4]
    392a:	f04f 0200 	mov.w	r2, #0
    392e:	601a      	str	r2, [r3, #0]
		   struct task_control_block *task)
{
	size_t i;
	char *buf = (char*)task->stack->r1;
	/* Copy data into buf */
	for (i = 0; i < task->stack->r2; i++) {
    3930:	68fb      	ldr	r3, [r7, #12]
    3932:	f103 0301 	add.w	r3, r3, #1
    3936:	60fb      	str	r3, [r7, #12]
    3938:	683b      	ldr	r3, [r7, #0]
    393a:	681b      	ldr	r3, [r3, #0]
    393c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    393e:	68fb      	ldr	r3, [r7, #12]
    3940:	429a      	cmp	r2, r3
    3942:	d8de      	bhi.n	3902 <fifo_read+0x1a>
		PIPE_POP(*pipe, buf[i]);
	}
	return task->stack->r2;
    3944:	683b      	ldr	r3, [r7, #0]
    3946:	681b      	ldr	r3, [r3, #0]
    3948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    394a:	4618      	mov	r0, r3
    394c:	f107 0714 	add.w	r7, r7, #20
    3950:	46bd      	mov	sp, r7
    3952:	bc80      	pop	{r7}
    3954:	4770      	bx	lr
    3956:	bf00      	nop

00003958 <mq_read>:

int
mq_read (struct pipe_ringbuffer *pipe,
		 struct task_control_block *task)
{
    3958:	b480      	push	{r7}
    395a:	b087      	sub	sp, #28
    395c:	af00      	add	r7, sp, #0
    395e:	6078      	str	r0, [r7, #4]
    3960:	6039      	str	r1, [r7, #0]
	size_t msg_len;
	size_t i;
	char *buf = (char*)task->stack->r1;
    3962:	683b      	ldr	r3, [r7, #0]
    3964:	681b      	ldr	r3, [r3, #0]
    3966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3968:	613b      	str	r3, [r7, #16]
	/* Get length */
	for (i = 0; i < 4; i++) {
    396a:	f04f 0300 	mov.w	r3, #0
    396e:	617b      	str	r3, [r7, #20]
    3970:	e01b      	b.n	39aa <mq_read+0x52>
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
    3972:	697b      	ldr	r3, [r7, #20]
    3974:	f107 020c 	add.w	r2, r7, #12
    3978:	18d3      	adds	r3, r2, r3
    397a:	687a      	ldr	r2, [r7, #4]
    397c:	6812      	ldr	r2, [r2, #0]
    397e:	6879      	ldr	r1, [r7, #4]
    3980:	188a      	adds	r2, r1, r2
    3982:	7a12      	ldrb	r2, [r2, #8]
    3984:	701a      	strb	r2, [r3, #0]
    3986:	687b      	ldr	r3, [r7, #4]
    3988:	681b      	ldr	r3, [r3, #0]
    398a:	f103 0201 	add.w	r2, r3, #1
    398e:	687b      	ldr	r3, [r7, #4]
    3990:	601a      	str	r2, [r3, #0]
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	681b      	ldr	r3, [r3, #0]
    3996:	2b3f      	cmp	r3, #63	; 0x3f
    3998:	dd03      	ble.n	39a2 <mq_read+0x4a>
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	f04f 0200 	mov.w	r2, #0
    39a0:	601a      	str	r2, [r3, #0]
{
	size_t msg_len;
	size_t i;
	char *buf = (char*)task->stack->r1;
	/* Get length */
	for (i = 0; i < 4; i++) {
    39a2:	697b      	ldr	r3, [r7, #20]
    39a4:	f103 0301 	add.w	r3, r3, #1
    39a8:	617b      	str	r3, [r7, #20]
    39aa:	697b      	ldr	r3, [r7, #20]
    39ac:	2b03      	cmp	r3, #3
    39ae:	d9e0      	bls.n	3972 <mq_read+0x1a>
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
	}
	/* Copy data into buf */
	for (i = 0; i < msg_len; i++) {
    39b0:	f04f 0300 	mov.w	r3, #0
    39b4:	617b      	str	r3, [r7, #20]
    39b6:	e01a      	b.n	39ee <mq_read+0x96>
		PIPE_POP(*pipe, buf[i]);
    39b8:	693a      	ldr	r2, [r7, #16]
    39ba:	697b      	ldr	r3, [r7, #20]
    39bc:	18d3      	adds	r3, r2, r3
    39be:	687a      	ldr	r2, [r7, #4]
    39c0:	6812      	ldr	r2, [r2, #0]
    39c2:	6879      	ldr	r1, [r7, #4]
    39c4:	188a      	adds	r2, r1, r2
    39c6:	7a12      	ldrb	r2, [r2, #8]
    39c8:	701a      	strb	r2, [r3, #0]
    39ca:	687b      	ldr	r3, [r7, #4]
    39cc:	681b      	ldr	r3, [r3, #0]
    39ce:	f103 0201 	add.w	r2, r3, #1
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	601a      	str	r2, [r3, #0]
    39d6:	687b      	ldr	r3, [r7, #4]
    39d8:	681b      	ldr	r3, [r3, #0]
    39da:	2b3f      	cmp	r3, #63	; 0x3f
    39dc:	dd03      	ble.n	39e6 <mq_read+0x8e>
    39de:	687b      	ldr	r3, [r7, #4]
    39e0:	f04f 0200 	mov.w	r2, #0
    39e4:	601a      	str	r2, [r3, #0]
	/* Get length */
	for (i = 0; i < 4; i++) {
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
	}
	/* Copy data into buf */
	for (i = 0; i < msg_len; i++) {
    39e6:	697b      	ldr	r3, [r7, #20]
    39e8:	f103 0301 	add.w	r3, r3, #1
    39ec:	617b      	str	r3, [r7, #20]
    39ee:	68fb      	ldr	r3, [r7, #12]
    39f0:	697a      	ldr	r2, [r7, #20]
    39f2:	429a      	cmp	r2, r3
    39f4:	d3e0      	bcc.n	39b8 <mq_read+0x60>
		PIPE_POP(*pipe, buf[i]);
	}
	return msg_len;
    39f6:	68fb      	ldr	r3, [r7, #12]
}
    39f8:	4618      	mov	r0, r3
    39fa:	f107 071c 	add.w	r7, r7, #28
    39fe:	46bd      	mov	sp, r7
    3a00:	bc80      	pop	{r7}
    3a02:	4770      	bx	lr

00003a04 <fifo_writable>:

int
fifo_writable (struct pipe_ringbuffer *pipe,
			   struct task_control_block *task)
{
    3a04:	b480      	push	{r7}
    3a06:	b083      	sub	sp, #12
    3a08:	af00      	add	r7, sp, #0
    3a0a:	6078      	str	r0, [r7, #4]
    3a0c:	6039      	str	r1, [r7, #0]
	/* If the write would be non-atomic */
	if (task->stack->r2 > PIPE_BUF) {
    3a0e:	683b      	ldr	r3, [r7, #0]
    3a10:	681b      	ldr	r3, [r3, #0]
    3a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3a14:	2b40      	cmp	r3, #64	; 0x40
    3a16:	d907      	bls.n	3a28 <fifo_writable+0x24>
		task->stack->r0 = -1;
    3a18:	683b      	ldr	r3, [r7, #0]
    3a1a:	681b      	ldr	r3, [r3, #0]
    3a1c:	f04f 32ff 	mov.w	r2, #4294967295
    3a20:	629a      	str	r2, [r3, #40]	; 0x28
		return 0;
    3a22:	f04f 0300 	mov.w	r3, #0
    3a26:	e020      	b.n	3a6a <fifo_writable+0x66>
	}
	/* Preserve 1 byte to distiguish empty or full */
	if ((size_t)PIPE_BUF - PIPE_LEN(*pipe) - 1 < task->stack->r2) {
    3a28:	687b      	ldr	r3, [r7, #4]
    3a2a:	681a      	ldr	r2, [r3, #0]
    3a2c:	687b      	ldr	r3, [r7, #4]
    3a2e:	685b      	ldr	r3, [r3, #4]
    3a30:	1ad2      	subs	r2, r2, r3
    3a32:	687b      	ldr	r3, [r7, #4]
    3a34:	6859      	ldr	r1, [r3, #4]
    3a36:	687b      	ldr	r3, [r7, #4]
    3a38:	681b      	ldr	r3, [r3, #0]
    3a3a:	4299      	cmp	r1, r3
    3a3c:	da02      	bge.n	3a44 <fifo_writable+0x40>
    3a3e:	f04f 0340 	mov.w	r3, #64	; 0x40
    3a42:	e001      	b.n	3a48 <fifo_writable+0x44>
    3a44:	f04f 0300 	mov.w	r3, #0
    3a48:	1ad3      	subs	r3, r2, r3
    3a4a:	f103 023f 	add.w	r2, r3, #63	; 0x3f
    3a4e:	683b      	ldr	r3, [r7, #0]
    3a50:	681b      	ldr	r3, [r3, #0]
    3a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3a54:	429a      	cmp	r2, r3
    3a56:	d206      	bcs.n	3a66 <fifo_writable+0x62>
		/* Trying to write more than we have space for: block */
		task->status = TASK_WAIT_WRITE;
    3a58:	683b      	ldr	r3, [r7, #0]
    3a5a:	f04f 0202 	mov.w	r2, #2
    3a5e:	609a      	str	r2, [r3, #8]
		return 0;
    3a60:	f04f 0300 	mov.w	r3, #0
    3a64:	e001      	b.n	3a6a <fifo_writable+0x66>
	}
	return 1;
    3a66:	f04f 0301 	mov.w	r3, #1
}
    3a6a:	4618      	mov	r0, r3
    3a6c:	f107 070c 	add.w	r7, r7, #12
    3a70:	46bd      	mov	sp, r7
    3a72:	bc80      	pop	{r7}
    3a74:	4770      	bx	lr
    3a76:	bf00      	nop

00003a78 <mq_writable>:

int
mq_writable (struct pipe_ringbuffer *pipe,
			 struct task_control_block *task)
{
    3a78:	b480      	push	{r7}
    3a7a:	b085      	sub	sp, #20
    3a7c:	af00      	add	r7, sp, #0
    3a7e:	6078      	str	r0, [r7, #4]
    3a80:	6039      	str	r1, [r7, #0]
	size_t total_len = sizeof(size_t) + task->stack->r2;
    3a82:	683b      	ldr	r3, [r7, #0]
    3a84:	681b      	ldr	r3, [r3, #0]
    3a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3a88:	f103 0304 	add.w	r3, r3, #4
    3a8c:	60fb      	str	r3, [r7, #12]

	/* If the write would be non-atomic */
	if (total_len > PIPE_BUF) {
    3a8e:	68fb      	ldr	r3, [r7, #12]
    3a90:	2b40      	cmp	r3, #64	; 0x40
    3a92:	d907      	bls.n	3aa4 <mq_writable+0x2c>
		task->stack->r0 = -1;
    3a94:	683b      	ldr	r3, [r7, #0]
    3a96:	681b      	ldr	r3, [r3, #0]
    3a98:	f04f 32ff 	mov.w	r2, #4294967295
    3a9c:	629a      	str	r2, [r3, #40]	; 0x28
		return 0;
    3a9e:	f04f 0300 	mov.w	r3, #0
    3aa2:	e01e      	b.n	3ae2 <mq_writable+0x6a>
	}
	/* Preserve 1 byte to distiguish empty or full */
	if ((size_t)PIPE_BUF - PIPE_LEN(*pipe) - 1 < total_len) {
    3aa4:	687b      	ldr	r3, [r7, #4]
    3aa6:	681a      	ldr	r2, [r3, #0]
    3aa8:	687b      	ldr	r3, [r7, #4]
    3aaa:	685b      	ldr	r3, [r3, #4]
    3aac:	1ad2      	subs	r2, r2, r3
    3aae:	687b      	ldr	r3, [r7, #4]
    3ab0:	6859      	ldr	r1, [r3, #4]
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	681b      	ldr	r3, [r3, #0]
    3ab6:	4299      	cmp	r1, r3
    3ab8:	da02      	bge.n	3ac0 <mq_writable+0x48>
    3aba:	f04f 0340 	mov.w	r3, #64	; 0x40
    3abe:	e001      	b.n	3ac4 <mq_writable+0x4c>
    3ac0:	f04f 0300 	mov.w	r3, #0
    3ac4:	1ad3      	subs	r3, r2, r3
    3ac6:	f103 023f 	add.w	r2, r3, #63	; 0x3f
    3aca:	68fb      	ldr	r3, [r7, #12]
    3acc:	429a      	cmp	r2, r3
    3ace:	d206      	bcs.n	3ade <mq_writable+0x66>
		/* Trying to write more than we have space for: block */
		task->status = TASK_WAIT_WRITE;
    3ad0:	683b      	ldr	r3, [r7, #0]
    3ad2:	f04f 0202 	mov.w	r2, #2
    3ad6:	609a      	str	r2, [r3, #8]
		return 0;
    3ad8:	f04f 0300 	mov.w	r3, #0
    3adc:	e001      	b.n	3ae2 <mq_writable+0x6a>
	}
	return 1;
    3ade:	f04f 0301 	mov.w	r3, #1
}
    3ae2:	4618      	mov	r0, r3
    3ae4:	f107 0714 	add.w	r7, r7, #20
    3ae8:	46bd      	mov	sp, r7
    3aea:	bc80      	pop	{r7}
    3aec:	4770      	bx	lr
    3aee:	bf00      	nop

00003af0 <fifo_write>:

int
fifo_write (struct pipe_ringbuffer *pipe,
			struct task_control_block *task)
{
    3af0:	b480      	push	{r7}
    3af2:	b085      	sub	sp, #20
    3af4:	af00      	add	r7, sp, #0
    3af6:	6078      	str	r0, [r7, #4]
    3af8:	6039      	str	r1, [r7, #0]
	size_t i;
	const char *buf = (const char*)task->stack->r1;
    3afa:	683b      	ldr	r3, [r7, #0]
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b00:	60bb      	str	r3, [r7, #8]
	/* Copy data into pipe */
	for (i = 0; i < task->stack->r2; i++)
    3b02:	f04f 0300 	mov.w	r3, #0
    3b06:	60fb      	str	r3, [r7, #12]
    3b08:	e01a      	b.n	3b40 <fifo_write+0x50>
		PIPE_PUSH(*pipe,buf[i]);
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	685b      	ldr	r3, [r3, #4]
    3b0e:	68b9      	ldr	r1, [r7, #8]
    3b10:	68fa      	ldr	r2, [r7, #12]
    3b12:	188a      	adds	r2, r1, r2
    3b14:	7812      	ldrb	r2, [r2, #0]
    3b16:	6879      	ldr	r1, [r7, #4]
    3b18:	18cb      	adds	r3, r1, r3
    3b1a:	721a      	strb	r2, [r3, #8]
    3b1c:	687b      	ldr	r3, [r7, #4]
    3b1e:	685b      	ldr	r3, [r3, #4]
    3b20:	f103 0201 	add.w	r2, r3, #1
    3b24:	687b      	ldr	r3, [r7, #4]
    3b26:	605a      	str	r2, [r3, #4]
    3b28:	687b      	ldr	r3, [r7, #4]
    3b2a:	685b      	ldr	r3, [r3, #4]
    3b2c:	2b3f      	cmp	r3, #63	; 0x3f
    3b2e:	dd03      	ble.n	3b38 <fifo_write+0x48>
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	f04f 0200 	mov.w	r2, #0
    3b36:	605a      	str	r2, [r3, #4]
			struct task_control_block *task)
{
	size_t i;
	const char *buf = (const char*)task->stack->r1;
	/* Copy data into pipe */
	for (i = 0; i < task->stack->r2; i++)
    3b38:	68fb      	ldr	r3, [r7, #12]
    3b3a:	f103 0301 	add.w	r3, r3, #1
    3b3e:	60fb      	str	r3, [r7, #12]
    3b40:	683b      	ldr	r3, [r7, #0]
    3b42:	681b      	ldr	r3, [r3, #0]
    3b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3b46:	68fb      	ldr	r3, [r7, #12]
    3b48:	429a      	cmp	r2, r3
    3b4a:	d8de      	bhi.n	3b0a <fifo_write+0x1a>
		PIPE_PUSH(*pipe,buf[i]);
	return task->stack->r2;
    3b4c:	683b      	ldr	r3, [r7, #0]
    3b4e:	681b      	ldr	r3, [r3, #0]
    3b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    3b52:	4618      	mov	r0, r3
    3b54:	f107 0714 	add.w	r7, r7, #20
    3b58:	46bd      	mov	sp, r7
    3b5a:	bc80      	pop	{r7}
    3b5c:	4770      	bx	lr
    3b5e:	bf00      	nop

00003b60 <mq_write>:

int
mq_write (struct pipe_ringbuffer *pipe,
		  struct task_control_block *task)
{
    3b60:	b480      	push	{r7}
    3b62:	b085      	sub	sp, #20
    3b64:	af00      	add	r7, sp, #0
    3b66:	6078      	str	r0, [r7, #4]
    3b68:	6039      	str	r1, [r7, #0]
	size_t i;
	const char *buf = (const char*)task->stack->r1;
    3b6a:	683b      	ldr	r3, [r7, #0]
    3b6c:	681b      	ldr	r3, [r3, #0]
    3b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b70:	60bb      	str	r3, [r7, #8]
	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
    3b72:	f04f 0300 	mov.w	r3, #0
    3b76:	60fb      	str	r3, [r7, #12]
    3b78:	e01d      	b.n	3bb6 <mq_write+0x56>
		PIPE_PUSH(*pipe,*(((char*)&task->stack->r2)+i));
    3b7a:	687b      	ldr	r3, [r7, #4]
    3b7c:	685b      	ldr	r3, [r3, #4]
    3b7e:	683a      	ldr	r2, [r7, #0]
    3b80:	6812      	ldr	r2, [r2, #0]
    3b82:	f102 0130 	add.w	r1, r2, #48	; 0x30
    3b86:	68fa      	ldr	r2, [r7, #12]
    3b88:	188a      	adds	r2, r1, r2
    3b8a:	7812      	ldrb	r2, [r2, #0]
    3b8c:	6879      	ldr	r1, [r7, #4]
    3b8e:	18cb      	adds	r3, r1, r3
    3b90:	721a      	strb	r2, [r3, #8]
    3b92:	687b      	ldr	r3, [r7, #4]
    3b94:	685b      	ldr	r3, [r3, #4]
    3b96:	f103 0201 	add.w	r2, r3, #1
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	605a      	str	r2, [r3, #4]
    3b9e:	687b      	ldr	r3, [r7, #4]
    3ba0:	685b      	ldr	r3, [r3, #4]
    3ba2:	2b3f      	cmp	r3, #63	; 0x3f
    3ba4:	dd03      	ble.n	3bae <mq_write+0x4e>
    3ba6:	687b      	ldr	r3, [r7, #4]
    3ba8:	f04f 0200 	mov.w	r2, #0
    3bac:	605a      	str	r2, [r3, #4]
		  struct task_control_block *task)
{
	size_t i;
	const char *buf = (const char*)task->stack->r1;
	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
    3bae:	68fb      	ldr	r3, [r7, #12]
    3bb0:	f103 0301 	add.w	r3, r3, #1
    3bb4:	60fb      	str	r3, [r7, #12]
    3bb6:	68fb      	ldr	r3, [r7, #12]
    3bb8:	2b03      	cmp	r3, #3
    3bba:	d9de      	bls.n	3b7a <mq_write+0x1a>
		PIPE_PUSH(*pipe,*(((char*)&task->stack->r2)+i));
	/* Copy data into pipe */
	for (i = 0; i < task->stack->r2; i++)
    3bbc:	f04f 0300 	mov.w	r3, #0
    3bc0:	60fb      	str	r3, [r7, #12]
    3bc2:	e01a      	b.n	3bfa <mq_write+0x9a>
		PIPE_PUSH(*pipe,buf[i]);
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	685b      	ldr	r3, [r3, #4]
    3bc8:	68b9      	ldr	r1, [r7, #8]
    3bca:	68fa      	ldr	r2, [r7, #12]
    3bcc:	188a      	adds	r2, r1, r2
    3bce:	7812      	ldrb	r2, [r2, #0]
    3bd0:	6879      	ldr	r1, [r7, #4]
    3bd2:	18cb      	adds	r3, r1, r3
    3bd4:	721a      	strb	r2, [r3, #8]
    3bd6:	687b      	ldr	r3, [r7, #4]
    3bd8:	685b      	ldr	r3, [r3, #4]
    3bda:	f103 0201 	add.w	r2, r3, #1
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	605a      	str	r2, [r3, #4]
    3be2:	687b      	ldr	r3, [r7, #4]
    3be4:	685b      	ldr	r3, [r3, #4]
    3be6:	2b3f      	cmp	r3, #63	; 0x3f
    3be8:	dd03      	ble.n	3bf2 <mq_write+0x92>
    3bea:	687b      	ldr	r3, [r7, #4]
    3bec:	f04f 0200 	mov.w	r2, #0
    3bf0:	605a      	str	r2, [r3, #4]
	const char *buf = (const char*)task->stack->r1;
	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
		PIPE_PUSH(*pipe,*(((char*)&task->stack->r2)+i));
	/* Copy data into pipe */
	for (i = 0; i < task->stack->r2; i++)
    3bf2:	68fb      	ldr	r3, [r7, #12]
    3bf4:	f103 0301 	add.w	r3, r3, #1
    3bf8:	60fb      	str	r3, [r7, #12]
    3bfa:	683b      	ldr	r3, [r7, #0]
    3bfc:	681b      	ldr	r3, [r3, #0]
    3bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3c00:	68fb      	ldr	r3, [r7, #12]
    3c02:	429a      	cmp	r2, r3
    3c04:	d8de      	bhi.n	3bc4 <mq_write+0x64>
		PIPE_PUSH(*pipe,buf[i]);
	return task->stack->r2;
    3c06:	683b      	ldr	r3, [r7, #0]
    3c08:	681b      	ldr	r3, [r3, #0]
    3c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    3c0c:	4618      	mov	r0, r3
    3c0e:	f107 0714 	add.w	r7, r7, #20
    3c12:	46bd      	mov	sp, r7
    3c14:	bc80      	pop	{r7}
    3c16:	4770      	bx	lr

00003c18 <_mknod>:

int
_mknod(struct pipe_ringbuffer *pipe, int dev)
{
    3c18:	b480      	push	{r7}
    3c1a:	b083      	sub	sp, #12
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	6078      	str	r0, [r7, #4]
    3c20:	6039      	str	r1, [r7, #0]
	switch(dev) {
    3c22:	683b      	ldr	r3, [r7, #0]
    3c24:	2b01      	cmp	r3, #1
    3c26:	d002      	beq.n	3c2e <_mknod+0x16>
    3c28:	2b02      	cmp	r3, #2
    3c2a:	d019      	beq.n	3c60 <_mknod+0x48>
    3c2c:	e031      	b.n	3c92 <_mknod+0x7a>
	case S_IFIFO:
		pipe->readable = fifo_readable;
    3c2e:	687a      	ldr	r2, [r7, #4]
    3c30:	f243 73b1 	movw	r3, #14257	; 0x37b1
    3c34:	f2c0 0300 	movt	r3, #0
    3c38:	6493      	str	r3, [r2, #72]	; 0x48
		pipe->writable = fifo_writable;
    3c3a:	687a      	ldr	r2, [r7, #4]
    3c3c:	f643 2305 	movw	r3, #14853	; 0x3a05
    3c40:	f2c0 0300 	movt	r3, #0
    3c44:	64d3      	str	r3, [r2, #76]	; 0x4c
		pipe->read = fifo_read;
    3c46:	687a      	ldr	r2, [r7, #4]
    3c48:	f643 03e9 	movw	r3, #14569	; 0x38e9
    3c4c:	f2c0 0300 	movt	r3, #0
    3c50:	6513      	str	r3, [r2, #80]	; 0x50
		pipe->write = fifo_write;
    3c52:	687a      	ldr	r2, [r7, #4]
    3c54:	f643 23f1 	movw	r3, #15089	; 0x3af1
    3c58:	f2c0 0300 	movt	r3, #0
    3c5c:	6553      	str	r3, [r2, #84]	; 0x54
		break;
    3c5e:	e01b      	b.n	3c98 <_mknod+0x80>
	case S_IMSGQ:
		pipe->readable = mq_readable;
    3c60:	687a      	ldr	r2, [r7, #4]
    3c62:	f643 0321 	movw	r3, #14369	; 0x3821
    3c66:	f2c0 0300 	movt	r3, #0
    3c6a:	6493      	str	r3, [r2, #72]	; 0x48
		pipe->writable = mq_writable;
    3c6c:	687a      	ldr	r2, [r7, #4]
    3c6e:	f643 2379 	movw	r3, #14969	; 0x3a79
    3c72:	f2c0 0300 	movt	r3, #0
    3c76:	64d3      	str	r3, [r2, #76]	; 0x4c
		pipe->read = mq_read;
    3c78:	687a      	ldr	r2, [r7, #4]
    3c7a:	f643 1359 	movw	r3, #14681	; 0x3959
    3c7e:	f2c0 0300 	movt	r3, #0
    3c82:	6513      	str	r3, [r2, #80]	; 0x50
		pipe->write = mq_write;
    3c84:	687a      	ldr	r2, [r7, #4]
    3c86:	f643 3361 	movw	r3, #15201	; 0x3b61
    3c8a:	f2c0 0300 	movt	r3, #0
    3c8e:	6553      	str	r3, [r2, #84]	; 0x54
		break;
    3c90:	e002      	b.n	3c98 <_mknod+0x80>
	default:
		return 1;
    3c92:	f04f 0301 	mov.w	r3, #1
    3c96:	e001      	b.n	3c9c <_mknod+0x84>
	}
	return 0;
    3c98:	f04f 0300 	mov.w	r3, #0
}
    3c9c:	4618      	mov	r0, r3
    3c9e:	f107 070c 	add.w	r7, r7, #12
    3ca2:	46bd      	mov	sp, r7
    3ca4:	bc80      	pop	{r7}
    3ca6:	4770      	bx	lr

00003ca8 <main>:

int main()
{
    3ca8:	b590      	push	{r4, r7, lr}
    3caa:	f5ad 4d8c 	sub.w	sp, sp, #17920	; 0x4600
    3cae:	b095      	sub	sp, #84	; 0x54
    3cb0:	af00      	add	r7, sp, #0
	unsigned int stacks[TASK_LIMIT][STACK_SIZE];
	//struct task_control_block tasks[TASK_LIMIT];
	struct pipe_ringbuffer pipes[PIPE_LIMIT];
	struct task_control_block *ready_list[PRIORITY_LIMIT + 1];  /* [0 ... 39] */
	struct task_control_block *wait_list = NULL;
    3cb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
    3cb6:	f1a3 0350 	sub.w	r3, r3, #80	; 0x50
    3cba:	f04f 0200 	mov.w	r2, #0
    3cbe:	601a      	str	r2, [r3, #0]
	//size_t task_count = 0;
	size_t current_task = 0;
    3cc0:	f04f 0300 	mov.w	r3, #0
    3cc4:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    3cc8:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    3ccc:	6003      	str	r3, [r0, #0]
	size_t i;
	struct task_control_block *task;
	int timeup;
	unsigned int tick_count = 0;
    3cce:	f04f 0300 	mov.w	r3, #0
    3cd2:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    3cd6:	f101 013c 	add.w	r1, r1, #60	; 0x3c
    3cda:	600b      	str	r3, [r1, #0]

	SysTick_Config(configCPU_CLOCK_HZ / configTICK_RATE_HZ);
    3cdc:	f64f 4080 	movw	r0, #64640	; 0xfc80
    3ce0:	f2c0 000a 	movt	r0, #10
    3ce4:	f7fe febe 	bl	2a64 <SysTick_Config>

	init_rs232();
    3ce8:	f7fe fdc0 	bl	286c <init_rs232>
	__enable_irq();
    3cec:	f7fe fe4c 	bl	2988 <__enable_irq>

	tasks[task_count].stack = (void*)init_task(stacks[task_count], &first);
    3cf0:	f240 03e8 	movw	r3, #232	; 0xe8
    3cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf8:	681c      	ldr	r4, [r3, #0]
    3cfa:	f240 03e8 	movw	r3, #232	; 0xe8
    3cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d02:	681b      	ldr	r3, [r3, #0]
    3d04:	ea4f 22c3 	mov.w	r2, r3, lsl #11
    3d08:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
    3d0c:	f1a3 032c 	sub.w	r3, r3, #44	; 0x2c
    3d10:	189b      	adds	r3, r3, r2
    3d12:	4618      	mov	r0, r3
    3d14:	f243 41a1 	movw	r1, #13473	; 0x34a1
    3d18:	f2c0 0100 	movt	r1, #0
    3d1c:	f7ff fc16 	bl	354c <init_task>
    3d20:	4601      	mov	r1, r0
    3d22:	f240 0228 	movw	r2, #40	; 0x28
    3d26:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d2a:	4623      	mov	r3, r4
    3d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3d30:	191b      	adds	r3, r3, r4
    3d32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3d36:	18d3      	adds	r3, r2, r3
    3d38:	6019      	str	r1, [r3, #0]
	tasks[task_count].pid = 0;
    3d3a:	f240 03e8 	movw	r3, #232	; 0xe8
    3d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d42:	6819      	ldr	r1, [r3, #0]
    3d44:	f240 0228 	movw	r2, #40	; 0x28
    3d48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d4c:	460b      	mov	r3, r1
    3d4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3d52:	185b      	adds	r3, r3, r1
    3d54:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3d58:	18d3      	adds	r3, r2, r3
    3d5a:	f103 0304 	add.w	r3, r3, #4
    3d5e:	f04f 0200 	mov.w	r2, #0
    3d62:	601a      	str	r2, [r3, #0]
	tasks[task_count].priority = PRIORITY_DEFAULT;
    3d64:	f240 03e8 	movw	r3, #232	; 0xe8
    3d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d6c:	6819      	ldr	r1, [r3, #0]
    3d6e:	f240 0228 	movw	r2, #40	; 0x28
    3d72:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d76:	460b      	mov	r3, r1
    3d78:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3d7c:	185b      	adds	r3, r3, r1
    3d7e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3d82:	18d3      	adds	r3, r2, r3
    3d84:	f103 030c 	add.w	r3, r3, #12
    3d88:	f04f 0214 	mov.w	r2, #20
    3d8c:	601a      	str	r2, [r3, #0]
	task_count++;
    3d8e:	f240 03e8 	movw	r3, #232	; 0xe8
    3d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d96:	681b      	ldr	r3, [r3, #0]
    3d98:	f103 0201 	add.w	r2, r3, #1
    3d9c:	f240 03e8 	movw	r3, #232	; 0xe8
    3da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3da4:	601a      	str	r2, [r3, #0]

	/* Initialize all pipes */
	for (i = 0; i < PIPE_LIMIT; i++)
    3da6:	f04f 0300 	mov.w	r3, #0
    3daa:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    3dae:	f102 0248 	add.w	r2, r2, #72	; 0x48
    3db2:	6013      	str	r3, [r2, #0]
    3db4:	e03e      	b.n	3e34 <main+0x18c>
		pipes[i].start = pipes[i].end = 0;
    3db6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    3dba:	f1a3 03ac 	sub.w	r3, r3, #172	; 0xac
    3dbe:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    3dc2:	f100 0048 	add.w	r0, r0, #72	; 0x48
    3dc6:	6802      	ldr	r2, [r0, #0]
    3dc8:	f04f 0158 	mov.w	r1, #88	; 0x58
    3dcc:	fb01 f202 	mul.w	r2, r1, r2
    3dd0:	189b      	adds	r3, r3, r2
    3dd2:	f103 0304 	add.w	r3, r3, #4
    3dd6:	f04f 0200 	mov.w	r2, #0
    3dda:	601a      	str	r2, [r3, #0]
    3ddc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    3de0:	f1a3 03ac 	sub.w	r3, r3, #172	; 0xac
    3de4:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    3de8:	f101 0148 	add.w	r1, r1, #72	; 0x48
    3dec:	680a      	ldr	r2, [r1, #0]
    3dee:	f04f 0158 	mov.w	r1, #88	; 0x58
    3df2:	fb01 f202 	mul.w	r2, r1, r2
    3df6:	189b      	adds	r3, r3, r2
    3df8:	f103 0304 	add.w	r3, r3, #4
    3dfc:	681a      	ldr	r2, [r3, #0]
    3dfe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    3e02:	f1a3 03ac 	sub.w	r3, r3, #172	; 0xac
    3e06:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    3e0a:	f100 0048 	add.w	r0, r0, #72	; 0x48
    3e0e:	6801      	ldr	r1, [r0, #0]
    3e10:	f04f 0058 	mov.w	r0, #88	; 0x58
    3e14:	fb00 f101 	mul.w	r1, r0, r1
    3e18:	185b      	adds	r3, r3, r1
    3e1a:	601a      	str	r2, [r3, #0]
	tasks[task_count].pid = 0;
	tasks[task_count].priority = PRIORITY_DEFAULT;
	task_count++;

	/* Initialize all pipes */
	for (i = 0; i < PIPE_LIMIT; i++)
    3e1c:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    3e20:	f101 0148 	add.w	r1, r1, #72	; 0x48
    3e24:	680b      	ldr	r3, [r1, #0]
    3e26:	f103 0301 	add.w	r3, r3, #1
    3e2a:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    3e2e:	f102 0248 	add.w	r2, r2, #72	; 0x48
    3e32:	6013      	str	r3, [r2, #0]
    3e34:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    3e38:	f100 0048 	add.w	r0, r0, #72	; 0x48
    3e3c:	6803      	ldr	r3, [r0, #0]
    3e3e:	2b0f      	cmp	r3, #15
    3e40:	d9b9      	bls.n	3db6 <main+0x10e>
		pipes[i].start = pipes[i].end = 0;

	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
    3e42:	f04f 0300 	mov.w	r3, #0
    3e46:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    3e4a:	f101 0148 	add.w	r1, r1, #72	; 0x48
    3e4e:	600b      	str	r3, [r1, #0]
    3e50:	e01e      	b.n	3e90 <main+0x1e8>
		_mknod(&pipes[i], S_IFIFO);
    3e52:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    3e56:	f102 0248 	add.w	r2, r2, #72	; 0x48
    3e5a:	6813      	ldr	r3, [r2, #0]
    3e5c:	f04f 0258 	mov.w	r2, #88	; 0x58
    3e60:	fb02 f203 	mul.w	r2, r2, r3
    3e64:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    3e68:	f1a3 03ac 	sub.w	r3, r3, #172	; 0xac
    3e6c:	189b      	adds	r3, r3, r2
    3e6e:	4618      	mov	r0, r3
    3e70:	f04f 0101 	mov.w	r1, #1
    3e74:	f7ff fed0 	bl	3c18 <_mknod>
	/* Initialize all pipes */
	for (i = 0; i < PIPE_LIMIT; i++)
		pipes[i].start = pipes[i].end = 0;

	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
    3e78:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    3e7c:	f100 0048 	add.w	r0, r0, #72	; 0x48
    3e80:	6803      	ldr	r3, [r0, #0]
    3e82:	f103 0301 	add.w	r3, r3, #1
    3e86:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    3e8a:	f101 0148 	add.w	r1, r1, #72	; 0x48
    3e8e:	600b      	str	r3, [r1, #0]
    3e90:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    3e94:	f102 0248 	add.w	r2, r2, #72	; 0x48
    3e98:	6813      	ldr	r3, [r2, #0]
    3e9a:	2b0b      	cmp	r3, #11
    3e9c:	d9d9      	bls.n	3e52 <main+0x1aa>
		_mknod(&pipes[i], S_IFIFO);

	/* Initialize ready lists */
	for (i = 0; i <= PRIORITY_LIMIT; i++)
    3e9e:	f04f 0300 	mov.w	r3, #0
    3ea2:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    3ea6:	f100 0048 	add.w	r0, r0, #72	; 0x48
    3eaa:	6003      	str	r3, [r0, #0]
    3eac:	e018      	b.n	3ee0 <main+0x238>
		ready_list[i] = NULL;
    3eae:	f107 0350 	add.w	r3, r7, #80	; 0x50
    3eb2:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
    3eb6:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    3eba:	f101 0148 	add.w	r1, r1, #72	; 0x48
    3ebe:	680a      	ldr	r2, [r1, #0]
    3ec0:	f04f 0100 	mov.w	r1, #0
    3ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
		_mknod(&pipes[i], S_IFIFO);

	/* Initialize ready lists */
	for (i = 0; i <= PRIORITY_LIMIT; i++)
    3ec8:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    3ecc:	f102 0248 	add.w	r2, r2, #72	; 0x48
    3ed0:	6813      	ldr	r3, [r2, #0]
    3ed2:	f103 0301 	add.w	r3, r3, #1
    3ed6:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    3eda:	f100 0048 	add.w	r0, r0, #72	; 0x48
    3ede:	6003      	str	r3, [r0, #0]
    3ee0:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    3ee4:	f101 0148 	add.w	r1, r1, #72	; 0x48
    3ee8:	680b      	ldr	r3, [r1, #0]
    3eea:	2b27      	cmp	r3, #39	; 0x27
    3eec:	d9df      	bls.n	3eae <main+0x206>
		ready_list[i] = NULL;

	while (1) {
		tasks[current_task].stack = activate(tasks[current_task].stack);
    3eee:	f240 0228 	movw	r2, #40	; 0x28
    3ef2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ef6:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    3efa:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    3efe:	6819      	ldr	r1, [r3, #0]
    3f00:	460b      	mov	r3, r1
    3f02:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3f06:	185b      	adds	r3, r3, r1
    3f08:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3f0c:	18d3      	adds	r3, r2, r3
    3f0e:	681b      	ldr	r3, [r3, #0]
    3f10:	4618      	mov	r0, r3
    3f12:	f7fe fbdd 	bl	26d0 <activate>
    3f16:	f240 0228 	movw	r2, #40	; 0x28
    3f1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3f1e:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    3f22:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    3f26:	6819      	ldr	r1, [r3, #0]
    3f28:	460b      	mov	r3, r1
    3f2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3f2e:	185b      	adds	r3, r3, r1
    3f30:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3f34:	18d3      	adds	r3, r2, r3
    3f36:	6018      	str	r0, [r3, #0]
		tasks[current_task].status = TASK_READY;
    3f38:	f240 0228 	movw	r2, #40	; 0x28
    3f3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3f40:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    3f44:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    3f48:	6801      	ldr	r1, [r0, #0]
    3f4a:	460b      	mov	r3, r1
    3f4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3f50:	185b      	adds	r3, r3, r1
    3f52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3f56:	18d3      	adds	r3, r2, r3
    3f58:	f103 0308 	add.w	r3, r3, #8
    3f5c:	f04f 0200 	mov.w	r2, #0
    3f60:	601a      	str	r2, [r3, #0]
		timeup = 0;
    3f62:	f04f 0300 	mov.w	r3, #0
    3f66:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    3f6a:	f101 0140 	add.w	r1, r1, #64	; 0x40
    3f6e:	600b      	str	r3, [r1, #0]

		switch (tasks[current_task].stack->r7) {
    3f70:	f240 0228 	movw	r2, #40	; 0x28
    3f74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3f78:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    3f7c:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    3f80:	6819      	ldr	r1, [r3, #0]
    3f82:	460b      	mov	r3, r1
    3f84:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3f88:	185b      	adds	r3, r3, r1
    3f8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3f8e:	18d3      	adds	r3, r2, r3
    3f90:	681b      	ldr	r3, [r3, #0]
    3f92:	68db      	ldr	r3, [r3, #12]
    3f94:	f103 33ff 	add.w	r3, r3, #4294967295
    3f98:	2b08      	cmp	r3, #8
    3f9a:	f200 841a 	bhi.w	47d2 <main+0xb2a>
    3f9e:	a001      	add	r0, pc, #4	; (adr r0, 3fa4 <main+0x2fc>)
    3fa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    3fa4:	00003fc9 	.word	0x00003fc9
    3fa8:	0000429f 	.word	0x0000429f
    3fac:	000042cf 	.word	0x000042cf
    3fb0:	00004313 	.word	0x00004313
    3fb4:	00004357 	.word	0x00004357
    3fb8:	000043b1 	.word	0x000043b1
    3fbc:	000044d7 	.word	0x000044d7
    3fc0:	0000464f 	.word	0x0000464f
    3fc4:	00004729 	.word	0x00004729
		case 0x1: /* fork */
			if (task_count == TASK_LIMIT) {
    3fc8:	f240 03e8 	movw	r3, #232	; 0xe8
    3fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fd0:	681b      	ldr	r3, [r3, #0]
    3fd2:	2b08      	cmp	r3, #8
    3fd4:	d115      	bne.n	4002 <main+0x35a>
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
    3fd6:	f240 0228 	movw	r2, #40	; 0x28
    3fda:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3fde:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    3fe2:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    3fe6:	6819      	ldr	r1, [r3, #0]
    3fe8:	460b      	mov	r3, r1
    3fea:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3fee:	185b      	adds	r3, r3, r1
    3ff0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3ff4:	18d3      	adds	r3, r2, r3
    3ff6:	681b      	ldr	r3, [r3, #0]
    3ff8:	f04f 32ff 	mov.w	r2, #4294967295
    3ffc:	629a      	str	r2, [r3, #40]	; 0x28
				tasks[task_count].next = NULL;
				task_push(&ready_list[tasks[task_count].priority], &tasks[task_count]);
				/* There is now one more task */
				task_count++;
			}
			break;
    3ffe:	f000 bcd3 	b.w	49a8 <main+0xd00>
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
			}
			else {
				/* Compute how much of the stack is used */
				size_t used = stacks[current_task] + STACK_SIZE
    4002:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4006:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    400a:	6803      	ldr	r3, [r0, #0]
    400c:	f103 0301 	add.w	r3, r3, #1
    4010:	ea4f 22c3 	mov.w	r2, r3, lsl #11
    4014:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
    4018:	f1a3 032c 	sub.w	r3, r3, #44	; 0x2c
    401c:	189b      	adds	r3, r3, r2
					      - (unsigned int*)tasks[current_task].stack;
    401e:	4618      	mov	r0, r3
    4020:	f240 0228 	movw	r2, #40	; 0x28
    4024:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4028:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    402c:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4030:	6819      	ldr	r1, [r3, #0]
    4032:	460b      	mov	r3, r1
    4034:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4038:	185b      	adds	r3, r3, r1
    403a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    403e:	18d3      	adds	r3, r2, r3
    4040:	681b      	ldr	r3, [r3, #0]
    4042:	1ac3      	subs	r3, r0, r3
    4044:	ea4f 03a3 	mov.w	r3, r3, asr #2
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
			}
			else {
				/* Compute how much of the stack is used */
				size_t used = stacks[current_task] + STACK_SIZE
    4048:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    404c:	f100 0038 	add.w	r0, r0, #56	; 0x38
    4050:	6003      	str	r3, [r0, #0]
					      - (unsigned int*)tasks[current_task].stack;
				/* New stack is END - used */
				tasks[task_count].stack = (void*)(stacks[task_count] + STACK_SIZE - used);
    4052:	f240 03e8 	movw	r3, #232	; 0xe8
    4056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    405a:	6819      	ldr	r1, [r3, #0]
    405c:	f240 03e8 	movw	r3, #232	; 0xe8
    4060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4064:	681b      	ldr	r3, [r3, #0]
    4066:	f103 0301 	add.w	r3, r3, #1
    406a:	ea4f 2243 	mov.w	r2, r3, lsl #9
    406e:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4072:	f100 0038 	add.w	r0, r0, #56	; 0x38
    4076:	6803      	ldr	r3, [r0, #0]
    4078:	1ad3      	subs	r3, r2, r3
    407a:	ea4f 0283 	mov.w	r2, r3, lsl #2
    407e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
    4082:	f1a3 032c 	sub.w	r3, r3, #44	; 0x2c
    4086:	1898      	adds	r0, r3, r2
    4088:	f240 0228 	movw	r2, #40	; 0x28
    408c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4090:	460b      	mov	r3, r1
    4092:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4096:	185b      	adds	r3, r3, r1
    4098:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    409c:	18d3      	adds	r3, r2, r3
    409e:	6018      	str	r0, [r3, #0]
				/* Copy only the used part of the stack */
				memcpy(tasks[task_count].stack, tasks[current_task].stack,
    40a0:	f240 03e8 	movw	r3, #232	; 0xe8
    40a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40a8:	6819      	ldr	r1, [r3, #0]
    40aa:	f240 0228 	movw	r2, #40	; 0x28
    40ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    40b2:	460b      	mov	r3, r1
    40b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    40b8:	185b      	adds	r3, r3, r1
    40ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    40be:	18d3      	adds	r3, r2, r3
    40c0:	6818      	ldr	r0, [r3, #0]
    40c2:	f240 0228 	movw	r2, #40	; 0x28
    40c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    40ca:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    40ce:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    40d2:	6819      	ldr	r1, [r3, #0]
    40d4:	460b      	mov	r3, r1
    40d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    40da:	185b      	adds	r3, r3, r1
    40dc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    40e0:	18d3      	adds	r3, r2, r3
    40e2:	681a      	ldr	r2, [r3, #0]
    40e4:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    40e8:	f101 0138 	add.w	r1, r1, #56	; 0x38
    40ec:	680b      	ldr	r3, [r1, #0]
    40ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    40f2:	4601      	mov	r1, r0
    40f4:	4608      	mov	r0, r1
    40f6:	4611      	mov	r1, r2
    40f8:	461a      	mov	r2, r3
    40fa:	f000 fd91 	bl	4c20 <memcpy>
				       used * sizeof(unsigned int));
				/* Set PID */
				tasks[task_count].pid = task_count;
    40fe:	f240 03e8 	movw	r3, #232	; 0xe8
    4102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4106:	6819      	ldr	r1, [r3, #0]
    4108:	f240 03e8 	movw	r3, #232	; 0xe8
    410c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4110:	681b      	ldr	r3, [r3, #0]
    4112:	4618      	mov	r0, r3
    4114:	f240 0228 	movw	r2, #40	; 0x28
    4118:	f2c2 0200 	movt	r2, #8192	; 0x2000
    411c:	460b      	mov	r3, r1
    411e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4122:	185b      	adds	r3, r3, r1
    4124:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4128:	18d3      	adds	r3, r2, r3
    412a:	f103 0304 	add.w	r3, r3, #4
    412e:	6018      	str	r0, [r3, #0]
				/* Set priority, inherited from forked task */
				tasks[task_count].priority = tasks[current_task].priority;
    4130:	f240 03e8 	movw	r3, #232	; 0xe8
    4134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4138:	6819      	ldr	r1, [r3, #0]
    413a:	f240 0228 	movw	r2, #40	; 0x28
    413e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4142:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4146:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    414a:	6818      	ldr	r0, [r3, #0]
    414c:	4603      	mov	r3, r0
    414e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4152:	181b      	adds	r3, r3, r0
    4154:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4158:	18d3      	adds	r3, r2, r3
    415a:	f103 030c 	add.w	r3, r3, #12
    415e:	6818      	ldr	r0, [r3, #0]
    4160:	f240 0228 	movw	r2, #40	; 0x28
    4164:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4168:	460b      	mov	r3, r1
    416a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    416e:	185b      	adds	r3, r3, r1
    4170:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4174:	18d3      	adds	r3, r2, r3
    4176:	f103 030c 	add.w	r3, r3, #12
    417a:	6018      	str	r0, [r3, #0]
				/* Set return values in each process */
				tasks[current_task].stack->r0 = task_count;
    417c:	f240 0228 	movw	r2, #40	; 0x28
    4180:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4184:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4188:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    418c:	6801      	ldr	r1, [r0, #0]
    418e:	460b      	mov	r3, r1
    4190:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4194:	185b      	adds	r3, r3, r1
    4196:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    419a:	18d3      	adds	r3, r2, r3
    419c:	681a      	ldr	r2, [r3, #0]
    419e:	f240 03e8 	movw	r3, #232	; 0xe8
    41a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41a6:	681b      	ldr	r3, [r3, #0]
    41a8:	6293      	str	r3, [r2, #40]	; 0x28
				tasks[task_count].stack->r0 = 0;
    41aa:	f240 03e8 	movw	r3, #232	; 0xe8
    41ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41b2:	6819      	ldr	r1, [r3, #0]
    41b4:	f240 0228 	movw	r2, #40	; 0x28
    41b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    41bc:	460b      	mov	r3, r1
    41be:	ea4f 0343 	mov.w	r3, r3, lsl #1
    41c2:	185b      	adds	r3, r3, r1
    41c4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    41c8:	18d3      	adds	r3, r2, r3
    41ca:	681b      	ldr	r3, [r3, #0]
    41cc:	f04f 0200 	mov.w	r2, #0
    41d0:	629a      	str	r2, [r3, #40]	; 0x28
				tasks[task_count].prev = NULL;
    41d2:	f240 03e8 	movw	r3, #232	; 0xe8
    41d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41da:	6819      	ldr	r1, [r3, #0]
    41dc:	f240 0228 	movw	r2, #40	; 0x28
    41e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    41e4:	460b      	mov	r3, r1
    41e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    41ea:	185b      	adds	r3, r3, r1
    41ec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    41f0:	18d3      	adds	r3, r2, r3
    41f2:	f103 0310 	add.w	r3, r3, #16
    41f6:	f04f 0200 	mov.w	r2, #0
    41fa:	601a      	str	r2, [r3, #0]
				tasks[task_count].next = NULL;
    41fc:	f240 03e8 	movw	r3, #232	; 0xe8
    4200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4204:	6819      	ldr	r1, [r3, #0]
    4206:	f240 0228 	movw	r2, #40	; 0x28
    420a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    420e:	460b      	mov	r3, r1
    4210:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4214:	185b      	adds	r3, r3, r1
    4216:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    421a:	18d3      	adds	r3, r2, r3
    421c:	f103 0314 	add.w	r3, r3, #20
    4220:	f04f 0200 	mov.w	r2, #0
    4224:	601a      	str	r2, [r3, #0]
				task_push(&ready_list[tasks[task_count].priority], &tasks[task_count]);
    4226:	f240 03e8 	movw	r3, #232	; 0xe8
    422a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    422e:	6819      	ldr	r1, [r3, #0]
    4230:	f240 0228 	movw	r2, #40	; 0x28
    4234:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4238:	460b      	mov	r3, r1
    423a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    423e:	185b      	adds	r3, r3, r1
    4240:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4244:	18d3      	adds	r3, r2, r3
    4246:	f103 030c 	add.w	r3, r3, #12
    424a:	681b      	ldr	r3, [r3, #0]
    424c:	ea4f 0283 	mov.w	r2, r3, lsl #2
    4250:	f107 0350 	add.w	r3, r7, #80	; 0x50
    4254:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
    4258:	1899      	adds	r1, r3, r2
    425a:	f240 03e8 	movw	r3, #232	; 0xe8
    425e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4262:	681a      	ldr	r2, [r3, #0]
    4264:	4613      	mov	r3, r2
    4266:	ea4f 0343 	mov.w	r3, r3, lsl #1
    426a:	189b      	adds	r3, r3, r2
    426c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4270:	461a      	mov	r2, r3
    4272:	f240 0328 	movw	r3, #40	; 0x28
    4276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    427a:	18d3      	adds	r3, r2, r3
    427c:	4608      	mov	r0, r1
    427e:	4619      	mov	r1, r3
    4280:	f7ff f97c 	bl	357c <task_push>
				/* There is now one more task */
				task_count++;
    4284:	f240 03e8 	movw	r3, #232	; 0xe8
    4288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    428c:	681b      	ldr	r3, [r3, #0]
    428e:	f103 0201 	add.w	r2, r3, #1
    4292:	f240 03e8 	movw	r3, #232	; 0xe8
    4296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    429a:	601a      	str	r2, [r3, #0]
			}
			break;
    429c:	e384      	b.n	49a8 <main+0xd00>
		case 0x2: /* getpid */
			tasks[current_task].stack->r0 = current_task;
    429e:	f240 0228 	movw	r2, #40	; 0x28
    42a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    42a6:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    42aa:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    42ae:	6819      	ldr	r1, [r3, #0]
    42b0:	460b      	mov	r3, r1
    42b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    42b6:	185b      	adds	r3, r3, r1
    42b8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    42bc:	18d3      	adds	r3, r2, r3
    42be:	681b      	ldr	r3, [r3, #0]
    42c0:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    42c4:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    42c8:	6802      	ldr	r2, [r0, #0]
    42ca:	629a      	str	r2, [r3, #40]	; 0x28
			break;
    42cc:	e36c      	b.n	49a8 <main+0xd00>
		case 0x3: /* write */
			_write(&tasks[current_task], tasks, task_count, pipes);
    42ce:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    42d2:	f101 014c 	add.w	r1, r1, #76	; 0x4c
    42d6:	680a      	ldr	r2, [r1, #0]
    42d8:	4613      	mov	r3, r2
    42da:	ea4f 0343 	mov.w	r3, r3, lsl #1
    42de:	189b      	adds	r3, r3, r2
    42e0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    42e4:	461a      	mov	r2, r3
    42e6:	f240 0328 	movw	r3, #40	; 0x28
    42ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ee:	18d1      	adds	r1, r2, r3
    42f0:	f240 03e8 	movw	r3, #232	; 0xe8
    42f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42f8:	681a      	ldr	r2, [r3, #0]
    42fa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    42fe:	f1a3 03ac 	sub.w	r3, r3, #172	; 0xac
    4302:	4608      	mov	r0, r1
    4304:	f240 0128 	movw	r1, #40	; 0x28
    4308:	f2c2 0100 	movt	r1, #8192	; 0x2000
    430c:	f7ff f9f8 	bl	3700 <_write>
			break;
    4310:	e34a      	b.n	49a8 <main+0xd00>
		case 0x4: /* read */
			_read(&tasks[current_task], tasks, task_count, pipes);
    4312:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4316:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    431a:	681a      	ldr	r2, [r3, #0]
    431c:	4613      	mov	r3, r2
    431e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4322:	189b      	adds	r3, r3, r2
    4324:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4328:	461a      	mov	r2, r3
    432a:	f240 0328 	movw	r3, #40	; 0x28
    432e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4332:	18d1      	adds	r1, r2, r3
    4334:	f240 03e8 	movw	r3, #232	; 0xe8
    4338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    433c:	681a      	ldr	r2, [r3, #0]
    433e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    4342:	f1a3 03ac 	sub.w	r3, r3, #172	; 0xac
    4346:	4608      	mov	r0, r1
    4348:	f240 0128 	movw	r1, #40	; 0x28
    434c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    4350:	f7ff f97e 	bl	3650 <_read>
			break;
    4354:	e328      	b.n	49a8 <main+0xd00>
		case 0x5: /* interrupt_wait */
			/* Enable interrupt */
			NVIC_EnableIRQ(tasks[current_task].stack->r0);
    4356:	f240 0228 	movw	r2, #40	; 0x28
    435a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    435e:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4362:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    4366:	6801      	ldr	r1, [r0, #0]
    4368:	460b      	mov	r3, r1
    436a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    436e:	185b      	adds	r3, r3, r1
    4370:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4374:	18d3      	adds	r3, r2, r3
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    437a:	b2db      	uxtb	r3, r3
    437c:	b25b      	sxtb	r3, r3
    437e:	4618      	mov	r0, r3
    4380:	f7fe fb08 	bl	2994 <NVIC_EnableIRQ>
			/* Block task waiting for interrupt to happen */
			tasks[current_task].status = TASK_WAIT_INTR;
    4384:	f240 0228 	movw	r2, #40	; 0x28
    4388:	f2c2 0200 	movt	r2, #8192	; 0x2000
    438c:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4390:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4394:	6819      	ldr	r1, [r3, #0]
    4396:	460b      	mov	r3, r1
    4398:	ea4f 0343 	mov.w	r3, r3, lsl #1
    439c:	185b      	adds	r3, r3, r1
    439e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    43a2:	18d3      	adds	r3, r2, r3
    43a4:	f103 0308 	add.w	r3, r3, #8
    43a8:	f04f 0203 	mov.w	r2, #3
    43ac:	601a      	str	r2, [r3, #0]
			break;
    43ae:	e2fb      	b.n	49a8 <main+0xd00>
		case 0x6: /* getpriority */
			{
				int who = tasks[current_task].stack->r0;
    43b0:	f240 0228 	movw	r2, #40	; 0x28
    43b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    43b8:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    43bc:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    43c0:	6801      	ldr	r1, [r0, #0]
    43c2:	460b      	mov	r3, r1
    43c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    43c8:	185b      	adds	r3, r3, r1
    43ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    43ce:	18d3      	adds	r3, r2, r3
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43d4:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    43d8:	f101 0134 	add.w	r1, r1, #52	; 0x34
    43dc:	600b      	str	r3, [r1, #0]
				if (who > 0 && who < (int)task_count)
    43de:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    43e2:	f102 0234 	add.w	r2, r2, #52	; 0x34
    43e6:	6813      	ldr	r3, [r2, #0]
    43e8:	2b00      	cmp	r3, #0
    43ea:	dd32      	ble.n	4452 <main+0x7aa>
    43ec:	f240 03e8 	movw	r3, #232	; 0xe8
    43f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43f4:	681b      	ldr	r3, [r3, #0]
    43f6:	461a      	mov	r2, r3
    43f8:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    43fc:	f100 0034 	add.w	r0, r0, #52	; 0x34
    4400:	6803      	ldr	r3, [r0, #0]
    4402:	429a      	cmp	r2, r3
    4404:	dd25      	ble.n	4452 <main+0x7aa>
					tasks[current_task].stack->r0 = tasks[who].priority;
    4406:	f240 0228 	movw	r2, #40	; 0x28
    440a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    440e:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4412:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4416:	6819      	ldr	r1, [r3, #0]
    4418:	460b      	mov	r3, r1
    441a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    441e:	185b      	adds	r3, r3, r1
    4420:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4424:	18d3      	adds	r3, r2, r3
    4426:	6818      	ldr	r0, [r3, #0]
    4428:	f240 0228 	movw	r2, #40	; 0x28
    442c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4430:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4434:	f103 0334 	add.w	r3, r3, #52	; 0x34
    4438:	6819      	ldr	r1, [r3, #0]
    443a:	460b      	mov	r3, r1
    443c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4440:	185b      	adds	r3, r3, r1
    4442:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4446:	18d3      	adds	r3, r2, r3
    4448:	f103 030c 	add.w	r3, r3, #12
    444c:	681b      	ldr	r3, [r3, #0]
    444e:	6283      	str	r3, [r0, #40]	; 0x28
				else if (who == 0)
					tasks[current_task].stack->r0 = tasks[current_task].priority;
				else
					tasks[current_task].stack->r0 = -1;
			} break;
    4450:	e2aa      	b.n	49a8 <main+0xd00>
		case 0x6: /* getpriority */
			{
				int who = tasks[current_task].stack->r0;
				if (who > 0 && who < (int)task_count)
					tasks[current_task].stack->r0 = tasks[who].priority;
				else if (who == 0)
    4452:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4456:	f100 0034 	add.w	r0, r0, #52	; 0x34
    445a:	6803      	ldr	r3, [r0, #0]
    445c:	2b00      	cmp	r3, #0
    445e:	d125      	bne.n	44ac <main+0x804>
					tasks[current_task].stack->r0 = tasks[current_task].priority;
    4460:	f240 0228 	movw	r2, #40	; 0x28
    4464:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4468:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    446c:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4470:	6819      	ldr	r1, [r3, #0]
    4472:	460b      	mov	r3, r1
    4474:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4478:	185b      	adds	r3, r3, r1
    447a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    447e:	18d3      	adds	r3, r2, r3
    4480:	6818      	ldr	r0, [r3, #0]
    4482:	f240 0228 	movw	r2, #40	; 0x28
    4486:	f2c2 0200 	movt	r2, #8192	; 0x2000
    448a:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    448e:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4492:	6819      	ldr	r1, [r3, #0]
    4494:	460b      	mov	r3, r1
    4496:	ea4f 0343 	mov.w	r3, r3, lsl #1
    449a:	185b      	adds	r3, r3, r1
    449c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    44a0:	18d3      	adds	r3, r2, r3
    44a2:	f103 030c 	add.w	r3, r3, #12
    44a6:	681b      	ldr	r3, [r3, #0]
    44a8:	6283      	str	r3, [r0, #40]	; 0x28
				else
					tasks[current_task].stack->r0 = -1;
			} break;
    44aa:	e27d      	b.n	49a8 <main+0xd00>
				if (who > 0 && who < (int)task_count)
					tasks[current_task].stack->r0 = tasks[who].priority;
				else if (who == 0)
					tasks[current_task].stack->r0 = tasks[current_task].priority;
				else
					tasks[current_task].stack->r0 = -1;
    44ac:	f240 0228 	movw	r2, #40	; 0x28
    44b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    44b4:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    44b8:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    44bc:	6801      	ldr	r1, [r0, #0]
    44be:	460b      	mov	r3, r1
    44c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    44c4:	185b      	adds	r3, r3, r1
    44c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    44ca:	18d3      	adds	r3, r2, r3
    44cc:	681b      	ldr	r3, [r3, #0]
    44ce:	f04f 32ff 	mov.w	r2, #4294967295
    44d2:	629a      	str	r2, [r3, #40]	; 0x28
			} break;
    44d4:	e268      	b.n	49a8 <main+0xd00>
		case 0x7: /* setpriority */
			{
				int who = tasks[current_task].stack->r0;
    44d6:	f240 0228 	movw	r2, #40	; 0x28
    44da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    44de:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    44e2:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    44e6:	6819      	ldr	r1, [r3, #0]
    44e8:	460b      	mov	r3, r1
    44ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
    44ee:	185b      	adds	r3, r3, r1
    44f0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    44f4:	18d3      	adds	r3, r2, r3
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44fa:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    44fe:	f100 0030 	add.w	r0, r0, #48	; 0x30
    4502:	6003      	str	r3, [r0, #0]
				int value = tasks[current_task].stack->r1;
    4504:	f240 0228 	movw	r2, #40	; 0x28
    4508:	f2c2 0200 	movt	r2, #8192	; 0x2000
    450c:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4510:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4514:	6819      	ldr	r1, [r3, #0]
    4516:	460b      	mov	r3, r1
    4518:	ea4f 0343 	mov.w	r3, r3, lsl #1
    451c:	185b      	adds	r3, r3, r1
    451e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4522:	18d3      	adds	r3, r2, r3
    4524:	681b      	ldr	r3, [r3, #0]
    4526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4528:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    452c:	f100 002c 	add.w	r0, r0, #44	; 0x2c
    4530:	6003      	str	r3, [r0, #0]
				value = (value < 0) ? 0 : ((value > PRIORITY_LIMIT) ? PRIORITY_LIMIT : value);
    4532:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    4536:	f101 012c 	add.w	r1, r1, #44	; 0x2c
    453a:	680b      	ldr	r3, [r1, #0]
    453c:	2b00      	cmp	r3, #0
    453e:	db08      	blt.n	4552 <main+0x8aa>
    4540:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    4544:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    4548:	6813      	ldr	r3, [r2, #0]
    454a:	2b27      	cmp	r3, #39	; 0x27
    454c:	bfa8      	it	ge
    454e:	2327      	movge	r3, #39	; 0x27
    4550:	e001      	b.n	4556 <main+0x8ae>
    4552:	f04f 0300 	mov.w	r3, #0
    4556:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    455a:	f100 002c 	add.w	r0, r0, #44	; 0x2c
    455e:	6003      	str	r3, [r0, #0]
				if (who > 0 && who < (int)task_count)
    4560:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    4564:	f101 0130 	add.w	r1, r1, #48	; 0x30
    4568:	680b      	ldr	r3, [r1, #0]
    456a:	2b00      	cmp	r3, #0
    456c:	dd25      	ble.n	45ba <main+0x912>
    456e:	f240 03e8 	movw	r3, #232	; 0xe8
    4572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4576:	681b      	ldr	r3, [r3, #0]
    4578:	461a      	mov	r2, r3
    457a:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    457e:	f100 0030 	add.w	r0, r0, #48	; 0x30
    4582:	6803      	ldr	r3, [r0, #0]
    4584:	429a      	cmp	r2, r3
    4586:	dd18      	ble.n	45ba <main+0x912>
					tasks[who].priority = value;
    4588:	f240 0228 	movw	r2, #40	; 0x28
    458c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4590:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4594:	f103 0330 	add.w	r3, r3, #48	; 0x30
    4598:	6819      	ldr	r1, [r3, #0]
    459a:	460b      	mov	r3, r1
    459c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    45a0:	185b      	adds	r3, r3, r1
    45a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    45a6:	18d3      	adds	r3, r2, r3
    45a8:	f103 030c 	add.w	r3, r3, #12
    45ac:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    45b0:	f100 002c 	add.w	r0, r0, #44	; 0x2c
    45b4:	6802      	ldr	r2, [r0, #0]
    45b6:	601a      	str	r2, [r3, #0]
    45b8:	e034      	b.n	4624 <main+0x97c>
				else if (who == 0)
    45ba:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    45be:	f101 0130 	add.w	r1, r1, #48	; 0x30
    45c2:	680b      	ldr	r3, [r1, #0]
    45c4:	2b00      	cmp	r3, #0
    45c6:	d118      	bne.n	45fa <main+0x952>
					tasks[current_task].priority = value;
    45c8:	f240 0228 	movw	r2, #40	; 0x28
    45cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    45d0:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    45d4:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    45d8:	6819      	ldr	r1, [r3, #0]
    45da:	460b      	mov	r3, r1
    45dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    45e0:	185b      	adds	r3, r3, r1
    45e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    45e6:	18d3      	adds	r3, r2, r3
    45e8:	f103 030c 	add.w	r3, r3, #12
    45ec:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    45f0:	f100 002c 	add.w	r0, r0, #44	; 0x2c
    45f4:	6802      	ldr	r2, [r0, #0]
    45f6:	601a      	str	r2, [r3, #0]
    45f8:	e014      	b.n	4624 <main+0x97c>
				else {
					tasks[current_task].stack->r0 = -1;
    45fa:	f240 0228 	movw	r2, #40	; 0x28
    45fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4602:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4606:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    460a:	6819      	ldr	r1, [r3, #0]
    460c:	460b      	mov	r3, r1
    460e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4612:	185b      	adds	r3, r3, r1
    4614:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4618:	18d3      	adds	r3, r2, r3
    461a:	681b      	ldr	r3, [r3, #0]
    461c:	f04f 32ff 	mov.w	r2, #4294967295
    4620:	629a      	str	r2, [r3, #40]	; 0x28
					break;
    4622:	e1c1      	b.n	49a8 <main+0xd00>
				}
				tasks[current_task].stack->r0 = 0;
    4624:	f240 0228 	movw	r2, #40	; 0x28
    4628:	f2c2 0200 	movt	r2, #8192	; 0x2000
    462c:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4630:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    4634:	6801      	ldr	r1, [r0, #0]
    4636:	460b      	mov	r3, r1
    4638:	ea4f 0343 	mov.w	r3, r3, lsl #1
    463c:	185b      	adds	r3, r3, r1
    463e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4642:	18d3      	adds	r3, r2, r3
    4644:	681b      	ldr	r3, [r3, #0]
    4646:	f04f 0200 	mov.w	r2, #0
    464a:	629a      	str	r2, [r3, #40]	; 0x28
			} break;
    464c:	e1ac      	b.n	49a8 <main+0xd00>
		case 0x8: /* mknod */
			if (tasks[current_task].stack->r0 < PIPE_LIMIT)
    464e:	f240 0228 	movw	r2, #40	; 0x28
    4652:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4656:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    465a:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    465e:	6819      	ldr	r1, [r3, #0]
    4660:	460b      	mov	r3, r1
    4662:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4666:	185b      	adds	r3, r3, r1
    4668:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    466c:	18d3      	adds	r3, r2, r3
    466e:	681b      	ldr	r3, [r3, #0]
    4670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4672:	2b0f      	cmp	r3, #15
    4674:	d843      	bhi.n	46fe <main+0xa56>
				tasks[current_task].stack->r0 =
    4676:	f240 0228 	movw	r2, #40	; 0x28
    467a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    467e:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4682:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    4686:	6801      	ldr	r1, [r0, #0]
    4688:	460b      	mov	r3, r1
    468a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    468e:	185b      	adds	r3, r3, r1
    4690:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4694:	18d3      	adds	r3, r2, r3
    4696:	681c      	ldr	r4, [r3, #0]
					_mknod(&pipes[tasks[current_task].stack->r0],
    4698:	f240 0228 	movw	r2, #40	; 0x28
    469c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    46a0:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    46a4:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    46a8:	6819      	ldr	r1, [r3, #0]
    46aa:	460b      	mov	r3, r1
    46ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
    46b0:	185b      	adds	r3, r3, r1
    46b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    46b6:	18d3      	adds	r3, r2, r3
    46b8:	681b      	ldr	r3, [r3, #0]
    46ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46bc:	f04f 0258 	mov.w	r2, #88	; 0x58
    46c0:	fb02 f203 	mul.w	r2, r2, r3
    46c4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    46c8:	f1a3 03ac 	sub.w	r3, r3, #172	; 0xac
    46cc:	1898      	adds	r0, r3, r2
						   tasks[current_task].stack->r2);
    46ce:	f240 0228 	movw	r2, #40	; 0x28
    46d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    46d6:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    46da:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    46de:	6819      	ldr	r1, [r3, #0]
    46e0:	460b      	mov	r3, r1
    46e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    46e6:	185b      	adds	r3, r3, r1
    46e8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    46ec:	18d3      	adds	r3, r2, r3
    46ee:	681b      	ldr	r3, [r3, #0]
    46f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				tasks[current_task].stack->r0 = 0;
			} break;
		case 0x8: /* mknod */
			if (tasks[current_task].stack->r0 < PIPE_LIMIT)
				tasks[current_task].stack->r0 =
					_mknod(&pipes[tasks[current_task].stack->r0],
    46f2:	4619      	mov	r1, r3
    46f4:	f7ff fa90 	bl	3c18 <_mknod>
    46f8:	4603      	mov	r3, r0
				}
				tasks[current_task].stack->r0 = 0;
			} break;
		case 0x8: /* mknod */
			if (tasks[current_task].stack->r0 < PIPE_LIMIT)
				tasks[current_task].stack->r0 =
    46fa:	62a3      	str	r3, [r4, #40]	; 0x28
					_mknod(&pipes[tasks[current_task].stack->r0],
						   tasks[current_task].stack->r2);
			else
				tasks[current_task].stack->r0 = -1;
			break;
    46fc:	e154      	b.n	49a8 <main+0xd00>
			if (tasks[current_task].stack->r0 < PIPE_LIMIT)
				tasks[current_task].stack->r0 =
					_mknod(&pipes[tasks[current_task].stack->r0],
						   tasks[current_task].stack->r2);
			else
				tasks[current_task].stack->r0 = -1;
    46fe:	f240 0228 	movw	r2, #40	; 0x28
    4702:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4706:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    470a:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    470e:	6801      	ldr	r1, [r0, #0]
    4710:	460b      	mov	r3, r1
    4712:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4716:	185b      	adds	r3, r3, r1
    4718:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    471c:	18d3      	adds	r3, r2, r3
    471e:	681b      	ldr	r3, [r3, #0]
    4720:	f04f 32ff 	mov.w	r2, #4294967295
    4724:	629a      	str	r2, [r3, #40]	; 0x28
			break;
    4726:	e13f      	b.n	49a8 <main+0xd00>
		case 0x9: /* sleep */
			if (tasks[current_task].stack->r0 != 0) {
    4728:	f240 0228 	movw	r2, #40	; 0x28
    472c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4730:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4734:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4738:	6819      	ldr	r1, [r3, #0]
    473a:	460b      	mov	r3, r1
    473c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4740:	185b      	adds	r3, r3, r1
    4742:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4746:	18d3      	adds	r3, r2, r3
    4748:	681b      	ldr	r3, [r3, #0]
    474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    474c:	2b00      	cmp	r3, #0
    474e:	f000 812a 	beq.w	49a6 <main+0xcfe>
				tasks[current_task].stack->r0 += tick_count;
    4752:	f240 0228 	movw	r2, #40	; 0x28
    4756:	f2c2 0200 	movt	r2, #8192	; 0x2000
    475a:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    475e:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    4762:	6801      	ldr	r1, [r0, #0]
    4764:	460b      	mov	r3, r1
    4766:	ea4f 0343 	mov.w	r3, r3, lsl #1
    476a:	185b      	adds	r3, r3, r1
    476c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4770:	18d3      	adds	r3, r2, r3
    4772:	6818      	ldr	r0, [r3, #0]
    4774:	f240 0228 	movw	r2, #40	; 0x28
    4778:	f2c2 0200 	movt	r2, #8192	; 0x2000
    477c:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4780:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4784:	6819      	ldr	r1, [r3, #0]
    4786:	460b      	mov	r3, r1
    4788:	ea4f 0343 	mov.w	r3, r3, lsl #1
    478c:	185b      	adds	r3, r3, r1
    478e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4792:	18d3      	adds	r3, r2, r3
    4794:	681b      	ldr	r3, [r3, #0]
    4796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4798:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    479c:	f101 013c 	add.w	r1, r1, #60	; 0x3c
    47a0:	680b      	ldr	r3, [r1, #0]
    47a2:	18d3      	adds	r3, r2, r3
    47a4:	6283      	str	r3, [r0, #40]	; 0x28
				tasks[current_task].status = TASK_WAIT_TIME;
    47a6:	f240 0228 	movw	r2, #40	; 0x28
    47aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    47ae:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    47b2:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    47b6:	6819      	ldr	r1, [r3, #0]
    47b8:	460b      	mov	r3, r1
    47ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
    47be:	185b      	adds	r3, r3, r1
    47c0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    47c4:	18d3      	adds	r3, r2, r3
    47c6:	f103 0308 	add.w	r3, r3, #8
    47ca:	f04f 0204 	mov.w	r2, #4
    47ce:	601a      	str	r2, [r3, #0]
			}
			break;
    47d0:	e0e9      	b.n	49a6 <main+0xcfe>
		default: /* Catch all interrupts */
			if ((int)tasks[current_task].stack->r7 < 0) {
    47d2:	f240 0228 	movw	r2, #40	; 0x28
    47d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    47da:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    47de:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    47e2:	6801      	ldr	r1, [r0, #0]
    47e4:	460b      	mov	r3, r1
    47e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    47ea:	185b      	adds	r3, r3, r1
    47ec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    47f0:	18d3      	adds	r3, r2, r3
    47f2:	681b      	ldr	r3, [r3, #0]
    47f4:	68db      	ldr	r3, [r3, #12]
    47f6:	2b00      	cmp	r3, #0
    47f8:	f280 80d6 	bge.w	49a8 <main+0xd00>
				unsigned int intr = -tasks[current_task].stack->r7 - 16;
    47fc:	f240 0228 	movw	r2, #40	; 0x28
    4800:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4804:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4808:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    480c:	6819      	ldr	r1, [r3, #0]
    480e:	460b      	mov	r3, r1
    4810:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4814:	185b      	adds	r3, r3, r1
    4816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    481a:	18d3      	adds	r3, r2, r3
    481c:	681b      	ldr	r3, [r3, #0]
    481e:	68da      	ldr	r2, [r3, #12]
    4820:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    4824:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    4828:	1a9b      	subs	r3, r3, r2
    482a:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    482e:	f100 0028 	add.w	r0, r0, #40	; 0x28
    4832:	6003      	str	r3, [r0, #0]

				if (intr == SysTick_IRQn) {
    4834:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    4838:	f101 0128 	add.w	r1, r1, #40	; 0x28
    483c:	680b      	ldr	r3, [r1, #0]
    483e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4842:	d113      	bne.n	486c <main+0xbc4>
					/* Never disable timer. We need it for pre-emption */
					timeup = 1;
    4844:	f04f 0301 	mov.w	r3, #1
    4848:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    484c:	f102 0240 	add.w	r2, r2, #64	; 0x40
    4850:	6013      	str	r3, [r2, #0]
					tick_count++;
    4852:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4856:	f100 003c 	add.w	r0, r0, #60	; 0x3c
    485a:	6803      	ldr	r3, [r0, #0]
    485c:	f103 0301 	add.w	r3, r3, #1
    4860:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    4864:	f101 013c 	add.w	r1, r1, #60	; 0x3c
    4868:	600b      	str	r3, [r1, #0]
    486a:	e009      	b.n	4880 <main+0xbd8>
				}
				else {
					/* Disable interrupt, interrupt_wait re-enables */
					NVIC_DisableIRQ(intr);
    486c:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    4870:	f102 0228 	add.w	r2, r2, #40	; 0x28
    4874:	6813      	ldr	r3, [r2, #0]
    4876:	b2db      	uxtb	r3, r3
    4878:	b25b      	sxtb	r3, r3
    487a:	4618      	mov	r0, r3
    487c:	f7fe f8a6 	bl	29cc <NVIC_DisableIRQ>
				}
				/* Unblock any waiting tasks */
				for (i = 0; i < task_count; i++)
    4880:	f04f 0300 	mov.w	r3, #0
    4884:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4888:	f100 0048 	add.w	r0, r0, #72	; 0x48
    488c:	6003      	str	r3, [r0, #0]
    488e:	e07c      	b.n	498a <main+0xce2>
					if ((tasks[i].status == TASK_WAIT_INTR && tasks[i].stack->r0 == intr) ||
    4890:	f240 0228 	movw	r2, #40	; 0x28
    4894:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4898:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    489c:	f103 0348 	add.w	r3, r3, #72	; 0x48
    48a0:	6819      	ldr	r1, [r3, #0]
    48a2:	460b      	mov	r3, r1
    48a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    48a8:	185b      	adds	r3, r3, r1
    48aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    48ae:	18d3      	adds	r3, r2, r3
    48b0:	f103 0308 	add.w	r3, r3, #8
    48b4:	681b      	ldr	r3, [r3, #0]
    48b6:	2b03      	cmp	r3, #3
    48b8:	d118      	bne.n	48ec <main+0xc44>
    48ba:	f240 0228 	movw	r2, #40	; 0x28
    48be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    48c2:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    48c6:	f100 0048 	add.w	r0, r0, #72	; 0x48
    48ca:	6801      	ldr	r1, [r0, #0]
    48cc:	460b      	mov	r3, r1
    48ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
    48d2:	185b      	adds	r3, r3, r1
    48d4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    48d8:	18d3      	adds	r3, r2, r3
    48da:	681b      	ldr	r3, [r3, #0]
    48dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    48de:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    48e2:	f101 0128 	add.w	r1, r1, #40	; 0x28
    48e6:	680b      	ldr	r3, [r1, #0]
    48e8:	429a      	cmp	r2, r3
    48ea:	d02d      	beq.n	4948 <main+0xca0>
					    (tasks[i].status == TASK_WAIT_TIME && tasks[i].stack->r0 == tick_count))
    48ec:	f240 0228 	movw	r2, #40	; 0x28
    48f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    48f4:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    48f8:	f103 0348 	add.w	r3, r3, #72	; 0x48
    48fc:	6819      	ldr	r1, [r3, #0]
    48fe:	460b      	mov	r3, r1
    4900:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4904:	185b      	adds	r3, r3, r1
    4906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    490a:	18d3      	adds	r3, r2, r3
    490c:	f103 0308 	add.w	r3, r3, #8
    4910:	681b      	ldr	r3, [r3, #0]
					/* Disable interrupt, interrupt_wait re-enables */
					NVIC_DisableIRQ(intr);
				}
				/* Unblock any waiting tasks */
				for (i = 0; i < task_count; i++)
					if ((tasks[i].status == TASK_WAIT_INTR && tasks[i].stack->r0 == intr) ||
    4912:	2b04      	cmp	r3, #4
    4914:	d12d      	bne.n	4972 <main+0xcca>
					    (tasks[i].status == TASK_WAIT_TIME && tasks[i].stack->r0 == tick_count))
    4916:	f240 0228 	movw	r2, #40	; 0x28
    491a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    491e:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4922:	f100 0048 	add.w	r0, r0, #72	; 0x48
    4926:	6801      	ldr	r1, [r0, #0]
    4928:	460b      	mov	r3, r1
    492a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    492e:	185b      	adds	r3, r3, r1
    4930:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4934:	18d3      	adds	r3, r2, r3
    4936:	681b      	ldr	r3, [r3, #0]
    4938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    493a:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    493e:	f101 013c 	add.w	r1, r1, #60	; 0x3c
    4942:	680b      	ldr	r3, [r1, #0]
    4944:	429a      	cmp	r2, r3
    4946:	d114      	bne.n	4972 <main+0xcca>
						tasks[i].status = TASK_READY;
    4948:	f240 0228 	movw	r2, #40	; 0x28
    494c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4950:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4954:	f103 0348 	add.w	r3, r3, #72	; 0x48
    4958:	6819      	ldr	r1, [r3, #0]
    495a:	460b      	mov	r3, r1
    495c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4960:	185b      	adds	r3, r3, r1
    4962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4966:	18d3      	adds	r3, r2, r3
    4968:	f103 0308 	add.w	r3, r3, #8
    496c:	f04f 0200 	mov.w	r2, #0
    4970:	601a      	str	r2, [r3, #0]
				else {
					/* Disable interrupt, interrupt_wait re-enables */
					NVIC_DisableIRQ(intr);
				}
				/* Unblock any waiting tasks */
				for (i = 0; i < task_count; i++)
    4972:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4976:	f100 0048 	add.w	r0, r0, #72	; 0x48
    497a:	6803      	ldr	r3, [r0, #0]
    497c:	f103 0301 	add.w	r3, r3, #1
    4980:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    4984:	f101 0148 	add.w	r1, r1, #72	; 0x48
    4988:	600b      	str	r3, [r1, #0]
    498a:	f240 03e8 	movw	r3, #232	; 0xe8
    498e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4998:	f100 0048 	add.w	r0, r0, #72	; 0x48
    499c:	6802      	ldr	r2, [r0, #0]
    499e:	429a      	cmp	r2, r3
    49a0:	f4ff af76 	bcc.w	4890 <main+0xbe8>
    49a4:	e000      	b.n	49a8 <main+0xd00>
		case 0x9: /* sleep */
			if (tasks[current_task].stack->r0 != 0) {
				tasks[current_task].stack->r0 += tick_count;
				tasks[current_task].status = TASK_WAIT_TIME;
			}
			break;
    49a6:	bf00      	nop
						tasks[i].status = TASK_READY;
			}
		}

		/* Put waken tasks in ready list */
		for (task = wait_list; task != NULL;) {
    49a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
    49ac:	f1a3 0350 	sub.w	r3, r3, #80	; 0x50
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    49b6:	f101 0144 	add.w	r1, r1, #68	; 0x44
    49ba:	600b      	str	r3, [r1, #0]
    49bc:	e031      	b.n	4a22 <main+0xd7a>
			struct task_control_block *next = task->next;
    49be:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    49c2:	f102 0244 	add.w	r2, r2, #68	; 0x44
    49c6:	6813      	ldr	r3, [r2, #0]
    49c8:	695b      	ldr	r3, [r3, #20]
    49ca:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    49ce:	f100 0024 	add.w	r0, r0, #36	; 0x24
    49d2:	6003      	str	r3, [r0, #0]
			if (task->status == TASK_READY)
    49d4:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    49d8:	f101 0144 	add.w	r1, r1, #68	; 0x44
    49dc:	680b      	ldr	r3, [r1, #0]
    49de:	689b      	ldr	r3, [r3, #8]
    49e0:	2b00      	cmp	r3, #0
    49e2:	d114      	bne.n	4a0e <main+0xd66>
				task_push(&ready_list[task->priority], task);
    49e4:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    49e8:	f102 0244 	add.w	r2, r2, #68	; 0x44
    49ec:	6813      	ldr	r3, [r2, #0]
    49ee:	68db      	ldr	r3, [r3, #12]
    49f0:	ea4f 0283 	mov.w	r2, r3, lsl #2
    49f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
    49f8:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
    49fc:	189b      	adds	r3, r3, r2
    49fe:	4618      	mov	r0, r3
    4a00:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4a04:	f103 0344 	add.w	r3, r3, #68	; 0x44
    4a08:	6819      	ldr	r1, [r3, #0]
    4a0a:	f7fe fdb7 	bl	357c <task_push>
			task = next;
    4a0e:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4a12:	f100 0024 	add.w	r0, r0, #36	; 0x24
    4a16:	6803      	ldr	r3, [r0, #0]
    4a18:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    4a1c:	f101 0144 	add.w	r1, r1, #68	; 0x44
    4a20:	600b      	str	r3, [r1, #0]
						tasks[i].status = TASK_READY;
			}
		}

		/* Put waken tasks in ready list */
		for (task = wait_list; task != NULL;) {
    4a22:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    4a26:	f102 0244 	add.w	r2, r2, #68	; 0x44
    4a2a:	6813      	ldr	r3, [r2, #0]
    4a2c:	2b00      	cmp	r3, #0
    4a2e:	d1c6      	bne.n	49be <main+0xd16>
			if (task->status == TASK_READY)
				task_push(&ready_list[task->priority], task);
			task = next;
		}
		/* Select next TASK_READY task */
		for (i = 0; i < (size_t)tasks[current_task].priority && ready_list[i] == NULL; i++);
    4a30:	f04f 0300 	mov.w	r3, #0
    4a34:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4a38:	f100 0048 	add.w	r0, r0, #72	; 0x48
    4a3c:	6003      	str	r3, [r0, #0]
    4a3e:	e00b      	b.n	4a58 <main+0xdb0>
    4a40:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    4a44:	f101 0148 	add.w	r1, r1, #72	; 0x48
    4a48:	680b      	ldr	r3, [r1, #0]
    4a4a:	f103 0301 	add.w	r3, r3, #1
    4a4e:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    4a52:	f102 0248 	add.w	r2, r2, #72	; 0x48
    4a56:	6013      	str	r3, [r2, #0]
    4a58:	f240 0228 	movw	r2, #40	; 0x28
    4a5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a60:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4a64:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4a68:	6819      	ldr	r1, [r3, #0]
    4a6a:	460b      	mov	r3, r1
    4a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4a70:	185b      	adds	r3, r3, r1
    4a72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4a76:	18d3      	adds	r3, r2, r3
    4a78:	f103 030c 	add.w	r3, r3, #12
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	461a      	mov	r2, r3
    4a80:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4a84:	f100 0048 	add.w	r0, r0, #72	; 0x48
    4a88:	6803      	ldr	r3, [r0, #0]
    4a8a:	429a      	cmp	r2, r3
    4a8c:	d90c      	bls.n	4aa8 <main+0xe00>
    4a8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
    4a92:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
    4a96:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    4a9a:	f101 0148 	add.w	r1, r1, #72	; 0x48
    4a9e:	680a      	ldr	r2, [r1, #0]
    4aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d0cb      	beq.n	4a40 <main+0xd98>
		if (tasks[current_task].status == TASK_READY) {
    4aa8:	f240 0228 	movw	r2, #40	; 0x28
    4aac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ab0:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4ab4:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4ab8:	6819      	ldr	r1, [r3, #0]
    4aba:	460b      	mov	r3, r1
    4abc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4ac0:	185b      	adds	r3, r3, r1
    4ac2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4ac6:	18d3      	adds	r3, r2, r3
    4ac8:	f103 0308 	add.w	r3, r3, #8
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	2b00      	cmp	r3, #0
    4ad0:	d151      	bne.n	4b76 <main+0xece>
			if (!timeup && i == (size_t)tasks[current_task].priority)
    4ad2:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4ad6:	f100 0040 	add.w	r0, r0, #64	; 0x40
    4ada:	6803      	ldr	r3, [r0, #0]
    4adc:	2b00      	cmp	r3, #0
    4ade:	d11a      	bne.n	4b16 <main+0xe6e>
    4ae0:	f240 0228 	movw	r2, #40	; 0x28
    4ae4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ae8:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4aec:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4af0:	6819      	ldr	r1, [r3, #0]
    4af2:	460b      	mov	r3, r1
    4af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4af8:	185b      	adds	r3, r3, r1
    4afa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4afe:	18d3      	adds	r3, r2, r3
    4b00:	f103 030c 	add.w	r3, r3, #12
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	461a      	mov	r2, r3
    4b08:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4b0c:	f100 0048 	add.w	r0, r0, #72	; 0x48
    4b10:	6803      	ldr	r3, [r0, #0]
    4b12:	429a      	cmp	r2, r3
    4b14:	d07a      	beq.n	4c0c <main+0xf64>
				/* Current task has highest priority and remains execution time */
				continue;
			else
				task_push(&ready_list[tasks[current_task].priority], &tasks[current_task]);
    4b16:	f240 0228 	movw	r2, #40	; 0x28
    4b1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b1e:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
    4b22:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    4b26:	6819      	ldr	r1, [r3, #0]
    4b28:	460b      	mov	r3, r1
    4b2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4b2e:	185b      	adds	r3, r3, r1
    4b30:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4b34:	18d3      	adds	r3, r2, r3
    4b36:	f103 030c 	add.w	r3, r3, #12
    4b3a:	681b      	ldr	r3, [r3, #0]
    4b3c:	ea4f 0283 	mov.w	r2, r3, lsl #2
    4b40:	f107 0350 	add.w	r3, r7, #80	; 0x50
    4b44:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
    4b48:	1899      	adds	r1, r3, r2
    4b4a:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4b4e:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    4b52:	6802      	ldr	r2, [r0, #0]
    4b54:	4613      	mov	r3, r2
    4b56:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4b5a:	189b      	adds	r3, r3, r2
    4b5c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4b60:	461a      	mov	r2, r3
    4b62:	f240 0328 	movw	r3, #40	; 0x28
    4b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b6a:	18d3      	adds	r3, r2, r3
    4b6c:	4608      	mov	r0, r1
    4b6e:	4619      	mov	r1, r3
    4b70:	f7fe fd04 	bl	357c <task_push>
		}
		else {
			task_push(&wait_list, &tasks[current_task]);
		}
		while (ready_list[i] == NULL)
    4b74:	e025      	b.n	4bc2 <main+0xf1a>
				continue;
			else
				task_push(&ready_list[tasks[current_task].priority], &tasks[current_task]);
		}
		else {
			task_push(&wait_list, &tasks[current_task]);
    4b76:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    4b7a:	f101 014c 	add.w	r1, r1, #76	; 0x4c
    4b7e:	680a      	ldr	r2, [r1, #0]
    4b80:	4613      	mov	r3, r2
    4b82:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4b86:	189b      	adds	r3, r3, r2
    4b88:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4b8c:	461a      	mov	r2, r3
    4b8e:	f240 0328 	movw	r3, #40	; 0x28
    4b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b96:	18d2      	adds	r2, r2, r3
    4b98:	f107 0350 	add.w	r3, r7, #80	; 0x50
    4b9c:	f1a3 0350 	sub.w	r3, r3, #80	; 0x50
    4ba0:	4618      	mov	r0, r3
    4ba2:	4611      	mov	r1, r2
    4ba4:	f7fe fcea 	bl	357c <task_push>
		}
		while (ready_list[i] == NULL)
    4ba8:	e00b      	b.n	4bc2 <main+0xf1a>
			i++;
    4baa:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    4bae:	f102 0248 	add.w	r2, r2, #72	; 0x48
    4bb2:	6813      	ldr	r3, [r2, #0]
    4bb4:	f103 0301 	add.w	r3, r3, #1
    4bb8:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4bbc:	f100 0048 	add.w	r0, r0, #72	; 0x48
    4bc0:	6003      	str	r3, [r0, #0]
				task_push(&ready_list[tasks[current_task].priority], &tasks[current_task]);
		}
		else {
			task_push(&wait_list, &tasks[current_task]);
		}
		while (ready_list[i] == NULL)
    4bc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
    4bc6:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
    4bca:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
    4bce:	f101 0148 	add.w	r1, r1, #72	; 0x48
    4bd2:	680a      	ldr	r2, [r1, #0]
    4bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d0e6      	beq.n	4baa <main+0xf02>
			i++;
		current_task = task_pop(&ready_list[i])->pid;
    4bdc:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
    4be0:	f102 0248 	add.w	r2, r2, #72	; 0x48
    4be4:	6813      	ldr	r3, [r2, #0]
    4be6:	ea4f 0283 	mov.w	r2, r3, lsl #2
    4bea:	f107 0350 	add.w	r3, r7, #80	; 0x50
    4bee:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
    4bf2:	189b      	adds	r3, r3, r2
    4bf4:	4618      	mov	r0, r3
    4bf6:	f7fe fcff 	bl	35f8 <task_pop>
    4bfa:	4603      	mov	r3, r0
    4bfc:	685b      	ldr	r3, [r3, #4]
    4bfe:	f507 408c 	add.w	r0, r7, #17920	; 0x4600
    4c02:	f100 004c 	add.w	r0, r0, #76	; 0x4c
    4c06:	6003      	str	r3, [r0, #0]
	}
    4c08:	f7ff b971 	b.w	3eee <main+0x246>
		/* Select next TASK_READY task */
		for (i = 0; i < (size_t)tasks[current_task].priority && ready_list[i] == NULL; i++);
		if (tasks[current_task].status == TASK_READY) {
			if (!timeup && i == (size_t)tasks[current_task].priority)
				/* Current task has highest priority and remains execution time */
				continue;
    4c0c:	bf00      	nop
			task_push(&wait_list, &tasks[current_task]);
		}
		while (ready_list[i] == NULL)
			i++;
		current_task = task_pop(&ready_list[i])->pid;
	}
    4c0e:	f7ff b96e 	b.w	3eee <main+0x246>
    4c12:	bf00      	nop
	...

00004c20 <memcpy>:
    .syntax unified
    .align 4

.global memcpy
memcpy:
	push    {r0}
    4c20:	b401      	push	{r0}
	cmp     r2, #4
    4c22:	2a04      	cmp	r2, #4
	it      lo
    4c24:	bf38      	it	cc
	lslslo  r2, r2, #30         /* Adjust r2 for less_than_4_bytes */
    4c26:	ea5f 7282 	movscc.w	r2, r2, lsl #30
	blo     less_than_4_bytes
    4c2a:	f0c0 8031 	bcc.w	4c90 <less_than_4_bytes>
	
	ands    r3, r1, #3
    4c2e:	f011 0303 	ands.w	r3, r1, #3
	beq     aligned
    4c32:	f000 800e 	beq.w	4c52 <aligned>
	
	negs    r3, r3              /* Next aligned offset = (4 - src & 3) & 3 */
    4c36:	425b      	negs	r3, r3
	lsls    r3, r3, #31
    4c38:	07db      	lsls	r3, r3, #31
	ittt    cs
    4c3a:	bf22      	ittt	cs
	ldrhcs  r3, [r1], #2		/* Load if 2 bytes unaligned */
    4c3c:	f831 3b02 	ldrhcs.w	r3, [r1], #2
	subcs   r2, r2, #2
    4c40:	3a02      	subcs	r2, #2
	strhcs  r3, [r0], #2		/* Save if 2 bytes unaligned */
    4c42:	f820 3b02 	strhcs.w	r3, [r0], #2
	ittt    mi
    4c46:	bf42      	ittt	mi
	strbmi  r3, [r1] ,#1		/* Load if 1 byte unaligned */
    4c48:	f801 3b01 	strbmi.w	r3, [r1], #1
	submi   r2, r2, #1
    4c4c:	3a01      	submi	r2, #1
	strbmi  r3, [r0] ,#1		/* Save if 1 byte unaligned */
    4c4e:	f800 3b01 	strbmi.w	r3, [r0], #1

00004c52 <aligned>:

aligned:
	push    {r4 - r10}
    4c52:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	subs 	r2, #32		 
    4c56:	3a20      	subs	r2, #32
	blo     less_than_32_bytes
    4c58:	f0c0 8007 	bcc.w	4c6a <less_than_32_bytes>

00004c5c <L>:
L:
	ldmia 	r1!, {r3 - r10}
    4c5c:	e8b1 07f8 	ldmia.w	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
	subs 	r2, #32		 
    4c60:	3a20      	subs	r2, #32
	stmia	r0!, {r3 - r10}
    4c62:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	bhs 	L
    4c66:	f4bf aff9 	bcs.w	4c5c <L>

00004c6a <less_than_32_bytes>:
					
less_than_32_bytes:
	lsls    r2, r2, #28
    4c6a:	0712      	lsls	r2, r2, #28
	it      cs
    4c6c:	bf28      	it	cs
	ldmiacs	r1!, {r3 - r6}		/* Load if 16 bytes remained */
    4c6e:	c978      	ldmiacs	r1!, {r3, r4, r5, r6}
	it      mi
    4c70:	bf48      	it	mi
	ldmiami r1!, {r7 - r8}		/* Load if 8 bytes remained */
    4c72:	e8b1 0180 	ldmiami.w	r1!, {r7, r8}
	it      cs
    4c76:	bf28      	it	cs
	stmiacs	r0!, {r3 - r6}
    4c78:	c078      	stmiacs	r0!, {r3, r4, r5, r6}
	it      mi
    4c7a:	bf48      	it	mi
	stmiami r0!, {r7 - r8}
    4c7c:	e8a0 0180 	stmiami.w	r0!, {r7, r8}
	
	lsls    r2, r2, #2
    4c80:	0092      	lsls	r2, r2, #2
	itt     cs
    4c82:	bf24      	itt	cs
	ldrcs   r3, [r1], #4		/* Load if 4 bytes remained */
    4c84:	f851 3b04 	ldrcs.w	r3, [r1], #4
	strcs   r3, [r0], #4
    4c88:	f840 3b04 	strcs.w	r3, [r0], #4
	
	pop     {r4 - r10}
    4c8c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

00004c90 <less_than_4_bytes>:
	
less_than_4_bytes:
	it      ne
    4c90:	bf18      	it	ne
	ldrne   r3, [r1]    		/* Load if ether 2 bytes or 1 byte remained */
    4c92:	680b      	ldrne	r3, [r1, #0]
	lsls    r2, r2, #1
    4c94:	0052      	lsls	r2, r2, #1
	itt     cs
    4c96:	bf24      	itt	cs
	strhcs  r3, [r0],#2			/* Save if 2 bytes remained */
    4c98:	f820 3b02 	strhcs.w	r3, [r0], #2
	lsrcs   r3, r3, 16
    4c9c:	0c1b      	lsrcs	r3, r3, #16
	it      mi
    4c9e:	bf48      	it	mi
	strbmi  r3, [r0],#1			/* Save if 1 byte remained */
    4ca0:	f800 3b01 	strbmi.w	r3, [r0], #1
	
	pop     {r0}				
    4ca4:	bc01      	pop	{r0}
	bx      lr				
    4ca6:	4770      	bx	lr
    4ca8:	f3af 8000 	nop.w
    4cac:	f3af 8000 	nop.w

00004cb0 <strcmp>:
#include "stdarg.h"

int strcmp(const char *a, const char *b) __attribute__ ((naked));
int strcmp(const char *a, const char *b)
{
	asm(
    4cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
    4cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
    4cb8:	2a01      	cmp	r2, #1
    4cba:	bf88      	it	hi
    4cbc:	429a      	cmphi	r2, r3
    4cbe:	f43f aff7 	beq.w	4cb0 <strcmp>
    4cc2:	eba2 0003 	sub.w	r0, r2, r3
    4cc6:	4770      	bx	lr
        "   beq     strcmp_lop      \n"
		"	sub     r0, r2, r3  	\n"
        "   bx      lr              \n"
		:::
	);
}
    4cc8:	4618      	mov	r0, r3
    4cca:	bf00      	nop

00004ccc <strlen>:

size_t strlen(const char *s) __attribute__ ((naked));
size_t strlen(const char *s)
{
	asm(
    4ccc:	f1a0 0301 	sub.w	r3, r0, #1

00004cd0 <strlen_loop>:
    4cd0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4cd4:	2a00      	cmp	r2, #0
    4cd6:	f47f affb 	bne.w	4cd0 <strlen_loop>
    4cda:	eba3 0000 	sub.w	r0, r3, r0
    4cde:	4770      	bx	lr
        "   bne  strlen_loop        \n"
		"	sub  r0, r3, r0			\n"
		"	bx   lr					\n"
		:::
	);
}
    4ce0:	4618      	mov	r0, r3
    4ce2:	bf00      	nop

00004ce4 <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n)
{
    4ce4:	b480      	push	{r7}
    4ce6:	b087      	sub	sp, #28
    4ce8:	af00      	add	r7, sp, #0
    4cea:	60f8      	str	r0, [r7, #12]
    4cec:	60b9      	str	r1, [r7, #8]
    4cee:	607a      	str	r2, [r7, #4]
	const unsigned char *_s1 = (void *)s1, *_s2 = (void *)s2;
    4cf0:	68fb      	ldr	r3, [r7, #12]
    4cf2:	617b      	str	r3, [r7, #20]
    4cf4:	68bb      	ldr	r3, [r7, #8]
    4cf6:	613b      	str	r3, [r7, #16]

	if(!n--) {
    4cf8:	687b      	ldr	r3, [r7, #4]
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	bf14      	ite	ne
    4cfe:	2300      	movne	r3, #0
    4d00:	2301      	moveq	r3, #1
    4d02:	b2db      	uxtb	r3, r3
    4d04:	687a      	ldr	r2, [r7, #4]
    4d06:	f102 32ff 	add.w	r2, r2, #4294967295
    4d0a:	607a      	str	r2, [r7, #4]
    4d0c:	2b00      	cmp	r3, #0
    4d0e:	d00f      	beq.n	4d30 <strncmp+0x4c>
		return 0;
    4d10:	f04f 0300 	mov.w	r3, #0
    4d14:	e024      	b.n	4d60 <strncmp+0x7c>
	}

	for(; *_s1 && *_s2 && n && *_s1 == *_s2; _s1++, _s2++, n--);
    4d16:	697b      	ldr	r3, [r7, #20]
    4d18:	f103 0301 	add.w	r3, r3, #1
    4d1c:	617b      	str	r3, [r7, #20]
    4d1e:	693b      	ldr	r3, [r7, #16]
    4d20:	f103 0301 	add.w	r3, r3, #1
    4d24:	613b      	str	r3, [r7, #16]
    4d26:	687b      	ldr	r3, [r7, #4]
    4d28:	f103 33ff 	add.w	r3, r3, #4294967295
    4d2c:	607b      	str	r3, [r7, #4]
    4d2e:	e000      	b.n	4d32 <strncmp+0x4e>
    4d30:	bf00      	nop
    4d32:	697b      	ldr	r3, [r7, #20]
    4d34:	781b      	ldrb	r3, [r3, #0]
    4d36:	2b00      	cmp	r3, #0
    4d38:	d00c      	beq.n	4d54 <strncmp+0x70>
    4d3a:	693b      	ldr	r3, [r7, #16]
    4d3c:	781b      	ldrb	r3, [r3, #0]
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d008      	beq.n	4d54 <strncmp+0x70>
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d005      	beq.n	4d54 <strncmp+0x70>
    4d48:	697b      	ldr	r3, [r7, #20]
    4d4a:	781a      	ldrb	r2, [r3, #0]
    4d4c:	693b      	ldr	r3, [r7, #16]
    4d4e:	781b      	ldrb	r3, [r3, #0]
    4d50:	429a      	cmp	r2, r3
    4d52:	d0e0      	beq.n	4d16 <strncmp+0x32>

	return *_s1 - *_s2;
    4d54:	697b      	ldr	r3, [r7, #20]
    4d56:	781b      	ldrb	r3, [r3, #0]
    4d58:	461a      	mov	r2, r3
    4d5a:	693b      	ldr	r3, [r7, #16]
    4d5c:	781b      	ldrb	r3, [r3, #0]
    4d5e:	1ad3      	subs	r3, r2, r3
}
    4d60:	4618      	mov	r0, r3
    4d62:	f107 071c 	add.w	r7, r7, #28
    4d66:	46bd      	mov	sp, r7
    4d68:	bc80      	pop	{r7}
    4d6a:	4770      	bx	lr

00004d6c <putchar>:

void putchar(const char c) 
{
    4d6c:	b580      	push	{r7, lr}
    4d6e:	b084      	sub	sp, #16
    4d70:	af00      	add	r7, sp, #0
    4d72:	4603      	mov	r3, r0
    4d74:	71fb      	strb	r3, [r7, #7]
	int fdout;
	char tmpstr[2] = {'\0', '\0'};
    4d76:	f04f 0300 	mov.w	r3, #0
    4d7a:	723b      	strb	r3, [r7, #8]
    4d7c:	f04f 0300 	mov.w	r3, #0
    4d80:	727b      	strb	r3, [r7, #9]

	fdout = mq_open("/tmp/mqueue/out", 0);
    4d82:	f245 2028 	movw	r0, #21032	; 0x5228
    4d86:	f2c0 0000 	movt	r0, #0
    4d8a:	f04f 0100 	mov.w	r1, #0
    4d8e:	f7fd fff3 	bl	2d78 <mq_open>
    4d92:	60f8      	str	r0, [r7, #12]

	tmpstr[0] = c;
    4d94:	79fb      	ldrb	r3, [r7, #7]
    4d96:	723b      	strb	r3, [r7, #8]

	write(fdout, tmpstr, 2);
    4d98:	68f8      	ldr	r0, [r7, #12]
    4d9a:	f107 0308 	add.w	r3, r7, #8
    4d9e:	4619      	mov	r1, r3
    4da0:	f04f 0202 	mov.w	r2, #2
    4da4:	f7fd fcb0 	bl	2708 <write>
}
    4da8:	f107 0710 	add.w	r7, r7, #16
    4dac:	46bd      	mov	sp, r7
    4dae:	bd80      	pop	{r7, pc}

00004db0 <puts>:


void puts(char *s)
{
    4db0:	b580      	push	{r7, lr}
    4db2:	b084      	sub	sp, #16
    4db4:	af00      	add	r7, sp, #0
    4db6:	6078      	str	r0, [r7, #4]
	int fdout;    

	fdout = mq_open("/tmp/mqueue/out", 0);
    4db8:	f245 2028 	movw	r0, #21032	; 0x5228
    4dbc:	f2c0 0000 	movt	r0, #0
    4dc0:	f04f 0100 	mov.w	r1, #0
    4dc4:	f7fd ffd8 	bl	2d78 <mq_open>
    4dc8:	60f8      	str	r0, [r7, #12]

	write(fdout, s, strlen(s) + 1);
    4dca:	6878      	ldr	r0, [r7, #4]
    4dcc:	f7ff ff7e 	bl	4ccc <strlen>
    4dd0:	4603      	mov	r3, r0
    4dd2:	f103 0301 	add.w	r3, r3, #1
    4dd6:	68f8      	ldr	r0, [r7, #12]
    4dd8:	6879      	ldr	r1, [r7, #4]
    4dda:	461a      	mov	r2, r3
    4ddc:	f7fd fc94 	bl	2708 <write>
}
    4de0:	f107 0710 	add.w	r7, r7, #16
    4de4:	46bd      	mov	sp, r7
    4de6:	bd80      	pop	{r7, pc}

00004de8 <int2str>:

void int2str(int input, char *output) 
{
    4de8:	b480      	push	{r7}
    4dea:	b089      	sub	sp, #36	; 0x24
    4dec:	af00      	add	r7, sp, #0
    4dee:	6078      	str	r0, [r7, #4]
    4df0:	6039      	str	r1, [r7, #0]
	char tmp[16];
	int num_len = 0, i;
    4df2:	f04f 0300 	mov.w	r3, #0
    4df6:	61fb      	str	r3, [r7, #28]

	if(input == 0) {
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	d137      	bne.n	4e6e <int2str+0x86>
	    output[0] = '0';
    4dfe:	683b      	ldr	r3, [r7, #0]
    4e00:	f04f 0230 	mov.w	r2, #48	; 0x30
    4e04:	701a      	strb	r2, [r3, #0]
	    output[1] = '\0';
    4e06:	683b      	ldr	r3, [r7, #0]
    4e08:	f103 0301 	add.w	r3, r3, #1
    4e0c:	f04f 0200 	mov.w	r2, #0
    4e10:	701a      	strb	r2, [r3, #0]
	    return;
    4e12:	e04f      	b.n	4eb4 <int2str+0xcc>
	}

	while(input > 0) {
		tmp[num_len++] = '0' + (input % 10);
    4e14:	6879      	ldr	r1, [r7, #4]
    4e16:	f246 6367 	movw	r3, #26215	; 0x6667
    4e1a:	f2c6 6366 	movt	r3, #26214	; 0x6666
    4e1e:	fb83 2301 	smull	r2, r3, r3, r1
    4e22:	ea4f 02a3 	mov.w	r2, r3, asr #2
    4e26:	ea4f 73e1 	mov.w	r3, r1, asr #31
    4e2a:	1ad2      	subs	r2, r2, r3
    4e2c:	4613      	mov	r3, r2
    4e2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4e32:	189b      	adds	r3, r3, r2
    4e34:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4e38:	1aca      	subs	r2, r1, r3
    4e3a:	b2d3      	uxtb	r3, r2
    4e3c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    4e40:	b2da      	uxtb	r2, r3
    4e42:	69fb      	ldr	r3, [r7, #28]
    4e44:	f107 0108 	add.w	r1, r7, #8
    4e48:	18cb      	adds	r3, r1, r3
    4e4a:	701a      	strb	r2, [r3, #0]
    4e4c:	69fb      	ldr	r3, [r7, #28]
    4e4e:	f103 0301 	add.w	r3, r3, #1
    4e52:	61fb      	str	r3, [r7, #28]
		input /= 10;
    4e54:	687a      	ldr	r2, [r7, #4]
    4e56:	f246 6367 	movw	r3, #26215	; 0x6667
    4e5a:	f2c6 6366 	movt	r3, #26214	; 0x6666
    4e5e:	fb83 1302 	smull	r1, r3, r3, r2
    4e62:	ea4f 01a3 	mov.w	r1, r3, asr #2
    4e66:	ea4f 73e2 	mov.w	r3, r2, asr #31
    4e6a:	1acb      	subs	r3, r1, r3
    4e6c:	607b      	str	r3, [r7, #4]
	    output[0] = '0';
	    output[1] = '\0';
	    return;
	}

	while(input > 0) {
    4e6e:	687b      	ldr	r3, [r7, #4]
    4e70:	2b00      	cmp	r3, #0
    4e72:	dccf      	bgt.n	4e14 <int2str+0x2c>
		tmp[num_len++] = '0' + (input % 10);
		input /= 10;
	}

	for(i = 0; i < num_len; i++) {
    4e74:	f04f 0300 	mov.w	r3, #0
    4e78:	61bb      	str	r3, [r7, #24]
    4e7a:	e011      	b.n	4ea0 <int2str+0xb8>
	    output[i] = tmp[num_len - i - 1];
    4e7c:	69bb      	ldr	r3, [r7, #24]
    4e7e:	683a      	ldr	r2, [r7, #0]
    4e80:	18d3      	adds	r3, r2, r3
    4e82:	69f9      	ldr	r1, [r7, #28]
    4e84:	69ba      	ldr	r2, [r7, #24]
    4e86:	1a8a      	subs	r2, r1, r2
    4e88:	f102 32ff 	add.w	r2, r2, #4294967295
    4e8c:	f107 0120 	add.w	r1, r7, #32
    4e90:	188a      	adds	r2, r1, r2
    4e92:	f812 2c18 	ldrb.w	r2, [r2, #-24]
    4e96:	701a      	strb	r2, [r3, #0]
	while(input > 0) {
		tmp[num_len++] = '0' + (input % 10);
		input /= 10;
	}

	for(i = 0; i < num_len; i++) {
    4e98:	69bb      	ldr	r3, [r7, #24]
    4e9a:	f103 0301 	add.w	r3, r3, #1
    4e9e:	61bb      	str	r3, [r7, #24]
    4ea0:	69ba      	ldr	r2, [r7, #24]
    4ea2:	69fb      	ldr	r3, [r7, #28]
    4ea4:	429a      	cmp	r2, r3
    4ea6:	dbe9      	blt.n	4e7c <int2str+0x94>
	    output[i] = tmp[num_len - i - 1];
	}
	output[num_len] = '\0';
    4ea8:	69fb      	ldr	r3, [r7, #28]
    4eaa:	683a      	ldr	r2, [r7, #0]
    4eac:	18d3      	adds	r3, r2, r3
    4eae:	f04f 0200 	mov.w	r2, #0
    4eb2:	701a      	strb	r2, [r3, #0]
}
    4eb4:	f107 0724 	add.w	r7, r7, #36	; 0x24
    4eb8:	46bd      	mov	sp, r7
    4eba:	bc80      	pop	{r7}
    4ebc:	4770      	bx	lr
    4ebe:	bf00      	nop

00004ec0 <printf>:

void printf(const char *format, ...)
{
    4ec0:	b40f      	push	{r0, r1, r2, r3}
    4ec2:	b580      	push	{r7, lr}
    4ec4:	b082      	sub	sp, #8
    4ec6:	af00      	add	r7, sp, #0
	va_list arg;

	va_start(arg, format);
    4ec8:	f107 0314 	add.w	r3, r7, #20
    4ecc:	607b      	str	r3, [r7, #4]
	vprintf(format, arg);
    4ece:	6938      	ldr	r0, [r7, #16]
    4ed0:	6879      	ldr	r1, [r7, #4]
    4ed2:	f000 f807 	bl	4ee4 <vprintf>
	va_end(arg);
}
    4ed6:	f107 0708 	add.w	r7, r7, #8
    4eda:	46bd      	mov	sp, r7
    4edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    4ee0:	b004      	add	sp, #16
    4ee2:	4770      	bx	lr

00004ee4 <vprintf>:

void vprintf(const char *format, va_list va)
{
    4ee4:	b580      	push	{r7, lr}
    4ee6:	b088      	sub	sp, #32
    4ee8:	af00      	add	r7, sp, #0
    4eea:	6078      	str	r0, [r7, #4]
    4eec:	6039      	str	r1, [r7, #0]
	int mode = 0; // 0: usual char; 1: specifiers
    4eee:	f04f 0300 	mov.w	r3, #0
    4ef2:	61fb      	str	r3, [r7, #28]
	char tmpstr[16];

	for(; *format; format++) {
    4ef4:	e05f      	b.n	4fb6 <vprintf+0xd2>
		if(!mode) { // usual char
    4ef6:	69fb      	ldr	r3, [r7, #28]
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d115      	bne.n	4f28 <vprintf+0x44>
			if(*format == '%') {
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	781b      	ldrb	r3, [r3, #0]
    4f00:	2b25      	cmp	r3, #37	; 0x25
    4f02:	d103      	bne.n	4f0c <vprintf+0x28>
				mode = 1;
    4f04:	f04f 0301 	mov.w	r3, #1
    4f08:	61fb      	str	r3, [r7, #28]
				continue;
    4f0a:	e050      	b.n	4fae <vprintf+0xca>
			}
			else if(*format == '\n') {
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	781b      	ldrb	r3, [r3, #0]
    4f10:	2b0a      	cmp	r3, #10
    4f12:	d103      	bne.n	4f1c <vprintf+0x38>
				putchar('\r');
    4f14:	f04f 000d 	mov.w	r0, #13
    4f18:	f7ff ff28 	bl	4d6c <putchar>
			}
			putchar(*format);
    4f1c:	687b      	ldr	r3, [r7, #4]
    4f1e:	781b      	ldrb	r3, [r3, #0]
    4f20:	4618      	mov	r0, r3
    4f22:	f7ff ff23 	bl	4d6c <putchar>
    4f26:	e042      	b.n	4fae <vprintf+0xca>
		}
		else {
			switch(*format) {
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	781b      	ldrb	r3, [r3, #0]
    4f2c:	2b64      	cmp	r3, #100	; 0x64
    4f2e:	d022      	beq.n	4f76 <vprintf+0x92>
    4f30:	2b64      	cmp	r3, #100	; 0x64
    4f32:	dc04      	bgt.n	4f3e <vprintf+0x5a>
    4f34:	2b25      	cmp	r3, #37	; 0x25
    4f36:	d032      	beq.n	4f9e <vprintf+0xba>
    4f38:	2b63      	cmp	r3, #99	; 0x63
    4f3a:	d003      	beq.n	4f44 <vprintf+0x60>
    4f3c:	e037      	b.n	4fae <vprintf+0xca>
    4f3e:	2b73      	cmp	r3, #115	; 0x73
    4f40:	d00d      	beq.n	4f5e <vprintf+0x7a>
    4f42:	e034      	b.n	4fae <vprintf+0xca>
				case 'c':
					putchar(va_arg(va, int));
    4f44:	683b      	ldr	r3, [r7, #0]
    4f46:	f103 0204 	add.w	r2, r3, #4
    4f4a:	603a      	str	r2, [r7, #0]
    4f4c:	681b      	ldr	r3, [r3, #0]
    4f4e:	b2db      	uxtb	r3, r3
    4f50:	4618      	mov	r0, r3
    4f52:	f7ff ff0b 	bl	4d6c <putchar>
					mode = 0;
    4f56:	f04f 0300 	mov.w	r3, #0
    4f5a:	61fb      	str	r3, [r7, #28]
					break;
    4f5c:	e027      	b.n	4fae <vprintf+0xca>
				case 's':
					puts(va_arg(va, char *));
    4f5e:	683b      	ldr	r3, [r7, #0]
    4f60:	f103 0204 	add.w	r2, r3, #4
    4f64:	603a      	str	r2, [r7, #0]
    4f66:	681b      	ldr	r3, [r3, #0]
    4f68:	4618      	mov	r0, r3
    4f6a:	f7ff ff21 	bl	4db0 <puts>
					mode = 0;
    4f6e:	f04f 0300 	mov.w	r3, #0
    4f72:	61fb      	str	r3, [r7, #28]
					break;
    4f74:	e01b      	b.n	4fae <vprintf+0xca>
				case 'd':
					int2str(va_arg(va, int), tmpstr);
    4f76:	683b      	ldr	r3, [r7, #0]
    4f78:	f103 0204 	add.w	r2, r3, #4
    4f7c:	603a      	str	r2, [r7, #0]
    4f7e:	681b      	ldr	r3, [r3, #0]
    4f80:	4618      	mov	r0, r3
    4f82:	f107 030c 	add.w	r3, r7, #12
    4f86:	4619      	mov	r1, r3
    4f88:	f7ff ff2e 	bl	4de8 <int2str>
					puts(tmpstr);
    4f8c:	f107 030c 	add.w	r3, r7, #12
    4f90:	4618      	mov	r0, r3
    4f92:	f7ff ff0d 	bl	4db0 <puts>
					mode = 0;
    4f96:	f04f 0300 	mov.w	r3, #0
    4f9a:	61fb      	str	r3, [r7, #28]
					break;
    4f9c:	e007      	b.n	4fae <vprintf+0xca>
				case '%':
					putchar('%');
    4f9e:	f04f 0025 	mov.w	r0, #37	; 0x25
    4fa2:	f7ff fee3 	bl	4d6c <putchar>
					mode = 0;
    4fa6:	f04f 0300 	mov.w	r3, #0
    4faa:	61fb      	str	r3, [r7, #28]
					break;
    4fac:	bf00      	nop
void vprintf(const char *format, va_list va)
{
	int mode = 0; // 0: usual char; 1: specifiers
	char tmpstr[16];

	for(; *format; format++) {
    4fae:	687b      	ldr	r3, [r7, #4]
    4fb0:	f103 0301 	add.w	r3, r3, #1
    4fb4:	607b      	str	r3, [r7, #4]
    4fb6:	687b      	ldr	r3, [r7, #4]
    4fb8:	781b      	ldrb	r3, [r3, #0]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d19b      	bne.n	4ef6 <vprintf+0x12>
					mode = 0;
					break;
			}
		}
	}
}
    4fbe:	f107 0720 	add.w	r7, r7, #32
    4fc2:	46bd      	mov	sp, r7
    4fc4:	bd80      	pop	{r7, pc}
    4fc6:	bf00      	nop

00004fc8 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    4fc8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    4fca:	f000 b804 	b.w	4fd6 <LoopCopyDataInit>

00004fce <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    4fce:	4b0c      	ldr	r3, [pc, #48]	; (5000 <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
    4fd0:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    4fd2:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    4fd4:	3104      	adds	r1, #4

00004fd6 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    4fd6:	480b      	ldr	r0, [pc, #44]	; (5004 <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
    4fd8:	4b0b      	ldr	r3, [pc, #44]	; (5008 <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
    4fda:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    4fdc:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    4fde:	f4ff aff6 	bcc.w	4fce <CopyDataInit>
	ldr	r2, =_sbss
    4fe2:	4a0a      	ldr	r2, [pc, #40]	; (500c <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
    4fe4:	f000 b803 	b.w	4fee <LoopFillZerobss>

00004fe8 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    4fe8:	2300      	movs	r3, #0
	str	r3, [r2], #4
    4fea:	f842 3b04 	str.w	r3, [r2], #4

00004fee <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    4fee:	4b08      	ldr	r3, [pc, #32]	; (5010 <LoopFillZerobss+0x22>)
	cmp	r2, r3
    4ff0:	429a      	cmp	r2, r3
	bcc	FillZerobss
    4ff2:	f4ff aff9 	bcc.w	4fe8 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    4ff6:	f7fb f9cf 	bl	398 <SystemInit>
/* Call the application's entry point.*/
	bl	main
    4ffa:	f7fe fe55 	bl	3ca8 <main>
	bx	lr    
    4ffe:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    5000:	00005238 	.word	0x00005238
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    5004:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    5008:	20000028 	.word	0x20000028
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    500c:	20000028 	.word	0x20000028
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    5010:	200000ec 	.word	0x200000ec

00005014 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    5014:	f7ff bffe 	b.w	5014 <ADC1_2_IRQHandler>
    5018:	7379732f 	.word	0x7379732f
    501c:	7461702f 	.word	0x7461702f
    5020:	72657368 	.word	0x72657368
    5024:	00726576 	.word	0x00726576
    5028:	7665642f 	.word	0x7665642f
    502c:	7974742f 	.word	0x7974742f
    5030:	756f2f30 	.word	0x756f2f30
    5034:	00000074 	.word	0x00000074
    5038:	7665642f 	.word	0x7665642f
    503c:	7974742f 	.word	0x7974742f
    5040:	6e692f30 	.word	0x6e692f30
    5044:	00000000 	.word	0x00000000
    5048:	6c6c6548 	.word	0x6c6c6548
    504c:	57202c6f 	.word	0x57202c6f
    5050:	646c726f 	.word	0x646c726f
    5054:	00000a21 	.word	0x00000a21
    5058:	706d742f 	.word	0x706d742f
    505c:	75716d2f 	.word	0x75716d2f
    5060:	2f657565 	.word	0x2f657565
    5064:	0074756f 	.word	0x0074756f
    5068:	6c6c6548 	.word	0x6c6c6548
    506c:	0a31206f 	.word	0x0a31206f
    5070:	00000000 	.word	0x00000000
    5074:	6c6c6548 	.word	0x6c6c6548
    5078:	0a32206f 	.word	0x0a32206f
    507c:	00000000 	.word	0x00000000
    5080:	64616552 	.word	0x64616552
    5084:	00000079 	.word	0x00000079
    5088:	74696157 	.word	0x74696157
    508c:	61655220 	.word	0x61655220
    5090:	00000064 	.word	0x00000064
    5094:	74696157 	.word	0x74696157
    5098:	69725720 	.word	0x69725720
    509c:	00006574 	.word	0x00006574
    50a0:	74696157 	.word	0x74696157
    50a4:	746e4920 	.word	0x746e4920
    50a8:	00000072 	.word	0x00000072
    50ac:	74696157 	.word	0x74696157
    50b0:	6d695420 	.word	0x6d695420
    50b4:	00000065 	.word	0x00000065
    50b8:	6e6b6e55 	.word	0x6e6b6e55
    50bc:	206e776f 	.word	0x206e776f
    50c0:	74617473 	.word	0x74617473
    50c4:	00007375 	.word	0x00007375
    50c8:	00007370 	.word	0x00007370
    50cc:	6b736154 	.word	0x6b736154
    50d0:	73696c20 	.word	0x73696c20
    50d4:	203a2074 	.word	0x203a2074
    50d8:	00000d0a 	.word	0x00000d0a
    50dc:	20444950 	.word	0x20444950
    50e0:	00203e2d 	.word	0x00203e2d
    50e4:	7453202c 	.word	0x7453202c
    50e8:	73757461 	.word	0x73757461
    50ec:	203e2d20 	.word	0x203e2d20
    50f0:	00000000 	.word	0x00000000
    50f4:	7250202c 	.word	0x7250202c
    50f8:	69726f69 	.word	0x69726f69
    50fc:	2d207974 	.word	0x2d207974
    5100:	0000203e 	.word	0x0000203e
    5104:	00000d0a 	.word	0x00000d0a
    5108:	6f686365 	.word	0x6f686365
    510c:	00000000 	.word	0x00000000
    5110:	00000020 	.word	0x00000020
    5114:	6c6c6568 	.word	0x6c6c6568
    5118:	0000006f 	.word	0x0000006f
    511c:	6c6c6548 	.word	0x6c6c6548
    5120:	6e20216f 	.word	0x6e20216f
    5124:	20656369 	.word	0x20656369
    5128:	6d206f74 	.word	0x6d206f74
    512c:	20746565 	.word	0x20746565
    5130:	20756f79 	.word	0x20756f79
    5134:	0a5e5f5e 	.word	0x0a5e5f5e
    5138:	0000000d 	.word	0x0000000d
    513c:	706c6568 	.word	0x706c6568
    5140:	00000000 	.word	0x00000000
    5144:	20756f59 	.word	0x20756f59
    5148:	206e6163 	.word	0x206e6163
    514c:	20657375 	.word	0x20657375
    5150:	6f632034 	.word	0x6f632034
    5154:	6e616d6d 	.word	0x6e616d6d
    5158:	6e692064 	.word	0x6e692064
    515c:	63787a20 	.word	0x63787a20
    5160:	34393632 	.word	0x34393632
    5164:	73207327 	.word	0x73207327
    5168:	6c6c6568 	.word	0x6c6c6568
    516c:	000d0a2e 	.word	0x000d0a2e
    5170:	00000000 	.word	0x00000000
    5174:	000d0a20 	.word	0x000d0a20
    5178:	00000000 	.word	0x00000000
    517c:	20207370 	.word	0x20207370
    5180:	202d2020 	.word	0x202d2020
    5184:	7473694c 	.word	0x7473694c
    5188:	6c6c6120 	.word	0x6c6c6120
    518c:	73617420 	.word	0x73617420
    5190:	0d0a736b 	.word	0x0d0a736b
    5194:	00000000 	.word	0x00000000
    5198:	6f686365 	.word	0x6f686365
    519c:	202d2020 	.word	0x202d2020
    51a0:	7074754f 	.word	0x7074754f
    51a4:	6d207475 	.word	0x6d207475
    51a8:	61737365 	.word	0x61737365
    51ac:	0d0a6567 	.word	0x0d0a6567
    51b0:	00000000 	.word	0x00000000
    51b4:	6c6c6568 	.word	0x6c6c6568
    51b8:	202d206f 	.word	0x202d206f
    51bc:	776f6853 	.word	0x776f6853
    51c0:	6c657720 	.word	0x6c657720
    51c4:	656d6f63 	.word	0x656d6f63
    51c8:	73656d20 	.word	0x73656d20
    51cc:	65676173 	.word	0x65676173
    51d0:	00000d0a 	.word	0x00000d0a
    51d4:	706c6568 	.word	0x706c6568
    51d8:	202d2020 	.word	0x202d2020
    51dc:	776f6853 	.word	0x776f6853
    51e0:	69687420 	.word	0x69687420
    51e4:	65682073 	.word	0x65682073
    51e8:	7420706c 	.word	0x7420706c
    51ec:	656c6261 	.word	0x656c6261
    51f0:	00000d0a 	.word	0x00000d0a
    51f4:	6d6d6f43 	.word	0x6d6d6f43
    51f8:	20646e61 	.word	0x20646e61
    51fc:	20746f6e 	.word	0x20746f6e
    5200:	6e756f66 	.word	0x6e756f66
    5204:	000d0a64 	.word	0x000d0a64
    5208:	00000000 	.word	0x00000000
    520c:	3263787a 	.word	0x3263787a
    5210:	5f343936 	.word	0x5f343936
    5214:	6c656873 	.word	0x6c656873
    5218:	2024206c 	.word	0x2024206c
    521c:	00000000 	.word	0x00000000
    5220:	00082008 	.word	0x00082008
    5224:	00000000 	.word	0x00000000
    5228:	706d742f 	.word	0x706d742f
    522c:	75716d2f 	.word	0x75716d2f
    5230:	2f657565 	.word	0x2f657565
    5234:	0074756f 	.word	0x0074756f
